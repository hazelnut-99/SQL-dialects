DROP TABLE IF EXISTS simple_agf_summing_mt;
CREATE TABLE simple_agf_summing_mt
(
    a Int64,
    min_aggreg AggregateFunction(min, UInt64),
    min_simple SimpleAggregateFunction(min, UInt64),
    max_aggreg AggregateFunction(max, UInt64),
    max_simple SimpleAggregateFunction(max, UInt64),
    sum_aggreg AggregateFunction(sum, UInt64),
    sum_simple SimpleAggregateFunction(sum, UInt64),
    sumov_aggreg AggregateFunction(sumWithOverflow, UInt64),
    sumov_simple SimpleAggregateFunction(sumWithOverflow, UInt64),
    gbitand_aggreg AggregateFunction(groupBitAnd, UInt64),
    gbitand_simple SimpleAggregateFunction(groupBitAnd, UInt64),
    gbitor_aggreg AggregateFunction(groupBitOr, UInt64),
    gbitor_simple SimpleAggregateFunction(groupBitOr, UInt64),
    gbitxor_aggreg AggregateFunction(groupBitXor, UInt64),
    gbitxor_simple SimpleAggregateFunction(groupBitXor, UInt64),
    gra_aggreg AggregateFunction(groupArrayArray, Array(UInt64)),
    gra_simple SimpleAggregateFunction(groupArrayArray, Array(UInt64)),
    grp_aggreg AggregateFunction(groupUniqArrayArray, Array(UInt64)),
    grp_simple SimpleAggregateFunction(groupUniqArrayArray, Array(UInt64)),
    aggreg_map AggregateFunction(sumMap, Tuple(Array(String), Array(UInt64))),
    simple_map SimpleAggregateFunction(sumMap, Tuple(Array(String), Array(UInt64))),
    aggreg_map_min AggregateFunction(minMap, Tuple(Array(String), Array(UInt64))),
    simple_map_min SimpleAggregateFunction(minMap, Tuple(Array(String), Array(UInt64))),
    aggreg_map_max AggregateFunction(maxMap, Tuple(Array(String), Array(UInt64))),
    simple_map_max SimpleAggregateFunction(maxMap, Tuple(Array(String), Array(UInt64)))
)
ENGINE = SummingMergeTree
ORDER BY a;
INSERT INTO simple_agf_summing_mt SELECT
    number % 51 AS a,
    minState(number),
    min(number),
    maxState(number),
    max(number),
    sumState(number),
    sum(number),
    sumWithOverflowState(number),
    sumWithOverflow(number),
    groupBitAndState(number + 111111111),
    groupBitAnd(number + 111111111),
    groupBitOrState(number + 111111111),
    groupBitOr(number + 111111111),
    groupBitXorState(number + 111111111),
    groupBitXor(number + 111111111),
    groupArrayArrayState([toUInt64(number % 1000)]),
    groupArrayArray([toUInt64(number % 1000)]),
    groupUniqArrayArrayState([toUInt64(number % 500)]),
    groupUniqArrayArray([toUInt64(number % 500)]),
    sumMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    minMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    minMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    maxMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    maxMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13))))
FROM numbers(10000)
GROUP BY a;
INSERT INTO simple_agf_summing_mt SELECT
    number % 1151 AS a,
    minState(number),
    min(number),
    maxState(number),
    max(number),
    sumState(number),
    sum(number),
    sumWithOverflowState(number),
    sumWithOverflow(number),
    groupBitAndState(number + 111111111),
    groupBitAnd(number + 111111111),
    groupBitOrState(number + 111111111),
    groupBitOr(number + 111111111),
    groupBitXorState(number + 111111111),
    groupBitXor(number + 111111111),
    groupArrayArrayState([toUInt64(number % 1000)]),
    groupArrayArray([toUInt64(number % 1000)]),
    groupUniqArrayArrayState([toUInt64(number % 500)]),
    groupUniqArrayArray([toUInt64(number % 500)]),
    sumMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    minMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    minMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    maxMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    maxMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13))))
FROM numbers(10000)
GROUP BY a;
OPTIMIZE TABLE simple_agf_summing_mt FINAL;
INSERT INTO simple_agf_summing_mt SELECT
    number % 11151 AS a,
    minState(number),
    min(number),
    maxState(number),
    max(number),
    sumState(number),
    sum(number),
    sumWithOverflowState(number),
    sumWithOverflow(number),
    groupBitAndState((number % 3) + 111111110),
    groupBitAnd((number % 3) + 111111110),
    groupBitOrState(number + 111111111),
    groupBitOr(number + 111111111),
    groupBitXorState(number + 111111111),
    groupBitXor(number + 111111111),
    groupArrayArrayState([toUInt64(number % 100)]),
    groupArrayArray([toUInt64(number % 100)]),
    groupUniqArrayArrayState([toUInt64(number % 50)]),
    groupUniqArrayArray([toUInt64(number % 50)]),
    sumMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    minMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    minMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    maxMapState((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))),
    maxMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13))))
FROM numbers(10000)
GROUP BY a;
OPTIMIZE TABLE simple_agf_summing_mt FINAL;
