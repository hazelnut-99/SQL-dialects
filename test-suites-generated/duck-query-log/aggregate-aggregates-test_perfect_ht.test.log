SET default_null_order='nulls_first';;
PRAGMA enable_verification;
PRAGMA perfect_ht_threshold=20;;
SET disabled_optimizers to 'compressed_materialization';
CREATE OR REPLACE TABLE timeseries(year INTEGER, val INTEGER);;
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", sum(val), count(val), count_star() FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", list(val), string_agg(CAST(val AS VARCHAR), ',') FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SET disabled_optimizers to '';
CREATE OR REPLACE TABLE timeseries(year INTEGER, val INTEGER);;
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", sum(val), count(val), count_star() FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", list(val), string_agg(CAST(val AS VARCHAR), ',') FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SET disabled_optimizers to 'compressed_materialization';
CREATE OR REPLACE TABLE timeseries(year UINTEGER, val UINTEGER);;
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", sum(val), count(val), count_star() FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", list(val), string_agg(CAST(val AS VARCHAR), ',') FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SET disabled_optimizers to '';
CREATE OR REPLACE TABLE timeseries(year UINTEGER, val UINTEGER);;
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", sum(val), count(val), count_star() FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", list(val), string_agg(CAST(val AS VARCHAR), ',') FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SET disabled_optimizers to 'compressed_materialization';
CREATE OR REPLACE TABLE timeseries(year BIGINT, val BIGINT);;
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", sum(val), count(val), count_star() FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", list(val), string_agg(CAST(val AS VARCHAR), ',') FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SET disabled_optimizers to '';
CREATE OR REPLACE TABLE timeseries(year BIGINT, val BIGINT);;
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", sum(val), count(val), count_star() FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", list(val), string_agg(CAST(val AS VARCHAR), ',') FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SET disabled_optimizers to 'compressed_materialization';
CREATE OR REPLACE TABLE timeseries(year UBIGINT, val UBIGINT);;
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", sum(val), count(val), count_star() FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", list(val), string_agg(CAST(val AS VARCHAR), ',') FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SET disabled_optimizers to '';
CREATE OR REPLACE TABLE timeseries(year UBIGINT, val UBIGINT);;
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", sum(val), count(val), count_star() FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
SELECT "year", list(val), string_agg(CAST(val AS VARCHAR), ',') FROM timeseries GROUP BY "year" ORDER BY "year";
;
;
;
;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;;
create table manycolumns as select i a, i b, i c, i d, i e from range(0,2) tbl(i);;
select a, b, c, d, e FROM manycolumns GROUP BY 1, 2, 3, 4, 5;
select a, b, c, d, e FROM manycolumns GROUP BY 1, 2, 3, 4, 5;
;
select a, b, c, d, e FROM manycolumns GROUP BY 1, 2, 3, 4, 5;
SELECT a, b, c, d, e FROM manycolumns GROUP BY 1, 2, 3, 4, 5;
;
;
;
select a, b, c, d, e FROM manycolumns GROUP BY 1, 2, 3, 4, 5;
CREATE TABLE tinyints AS SELECT i::TINYINT::VARCHAR AS t FROM range(-127, 128) tbl(i);;
SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT t::TINYINT t1 FROM tinyints GROUP BY t1) tbl(i);
SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT t::TINYINT t1 FROM tinyints GROUP BY t1) tbl(i);
;
SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT t::TINYINT t1 FROM tinyints GROUP BY t1) tbl(i);
SELECT count(DISTINCT i), min(i), max(i), (sum(i) / count(i)) FROM (SELECT CAST(t AS TINYINT) AS t1 FROM tinyints GROUP BY t1) AS tbl(i);
;
;
;
;
SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT t::TINYINT t1 FROM tinyints GROUP BY t1) tbl(i);
CREATE TABLE smallints AS SELECT i::SMALLINT::VARCHAR AS t FROM range(-32767, 32768) tbl(i);;
SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT t::SMALLINT t1 FROM smallints GROUP BY t1) tbl(i);
SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT t::SMALLINT t1 FROM smallints GROUP BY t1) tbl(i);
;
SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT t::SMALLINT t1 FROM smallints GROUP BY t1) tbl(i);
SELECT count(DISTINCT i), min(i), max(i), (sum(i) / count(i)) FROM (SELECT CAST(t AS SMALLINT) AS t1 FROM smallints GROUP BY t1) AS tbl(i);
;
;
;
;
SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT t::SMALLINT t1 FROM smallints GROUP BY t1) tbl(i);
PRAGMA disable_verification;
create table dates as select date '1992-01-01' + concat(i, ' months')::interval as d from range(100) tbl(i);;
select extract(year from d), extract(month from d) from dates group by 1, 2 ORDER BY ALL;;
