PRAGMA enable_verification
SELECT UNNEST([[1, 2, 3]], recursive := true)
SELECT UNNEST([[1, 2, 3]], recursive := true)

SELECT UNNEST([[1, 2, 3]], recursive := true)
SELECT unnest(main.list_value(main.list_value(1, 2, 3)), "recursive" := CAST('t' AS BOOLEAN))



SELECT UNNEST([[1, 2, 3]], recursive := true)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], recursive := true)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], recursive := true)

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], recursive := true)
SELECT unnest(main.list_value(main.list_value(main.list_value(main.list_value(main.list_value(1, 2), main.list_value(3, 4)), main.list_value(main.list_value(5))), main.list_value(main.list_value(main.list_value())))), "recursive" := CAST('t' AS BOOLEAN))



SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], recursive := true)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 1)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 1)

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 1)
SELECT unnest(main.list_value(main.list_value(main.list_value(main.list_value(main.list_value(1, 2), main.list_value(3, 4)), main.list_value(main.list_value(5))), main.list_value(main.list_value(main.list_value())))), max_depth := 1)



SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 1)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 2)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 2)

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 2)
SELECT unnest(main.list_value(main.list_value(main.list_value(main.list_value(main.list_value(1, 2), main.list_value(3, 4)), main.list_value(main.list_value(5))), main.list_value(main.list_value(main.list_value())))), max_depth := 2)



SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 2)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 3)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 3)

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 3)
SELECT unnest(main.list_value(main.list_value(main.list_value(main.list_value(main.list_value(1, 2), main.list_value(3, 4)), main.list_value(main.list_value(5))), main.list_value(main.list_value(main.list_value())))), max_depth := 3)



SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 3)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 4)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 4)

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 4)
SELECT unnest(main.list_value(main.list_value(main.list_value(main.list_value(main.list_value(1, 2), main.list_value(3, 4)), main.list_value(main.list_value(5))), main.list_value(main.list_value(main.list_value())))), max_depth := 4)



SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 4)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 5)
SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 5)

SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 5)
SELECT unnest(main.list_value(main.list_value(main.list_value(main.list_value(main.list_value(1, 2), main.list_value(3, 4)), main.list_value(main.list_value(5))), main.list_value(main.list_value(main.list_value())))), max_depth := 5)



SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 5)
SELECT UNNEST([[1, 2, 3], [4, 5]]) AS a, UNNEST([1, 2, 3]) AS b
SELECT UNNEST([[1, 2, 3], [4, 5]]) AS a, UNNEST([1, 2, 3]) AS b

SELECT UNNEST([[1, 2, 3], [4, 5]]) AS a, UNNEST([1, 2, 3]) AS b
SELECT unnest(main.list_value(main.list_value(1, 2, 3), main.list_value(4, 5))) AS a, unnest(main.list_value(1, 2, 3)) AS b




SELECT UNNEST([[1, 2, 3], [4, 5]]) AS a, UNNEST([1, 2, 3]) AS b
SELECT UNNEST([[1, 2, 3], [4, 5]], recursive := true) AS a, UNNEST([1, 2, 3]) AS b ORDER BY a NULLS LAST
SELECT UNNEST([[1, 2, 3], [4, 5]], recursive := true) AS a, UNNEST([1, 2, 3]) AS b ORDER BY a NULLS LAST

SELECT UNNEST([[1, 2, 3], [4, 5]], recursive := true) AS a, UNNEST([1, 2, 3]) AS b ORDER BY a NULLS LAST
SELECT unnest(main.list_value(main.list_value(1, 2, 3), main.list_value(4, 5)), "recursive" := CAST('t' AS BOOLEAN)) AS a, unnest(main.list_value(1, 2, 3)) AS b ORDER BY a NULLS LAST



SELECT UNNEST([[1, 2, 3], [4, 5]], recursive := true) AS a, UNNEST([1, 2, 3]) AS b ORDER BY a NULLS LAST
SELECT UNNEST([[1, 2, 3], [4, 5]], recursive := true) AS a, UNNEST([1, 2, 3]) AS b ORDER BY a NULLS LAST
SELECT UNNEST([[1, 2, 3], [4, 5]], recursive := true) AS a, UNNEST([1, 2, 3]) AS b ORDER BY a NULLS LAST

SELECT UNNEST([[1, 2, 3], [4, 5]], recursive := true) AS a, UNNEST([1, 2, 3]) AS b ORDER BY a NULLS LAST
SELECT unnest(main.list_value(main.list_value(1, 2, 3), main.list_value(4, 5)), "recursive" := CAST('t' AS BOOLEAN)) AS a, unnest(main.list_value(1, 2, 3)) AS b ORDER BY a NULLS LAST



SELECT UNNEST([[1, 2, 3], [4, 5]], recursive := true) AS a, UNNEST([1, 2, 3]) AS b ORDER BY a NULLS LAST
SELECT UNNEST(a), b FROM (SELECT UNNEST([[1, 2, 3], [4, 5]]) AS a, UNNEST([1, 2, 3]) AS b)
SELECT UNNEST(a), b FROM (SELECT UNNEST([[1, 2, 3], [4, 5]]) AS a, UNNEST([1, 2, 3]) AS b)

SELECT UNNEST(a), b FROM (SELECT UNNEST([[1, 2, 3], [4, 5]]) AS a, UNNEST([1, 2, 3]) AS b)
SELECT unnest(a), b FROM (SELECT unnest(main.list_value(main.list_value(1, 2, 3), main.list_value(4, 5))) AS a, unnest(main.list_value(1, 2, 3)) AS b)




SELECT UNNEST(a), b FROM (SELECT UNNEST([[1, 2, 3], [4, 5]]) AS a, UNNEST([1, 2, 3]) AS b)
SELECT UNNEST(UNNEST([[1, 2, 3]]))
SELECT UNNEST(UNNEST([[1, 2, 3]]))

SELECT UNNEST(UNNEST([[1, 2, 3]]))
SELECT UNNEST(UNNEST([[1, 2, 3]]))
SELECT UNNEST();
SELECT UNNEST();

SELECT UNNEST();
SELECT UNNEST();
SELECT UNNEST([1, 2, 3], 'hello');
SELECT UNNEST([1, 2, 3], 'hello');

SELECT UNNEST([1, 2, 3], 'hello');
SELECT UNNEST([1, 2, 3], 'hello');
SELECT UNNEST([1, 2, 3], recursive := 'hello');
SELECT UNNEST([1, 2, 3], recursive := 'hello');

SELECT UNNEST([1, 2, 3], recursive := 'hello');
SELECT UNNEST([1, 2, 3], recursive := 'hello');
SELECT UNNEST([1, 2, 3], rec := true);
SELECT UNNEST([1, 2, 3], rec := true);

SELECT UNNEST([1, 2, 3], rec := true);
SELECT UNNEST([1, 2, 3], rec := true);
SELECT UNNEST([1, 2, 3], recursive := true, recursive := true);
SELECT UNNEST([1, 2, 3], recursive := true, recursive := true);

SELECT UNNEST([1, 2, 3], recursive := true, recursive := true);
SELECT UNNEST([1, 2, 3], recursive := true, recursive := true);
SELECT UNNEST([1, 2, 3], max_depth := 9999, recursive := true);
SELECT UNNEST([1, 2, 3], max_depth := 9999, recursive := true);

SELECT UNNEST([1, 2, 3], max_depth := 9999, recursive := true);
SELECT UNNEST([1, 2, 3], max_depth := 9999, recursive := true);
SELECT UNNEST([1, 2, 3], max_depth := 0);
SELECT UNNEST([1, 2, 3], max_depth := 0);

SELECT UNNEST([1, 2, 3], max_depth := 0);
SELECT UNNEST([1, 2, 3], max_depth := 0);
