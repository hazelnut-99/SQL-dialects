pragma enable_verification;
create macro input() as table
	select *
	from test_vector_types(NULL::INTEGER[]) t(i) where [x for x in i if x IS NOT NULL] != [] offset 3;
select true, true from input()
select true, true from input()

select true, true from input()
SELECT CAST('t' AS BOOLEAN), CAST('t' AS BOOLEAN) FROM input()




select true, true from input()
select map_keys(m) = input, map_values(m) = input from (
	select
		map(input, input) m,
		input
	from input() t(input)
) m;
select map_keys(m) = input, map_values(m) = input from (
	select
		map(input, input) m,
		input
	from input() t(input)
) m;

select map_keys(m) = input, map_values(m) = input from (
	select
		map(input, input) m,
		input
	from input() t(input)
) m;
SELECT (map_keys(m) = "input"), (map_values(m) = "input") FROM (SELECT map("input", "input") AS m, "input" FROM input() AS t("input")) AS m




select map_keys(m) = input, map_values(m) = input from (
	select
		map(input, input) m,
		input
	from input() t(input)
) m;
create table tbl (
	not_filtered bool,
	keys INTEGER[],
	vals VARCHAR[]
);
insert into tbl select
	case when
		i >= 500
	then
		true
	else
		false
	end as not_filtered,
	[x for x in range(length)] keys,
	['a' || i + x for x in range(length)] vals
	from (
		select 1 + (random() * 5)::BIGINT as length, i from range(1000) t(i)
	)
select
	vals[1] as val,
	keys[1] as key,
	map(keys, vals)[key] as first_map_entry,
		from tbl
	where
		not_filtered and first_map_entry[1] != val;
select
	vals[1] as val,
	keys[1] as key,
	map(keys, vals)[key] as first_map_entry,
		from tbl
	where
		not_filtered and first_map_entry[1] != val;

select
	vals[1] as val,
	keys[1] as key,
	map(keys, vals)[key] as first_map_entry,
		from tbl
	where
		not_filtered and first_map_entry[1] != val;
SELECT vals[1] AS val, keys[1] AS "key", map(keys, vals)["key"] AS first_map_entry FROM tbl WHERE (not_filtered AND (first_map_entry[1] != val))




select
	vals[1] as val,
	keys[1] as key,
	map(keys, vals)[key] as first_map_entry,
		from tbl
	where
		not_filtered and first_map_entry[1] != val;
create table data as from (
  values
  ([1], [3]),
  ([2], [9]),
  ([3], [15]),
  ([4], [21]),
) as t(l, r);
select l[1], r[1], map(l, r) from data where r[1] != 3;
select l[1], r[1], map(l, r) from data where r[1] != 3;

select l[1], r[1], map(l, r) from data where r[1] != 3;
SELECT l[1], r[1], map(l, r) FROM "data" WHERE (r[1] != 3)




select l[1], r[1], map(l, r) from data where r[1] != 3;
select l[1], r[1], map(l, r) from data where r[1] != 9;
select l[1], r[1], map(l, r) from data where r[1] != 9;

select l[1], r[1], map(l, r) from data where r[1] != 9;
SELECT l[1], r[1], map(l, r) FROM "data" WHERE (r[1] != 9)




select l[1], r[1], map(l, r) from data where r[1] != 9;
select l[1], r[1], map(l, r) from data where r[1] != 15;
select l[1], r[1], map(l, r) from data where r[1] != 15;

select l[1], r[1], map(l, r) from data where r[1] != 15;
SELECT l[1], r[1], map(l, r) FROM "data" WHERE (r[1] != 15)




select l[1], r[1], map(l, r) from data where r[1] != 15;
