pragma enable_verification;;
CREATE MACRO f(x := NULL) AS x+1;;
SELECT f();;
SELECT f();;
;
SELECT f();;
SELECT f();
;
;
;
;
SELECT f();;
SELECT f(x := 41);
SELECT f(x := 41);
;
SELECT f(x := 41);
SELECT f(x := 41);
;
;
;
;
SELECT f(x := 41);
SELECT f(x := (SELECT 41));;
SELECT f(x := (SELECT 41));;
;
SELECT f(x := (SELECT 41));;
SELECT f(x := (SELECT 41));
;
;
;
;
SELECT f(x := (SELECT 41));;
select f(x:=(select 1 a));;
select f(x:=(select 1 a));;
;
select f(x:=(select 1 a));;
SELECT f(x := (SELECT 1 AS a));
;
;
;
;
select f(x:=(select 1 a));;
select f(x:=a) from (select 41) t(a);;
select f(x:=a) from (select 41) t(a);;
;
select f(x:=a) from (select 41) t(a);;
SELECT f(x := a) FROM (SELECT 41) AS t(a);
;
;
;
;
select f(x:=a) from (select 41) t(a);;
create table t as select 41 a;;
select f(x:=a) from t;;
select f(x:=a) from t;;
;
select f(x:=a) from t;;
SELECT f(x := a) FROM t;
;
;
;
;
select f(x:=a) from t;;
create macro my_macro1(a, b := a) as a + b;;
create table integers (a integer);;
create macro my_macro2(a := i) as (
	select min(a) from integers
);;
insert into integers values (5), (10), (13);
select my_macro2(can_not_be_empty);
select my_macro2(can_not_be_empty);
;
select my_macro2(can_not_be_empty);
SELECT my_macro2(can_not_be_empty);
;
;
;
;
select my_macro2(can_not_be_empty);
drop table integers;;
select my_macro2(5);;
select my_macro2(5);;
;
select my_macro2(5);;
select my_macro2(5);;
Create table t1 (a int, b int);;
Create table t2 (c int, d int);;
CREATE OR REPLACE MACRO eq(x := NULL, y := NULL) AS x = y;
INSERT INTO t1 VALUES (1, 1), (1, 2), (2, 2), (3, 4);;
INSERT INTO t2 VALUES (4, 1), (2, 10), (6, 2), (2, 6);;
SELECT * FROM t1 as t1_alias inner join (select * from t2) as t2_alias ON (eq(x := t1_alias.a, y := t2_alias.c));
SELECT * FROM t1 as t1_alias inner join (select * from t2) as t2_alias ON (eq(x := t1_alias.a, y := t2_alias.c));
;
SELECT * FROM t1 as t1_alias inner join (select * from t2) as t2_alias ON (eq(x := t1_alias.a, y := t2_alias.c));
SELECT * FROM t1 AS t1_alias INNER JOIN (SELECT * FROM t2) AS t2_alias ON (eq(x := t1_alias.a, y := t2_alias.c));
;
;
;
;
SELECT * FROM t1 as t1_alias inner join (select * from t2) as t2_alias ON (eq(x := t1_alias.a, y := t2_alias.c));
SELECT * FROM t1 as t1_alias inner join (select * from t2) as t2_alias ON (eq(a := t1_alias.a, c := t2_alias.c));
SELECT * FROM t1 as t1_alias inner join (select * from t2) as t2_alias ON (eq(a := t1_alias.a, c := t2_alias.c));
;
SELECT * FROM t1 as t1_alias inner join (select * from t2) as t2_alias ON (eq(a := t1_alias.a, c := t2_alias.c));
SELECT * FROM t1 as t1_alias inner join (select * from t2) as t2_alias ON (eq(a := t1_alias.a, c := t2_alias.c));
