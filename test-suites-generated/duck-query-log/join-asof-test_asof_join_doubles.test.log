PRAGMA enable_verification;
CREATE TABLE events0 (begin DOUBLE, value INTEGER);;
INSERT INTO events0 VALUES
	(1, 0),
	(3, 1),
	(6, 2),
	(8, 3)
;;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC;
;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC;
SELECT p.ts, e."value" FROM range(0, 10) AS p(ts) INNER JOIN (SELECT "value", "begin", lead("begin", 1, CAST('infinity' AS DOUBLE)) OVER (ORDER BY "begin" ASC) AS "end" FROM events0) AS e ON (((p.ts >= e."begin") AND (p.ts < e."end"))) ORDER BY p.ts ASC;
;
;
;
;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC;
;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC;
SELECT p.ts, e."value" FROM range(0, 10) AS p(ts) ASOF INNER JOIN events0 AS e ON ((p.ts >= e."begin")) ORDER BY p.ts ASC;
;
;
;
;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF JOIN events0 e
USING (begin)
ORDER BY p.begin ASC;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF JOIN events0 e
USING (begin)
ORDER BY p.begin ASC;
;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF JOIN events0 e
USING (begin)
ORDER BY p.begin ASC;
SELECT p."begin", e."value" FROM range(0, 10) AS p("begin") ASOF INNER JOIN events0 AS e USING (begin) ORDER BY p."begin" ASC;
;
;
;
;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF JOIN events0 e
USING (begin)
ORDER BY p.begin ASC;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
LEFT JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC NULLS FIRST;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
LEFT JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC NULLS FIRST;
;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
LEFT JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC NULLS FIRST;
SELECT p.ts, e."value" FROM range(0, 10) AS p(ts) LEFT JOIN (SELECT "value", "begin", lead("begin", 1, CAST('infinity' AS DOUBLE)) OVER (ORDER BY "begin" ASC) AS "end" FROM events0) AS e ON (((p.ts >= e."begin") AND (p.ts < e."end"))) ORDER BY p.ts ASC NULLS FIRST;
;
;
;
;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
LEFT JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC NULLS FIRST;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF LEFT JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC NULLS FIRST;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF LEFT JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC NULLS FIRST;
;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF LEFT JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC NULLS FIRST;
SELECT p.ts, e."value" FROM range(0, 10) AS p(ts) ASOF LEFT JOIN events0 AS e ON ((p.ts >= e."begin")) ORDER BY p.ts ASC NULLS FIRST;
;
;
;
;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF LEFT JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC NULLS FIRST;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF LEFT JOIN events0 e
USING (begin)
ORDER BY p.begin ASC NULLS FIRST;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF LEFT JOIN events0 e
USING (begin)
ORDER BY p.begin ASC NULLS FIRST;
;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF LEFT JOIN events0 e
USING (begin)
ORDER BY p.begin ASC NULLS FIRST;
SELECT p."begin", e."value" FROM range(0, 10) AS p("begin") ASOF LEFT JOIN events0 AS e USING (begin) ORDER BY p."begin" ASC NULLS FIRST;
;
;
;
;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF LEFT JOIN events0 e
USING (begin)
ORDER BY p.begin ASC NULLS FIRST;
INSERT INTO events0 VALUES (10, 4);;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
RIGHT JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC NULLS LAST;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
RIGHT JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC NULLS LAST;
;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
RIGHT JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC NULLS LAST;
SELECT p.ts, e."value" FROM range(0, 10) AS p(ts) RIGHT JOIN (SELECT "value", "begin", lead("begin", 1, CAST('infinity' AS DOUBLE)) OVER (ORDER BY "begin" ASC) AS "end" FROM events0) AS e ON (((p.ts >= e."begin") AND (p.ts < e."end"))) ORDER BY p.ts ASC NULLS LAST;
;
;
;
;
SELECT p.ts, e.value
FROM 
	range(0,10) p(ts)
RIGHT JOIN (
	SELECT value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (ORDER BY begin ASC) AS end
	FROM events0
) e
ON p.ts >= e.begin AND p.ts < e.end
ORDER BY p.ts ASC NULLS LAST;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF RIGHT JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC NULLS LAST;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF RIGHT JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC NULLS LAST;
;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF RIGHT JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC NULLS LAST;
SELECT p.ts, e."value" FROM range(0, 10) AS p(ts) ASOF RIGHT JOIN events0 AS e ON ((p.ts >= e."begin")) ORDER BY p.ts ASC NULLS LAST;
;
;
;
;
SELECT p.ts, e.value
FROM range(0,10) p(ts) ASOF RIGHT JOIN events0 e
ON p.ts >= e.begin
ORDER BY p.ts ASC NULLS LAST;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF RIGHT JOIN events0 e
USING (begin)
ORDER BY p.begin ASC NULLS LAST;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF RIGHT JOIN events0 e
USING (begin)
ORDER BY p.begin ASC NULLS LAST;
;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF RIGHT JOIN events0 e
USING (begin)
ORDER BY p.begin ASC NULLS LAST;
SELECT p."begin", e."value" FROM range(0, 10) AS p("begin") ASOF RIGHT JOIN events0 AS e USING (begin) ORDER BY p."begin" ASC NULLS LAST;
;
;
;
;
SELECT p.begin, e.value
FROM range(0,10) p(begin) ASOF RIGHT JOIN events0 e
USING (begin)
ORDER BY p.begin ASC NULLS LAST;
CREATE TABLE events (key INTEGER, begin DOUBLE, value INTEGER);;
INSERT INTO events VALUES
	(1, 1, 0),
	(1, 3, 1),
	(1, 6, 2),
	(1, 8, 3),
	(2, 0, 10),
	(2, 7, 20),
	(2, 11, 30),
;;
CREATE TABLE probes AS
	SELECT key, ts
	FROM range(1,3) k(key) CROSS JOIN range(0,10) t(ts);
SELECT p.key, p.ts, e.value
FROM 
	probes p
JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1, 2 ASC;
SELECT p.key, p.ts, e.value
FROM 
	probes p
JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1, 2 ASC;
;
SELECT p.key, p.ts, e.value
FROM 
	probes p
JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1, 2 ASC;
SELECT p."key", p.ts, e."value" FROM probes AS p INNER JOIN (SELECT "key", "value", "begin", lead("begin", 1, CAST('infinity' AS DOUBLE)) OVER (PARTITION BY "key" ORDER BY "begin" ASC) AS "end" FROM events) AS e ON (((p."key" = e."key") AND (p.ts >= e."begin") AND (p.ts < e."end"))) ORDER BY 1, 2 ASC;
;
;
;
SELECT p.key, p.ts, e.value
FROM 
	probes p
JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1, 2 ASC;
SELECT p.key, p.ts, e.value
FROM probes p ASOF JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1, 2 ASC;
SELECT p.key, p.ts, e.value
FROM probes p ASOF JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1, 2 ASC;
;
SELECT p.key, p.ts, e.value
FROM probes p ASOF JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1, 2 ASC;
SELECT p."key", p.ts, e."value" FROM probes AS p ASOF INNER JOIN events AS e ON (((p."key" = e."key") AND (p.ts >= e."begin"))) ORDER BY 1, 2 ASC;
;
;
;
SELECT p.key, p.ts, e.value
FROM probes p ASOF JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1, 2 ASC;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF JOIN 
	events e
USING (key, begin)
ORDER BY 1, 2 ASC;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF JOIN 
	events e
USING (key, begin)
ORDER BY 1, 2 ASC;
;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF JOIN 
	events e
USING (key, begin)
ORDER BY 1, 2 ASC;
SELECT p."key", p."begin", e."value" FROM (SELECT "key", ts AS "begin" FROM probes) AS p ASOF INNER JOIN events AS e USING (key, begin) ORDER BY 1, 2 ASC;
;
;
;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF JOIN 
	events e
USING (key, begin)
ORDER BY 1, 2 ASC;
SELECT p.key, p.ts, e.value
FROM 
	probes p
LEFT JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1, 2 ASC NULLS FIRST;
SELECT p.key, p.ts, e.value
FROM 
	probes p
LEFT JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1, 2 ASC NULLS FIRST;
;
SELECT p.key, p.ts, e.value
FROM 
	probes p
LEFT JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1, 2 ASC NULLS FIRST;
SELECT p."key", p.ts, e."value" FROM probes AS p LEFT JOIN (SELECT "key", "value", "begin", lead("begin", 1, CAST('infinity' AS DOUBLE)) OVER (PARTITION BY "key" ORDER BY "begin" ASC) AS "end" FROM events) AS e ON (((p."key" = e."key") AND (p.ts >= e."begin") AND (p.ts < e."end"))) ORDER BY 1, 2 ASC NULLS FIRST;
;
;
;
SELECT p.key, p.ts, e.value
FROM 
	probes p
LEFT JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1, 2 ASC NULLS FIRST;
SELECT p.key, p.ts, e.value
FROM probes p ASOF LEFT JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1, 2, 3 ASC NULLS FIRST;
SELECT p.key, p.ts, e.value
FROM probes p ASOF LEFT JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1, 2, 3 ASC NULLS FIRST;
;
SELECT p.key, p.ts, e.value
FROM probes p ASOF LEFT JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1, 2, 3 ASC NULLS FIRST;
SELECT p."key", p.ts, e."value" FROM probes AS p ASOF LEFT JOIN events AS e ON (((p."key" = e."key") AND (p.ts >= e."begin"))) ORDER BY 1, 2, 3 ASC NULLS FIRST;
;
;
;
SELECT p.key, p.ts, e.value
FROM probes p ASOF LEFT JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1, 2, 3 ASC NULLS FIRST;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF LEFT JOIN 
	events e
USING (key, begin)
ORDER BY 1, 2 ASC NULLS FIRST;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF LEFT JOIN 
	events e
USING (key, begin)
ORDER BY 1, 2 ASC NULLS FIRST;
;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF LEFT JOIN 
	events e
USING (key, begin)
ORDER BY 1, 2 ASC NULLS FIRST;
SELECT p."key", p."begin", e."value" FROM (SELECT "key", ts AS "begin" FROM probes) AS p ASOF LEFT JOIN events AS e USING (key, begin) ORDER BY 1, 2 ASC NULLS FIRST;
;
;
;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF LEFT JOIN 
	events e
USING (key, begin)
ORDER BY 1, 2 ASC NULLS FIRST;
SELECT p.key, p.ts, e.value
FROM 
	probes p
RIGHT JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1 ASC NULLS FIRST, 2;
SELECT p.key, p.ts, e.value
FROM 
	probes p
RIGHT JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1 ASC NULLS FIRST, 2;
;
SELECT p.key, p.ts, e.value
FROM 
	probes p
RIGHT JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1 ASC NULLS FIRST, 2;
SELECT p."key", p.ts, e."value" FROM probes AS p RIGHT JOIN (SELECT "key", "value", "begin", lead("begin", 1, CAST('infinity' AS DOUBLE)) OVER (PARTITION BY "key" ORDER BY "begin" ASC) AS "end" FROM events) AS e ON (((p."key" = e."key") AND (p.ts >= e."begin") AND (p.ts < e."end"))) ORDER BY 1 ASC NULLS FIRST, 2;
;
;
;
SELECT p.key, p.ts, e.value
FROM 
	probes p
RIGHT JOIN (
	SELECT key, value, begin, 
		LEAD(begin, 1, 'infinity'::DOUBLE) OVER (PARTITION BY key ORDER BY begin ASC) AS end
	FROM events
) e
ON p.key = e.key AND p.ts >= e.begin AND p.ts < e.end
ORDER BY 1 ASC NULLS FIRST, 2;
SELECT p.key, p.ts, e.value
FROM probes p ASOF RIGHT JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1 ASC NULLS FIRST, 2;
SELECT p.key, p.ts, e.value
FROM probes p ASOF RIGHT JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1 ASC NULLS FIRST, 2;
;
SELECT p.key, p.ts, e.value
FROM probes p ASOF RIGHT JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1 ASC NULLS FIRST, 2;
SELECT p."key", p.ts, e."value" FROM probes AS p ASOF RIGHT JOIN events AS e ON (((p."key" = e."key") AND (p.ts >= e."begin"))) ORDER BY 1 ASC NULLS FIRST, 2;
;
;
;
SELECT p.key, p.ts, e.value
FROM probes p ASOF RIGHT JOIN events e
  ON p.key = e.key AND p.ts >= e.begin
ORDER BY 1 ASC NULLS FIRST, 2;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF RIGHT JOIN 
	events e
USING (key, begin)
ORDER BY 1 ASC NULLS FIRST, 2;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF RIGHT JOIN 
	events e
USING (key, begin)
ORDER BY 1 ASC NULLS FIRST, 2;
;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF RIGHT JOIN 
	events e
USING (key, begin)
ORDER BY 1 ASC NULLS FIRST, 2;
SELECT p."key", p."begin", e."value" FROM (SELECT "key", ts AS "begin" FROM probes) AS p ASOF RIGHT JOIN events AS e USING (key, begin) ORDER BY 1 ASC NULLS FIRST, 2;
;
;
;
SELECT p.key, p.begin, e.value
FROM 
	(SELECT key, ts AS begin FROM probes) p 
ASOF RIGHT JOIN 
	events e
USING (key, begin)
ORDER BY 1 ASC NULLS FIRST, 2;
