PRAGMA enable_verification;
SELECT CAST('[[True,False], [true], [FALSE], [false, true]]' AS BOOL[][]);
SELECT CAST('[1,2,3]' AS INT[]);
SELECT CAST('[1,2,3]' AS TINYINT[]);
SELECT CAST('[1,2,3]' AS SMALLINT[]);
SELECT CAST('[1,2,3]' AS INTEGER[]);
SELECT CAST('[1,2,3]' AS BIGINT[]);
SELECT CAST('[1,2,3]' AS HUGEINT[]);
SELECT CAST('[1,2,3]' AS UTINYINT[]);
SELECT CAST('[1,2,3]' AS USMALLINT[]);
SELECT CAST('[1,2,3]' AS UINTEGER[]);
SELECT CAST('[1,2,3]' AS UBIGINT[]);
SELECT CAST('[1,2,3]' AS UHUGEINT[]);
SELECT CAST('[[1,2,3], [3.333, 2.2, 1.1], [0]]' AS DOUBLE[][]);
SELECT CAST('[[1,2,3], [3.333, 2.2, 1.1], [0]]' AS FLOAT[][]);
CREATE TYPE mood AS ENUM('ok', 'sad', 'happy');
SELECT '[ok,happy]'::MOOD[];
SELECT '[nothappy]'::MOOD[];
SELECT CAST(LIST(date)::VARCHAR AS DATE[]) FROM test_all_types();
SELECT CAST(LIST(time)::VARCHAR AS TIME[]) FROM test_all_types();
SELECT CAST(LIST(timestamp)::VARCHAR AS TIME[]) FROM test_all_types();
SELECT CAST(LIST(timestamp_s)::VARCHAR AS TIME[]) FROM test_all_types();
SELECT CAST(LIST(timestamp_ms)::VARCHAR AS TIME[]) FROM test_all_types();
SELECT CAST(LIST(timestamp_ns)::VARCHAR AS TIME[]) FROM test_all_types();
SELECT CAST(LIST(blob)::VARCHAR AS BLOB[]) FROM test_all_types();
SELECT CAST(LIST(interval)::VARCHAR AS INTERVAL[]) FROM test_all_types();
CREATE TABLE big_list(col INT[]);
COPY (SELECT [i, NULL]::VARCHAR FROM range(0, 2000) tbl(i)) TO 'duckdb_unittest_tempdir/73788/big_list.csv' (HEADER 0);
COPY big_list FROM 'duckdb_unittest_tempdir/73788/big_list.csv';
SELECT COUNT(col) FROM big_list;
SELECT CAST('{a: True, b: False, c:[true]}' AS STRUCT(a BOOL, b BOOL, c BOOL[], d STRUCT(a BOOL, b BOOL)));
SELECT CAST('{a:1, b:{a:2, b: 3}}' AS STRUCT(a INT, b STRUCT(a INT, b INT)));
SELECT CAST('{a:1, b:{a:2, b: 3}}' AS STRUCT(a TINYINT, b STRUCT(a TINYINT, b TINYINT)));
SELECT CAST('{a:1, b:{a:2, b: 3}}' AS STRUCT(a SMALLINT, b STRUCT(a SMALLINT, b SMALLINT)));
SELECT CAST('{a:1, b:{a:2, b: 3}}' AS STRUCT(a INTEGER, b STRUCT(a INTEGER, b INTEGER)));
SELECT CAST('{a:1, b:{a:2, b: 3}}' AS STRUCT(a BIGINT, b STRUCT(a BIGINT, b BIGINT)));
SELECT CAST('{a:1, b:{a:2, b: 3}}' AS STRUCT(a HUGEINT, b STRUCT(a HUGEINT, b HUGEINT)));
SELECT CAST('{a:1, b:{a:2, b: 3}}' AS STRUCT(a UTINYINT, b STRUCT(a UTINYINT, b UTINYINT)));
SELECT CAST('{a:1, b:{a:2, b: 3}}' AS STRUCT(a USMALLINT, b STRUCT(a USMALLINT, b USMALLINT)));
SELECT CAST('{a:1, b:{a:2, b: 3}}' AS STRUCT(a UINTEGER, b STRUCT(a UINTEGER, b UINTEGER)));
SELECT CAST('{a:1, b:{a:2, b: 3}}' AS STRUCT(a UBIGINT, b STRUCT(a UBIGINT, b UBIGINT)));
SELECT CAST('{a:1, b:{a:2, b: 3}}' AS STRUCT(a UHUGEINT, b STRUCT(a UHUGEINT, b UHUGEINT)));
SELECT CAST('{a:1, b:{a:2}, c: 0.00002}' AS STRUCT(a DOUBLE, b STRUCT(a DOUBLE), c DOUBLE));
SELECT CAST('{a:1, b:{a:2}, c: 0.00002}' AS STRUCT(a FLOAT, b STRUCT(a FLOAT), c FLOAT));
SELECT '{a: ok, b: happy}'::STRUCT(a MOOD, b MOOD);
SELECT '{a: nothappy}'::STRUCT(a MOOD);
SELECT CAST(struct_pack(A=>date)::VARCHAR AS STRUCT(A DATE)) FROM test_all_types();
SELECT CAST(struct_pack(A=>time)::VARCHAR AS STRUCT(A TIME)) FROM test_all_types();
SELECT CAST(struct_pack(A=>timestamp)::VARCHAR AS STRUCT(A TIME)) FROM test_all_types();
SELECT CAST(struct_pack(A=>timestamp_s)::VARCHAR AS STRUCT(A TIME)) FROM test_all_types();
SELECT CAST(struct_pack(A=>timestamp_ms)::VARCHAR AS STRUCT(A TIME)) FROM test_all_types();
SELECT CAST(struct_pack(A=>timestamp_ms)::VARCHAR AS STRUCT(A TIME)) FROM test_all_types();
SELECT CAST(struct_pack(A=>timestamp_ns)::VARCHAR AS STRUCT(A TIME)) FROM test_all_types();
SELECT CAST(struct_pack(A=>blob)::VARCHAR AS STRUCT(A BLOB)) FROM test_all_types();
SELECT CAST(struct_pack(A=>interval)::VARCHAR AS STRUCT(A INTERVAL)) FROM test_all_types();
PRAGMA enable_verification;
select cast(0.5::FLOAT as TINYINT) as x;
select cast(0.55::FLOAT as TINYINT) as x;
select cast(1.5::FLOAT as TINYINT) as x;
select cast(-0.5::FLOAT as TINYINT) as x;
select cast(-0.55::FLOAT as TINYINT) as x;
select cast(-1.5::FLOAT as TINYINT) as x;
select cast(0.5::FLOAT as SMALLINT) as x;
select cast(0.55::FLOAT as SMALLINT) as x;
select cast(1.5::FLOAT as SMALLINT) as x;
select cast(-0.5::FLOAT as SMALLINT) as x;
select cast(-0.55::FLOAT as SMALLINT) as x;
select cast(-1.5::FLOAT as SMALLINT) as x;
select cast(0.5::FLOAT as INTEGER) as x;
select cast(0.55::FLOAT as INTEGER) as x;
select cast(1.5::FLOAT as INTEGER) as x;
select cast(-0.5::FLOAT as INTEGER) as x;
select cast(-0.55::FLOAT as INTEGER) as x;
select cast(-1.5::FLOAT as INTEGER) as x;
select cast(0.5::FLOAT as BIGINT) as x;
select cast(0.55::FLOAT as BIGINT) as x;
select cast(1.5::FLOAT as BIGINT) as x;
select cast(-0.5::FLOAT as BIGINT) as x;
select cast(-0.55::FLOAT as BIGINT) as x;
select cast(-1.5::FLOAT as BIGINT) as x;
select cast(0.5::FLOAT as HUGEINT) as x;
select cast(0.55::FLOAT as HUGEINT) as x;
select cast(1.5::FLOAT as HUGEINT) as x;
select cast(-0.5::FLOAT as HUGEINT) as x;
select cast(-0.55::FLOAT as HUGEINT) as x;
select cast(-1.5::FLOAT as HUGEINT) as x;
select cast(0.5::DOUBLE as TINYINT) as x;
select cast(0.55::DOUBLE as TINYINT) as x;
select cast(1.5::DOUBLE as TINYINT) as x;
select cast(-0.5::DOUBLE as TINYINT) as x;
select cast(-0.55::DOUBLE as TINYINT) as x;
select cast(-1.5::DOUBLE as TINYINT) as x;
select cast(0.5::DOUBLE as SMALLINT) as x;
select cast(0.55::DOUBLE as SMALLINT) as x;
select cast(1.5::DOUBLE as SMALLINT) as x;
select cast(-0.5::DOUBLE as SMALLINT) as x;
select cast(-0.55::DOUBLE as SMALLINT) as x;
select cast(-1.5::DOUBLE as SMALLINT) as x;
select cast(0.5::DOUBLE as INTEGER) as x;
select cast(0.55::DOUBLE as INTEGER) as x;
select cast(1.5::DOUBLE as INTEGER) as x;
select cast(-0.5::DOUBLE as INTEGER) as x;
select cast(-0.55::DOUBLE as INTEGER) as x;
select cast(-1.5::DOUBLE as INTEGER) as x;
select cast(0.5::DOUBLE as BIGINT) as x;
select cast(0.55::DOUBLE as BIGINT) as x;
select cast(1.5::DOUBLE as BIGINT) as x;
select cast(-0.5::DOUBLE as BIGINT) as x;
select cast(-0.55::DOUBLE as BIGINT) as x;
select cast(-1.5::DOUBLE as BIGINT) as x;
select cast(0.5::DOUBLE as HUGEINT) as x;
select cast(0.55::DOUBLE as HUGEINT) as x;
select cast(1.5::DOUBLE as HUGEINT) as x;
select cast(-0.5::DOUBLE as HUGEINT) as x;
select cast(-0.55::DOUBLE as HUGEINT) as x;
select cast(-1.5::DOUBLE as HUGEINT) as x;
PRAGMA enable_verification;
select '1e2'::tinyint;
select '1.23e2'::tinyint;
select '1.234e2'::tinyint;
select '1.235e2'::tinyint;
select '1e-2'::tinyint;
select '123.456e-2'::tinyint;
select '1584.92e-2'::tinyint;
select '1214.235e-2'::tinyint;
select '10e40'::tinyint;
select '1e2'::smallint;
select '1.23e2'::smallint;
select '1.234e2'::smallint;
select '1.235e2'::smallint;
select '1e-2'::smallint;
select '123.456e-2'::smallint;
select '1584.92e-2'::smallint;
select '1214.235e-2'::smallint;
select '10e40'::smallint;
select '1e2'::integer;
select '1.23e2'::integer;
select '1.234e2'::integer;
select '1.235e2'::integer;
select '1e-2'::integer;
select '123.456e-2'::integer;
select '1584.92e-2'::integer;
select '1214.235e-2'::integer;
select '10e40'::integer;
select '1e2'::bigint;
select '1.23e2'::bigint;
select '1.234e2'::bigint;
select '1.235e2'::bigint;
select '1e-2'::bigint;
select '123.456e-2'::bigint;
select '1584.92e-2'::bigint;
select '1214.235e-2'::bigint;
select '10e40'::bigint;
select '1e2'::hugeint;
select '1.23e2'::hugeint;
select '1.234e2'::hugeint;
select '1.235e2'::hugeint;
select '1e-2'::hugeint;
select '123.456e-2'::hugeint;
select '1584.92e-2'::hugeint;
select '1214.235e-2'::hugeint;
select '10e40'::hugeint;
select '1e2'::utinyint;
select '1.23e2'::utinyint;
select '1.234e2'::utinyint;
select '1.235e2'::utinyint;
select '1e-2'::utinyint;
select '123.456e-2'::utinyint;
select '1584.92e-2'::utinyint;
select '1214.235e-2'::utinyint;
select '10e40'::utinyint;
select '1e2'::usmallint;
select '1.23e2'::usmallint;
select '1.234e2'::usmallint;
select '1.235e2'::usmallint;
select '1e-2'::usmallint;
select '123.456e-2'::usmallint;
select '1584.92e-2'::usmallint;
select '1214.235e-2'::usmallint;
select '10e40'::usmallint;
select '1e2'::uinteger;
select '1.23e2'::uinteger;
select '1.234e2'::uinteger;
select '1.235e2'::uinteger;
select '1e-2'::uinteger;
select '123.456e-2'::uinteger;
select '1584.92e-2'::uinteger;
select '1214.235e-2'::uinteger;
select '10e40'::uinteger;
select '1e2'::ubigint;
select '1.23e2'::ubigint;
select '1.234e2'::ubigint;
select '1.235e2'::ubigint;
select '1e-2'::ubigint;
select '123.456e-2'::ubigint;
select '1584.92e-2'::ubigint;
select '1214.235e-2'::ubigint;
select '10e40'::ubigint;
select '1e2'::uhugeint;
select '1.23e2'::uhugeint;
select '1.234e2'::uhugeint;
select '1.235e2'::uhugeint;
select '1e-2'::uhugeint;
select '123.456e-2'::uhugeint;
select '1584.92e-2'::uhugeint;
select '1214.235e-2'::uhugeint;
select '10e40'::uhugeint;
select '-1e2'::tinyint;
select '-1.23456e2'::tinyint;
select '-0.158492e2'::tinyint;
select '-1.235e2'::tinyint;
select '-100e-2'::tinyint;
select '-50.23456e-2'::tinyint;
select '-1584.92e-2'::tinyint;
select '-1.235e-2'::tinyint;
select '-10e40'::tinyint;
select '-1e2'::smallint;
select '-1.23456e2'::smallint;
select '-0.158492e2'::smallint;
select '-1.235e2'::smallint;
select '-100e-2'::smallint;
select '-50.23456e-2'::smallint;
select '-1584.92e-2'::smallint;
select '-1.235e-2'::smallint;
select '-10e40'::smallint;
select '-1e2'::integer;
select '-1.23456e2'::integer;
select '-0.158492e2'::integer;
select '-1.235e2'::integer;
select '-100e-2'::integer;
select '-50.23456e-2'::integer;
select '-1584.92e-2'::integer;
select '-1.235e-2'::integer;
select '-10e40'::integer;
select '-1e2'::bigint;
select '-1.23456e2'::bigint;
select '-0.158492e2'::bigint;
select '-1.235e2'::bigint;
select '-100e-2'::bigint;
select '-50.23456e-2'::bigint;
select '-1584.92e-2'::bigint;
select '-1.235e-2'::bigint;
select '-10e40'::bigint;
select '-1e2'::hugeint;
select '-1.23456e2'::hugeint;
select '-0.158492e2'::hugeint;
select '-1.235e2'::hugeint;
select '-100e-2'::hugeint;
select '-50.23456e-2'::hugeint;
select '-1584.92e-2'::hugeint;
select '-1.235e-2'::hugeint;
select '-10e40'::hugeint;
select '12.7e1'::TINYINT, '-12.8e1'::TINYINT;
select '3276.7e1'::SMALLINT, '-3276.8e1'::SMALLINT;
select '214748364.7e1'::INTEGER, '-214748364.8e1'::INTEGER;
select '922337203685477580.7e1'::BIGINT, '-922337203685477580.8e1'::BIGINT;
select '17014118346046923173168730371588410572.7e1'::HUGEINT, '-17014118346046923173168730371588410572.8e1'::HUGEINT;
select '25.5e1'::UTINYINT;
select '6553.5e1'::USMALLINT;
select '429496729.5e1'::UINTEGER;
select '1844674407370955161.5e1'::UBIGINT;
select '34028236692093846346337460743176821145.5e1'::UHUGEINT;
select '12.8e1'::TINYINT;
select '3276.8e1'::SMALLINT;
select '214748364.8e1'::INTEGER;
select '922337203685477580.8e1'::BIGINT;
select '17014118346046923173168730371588410572.8e1'::HUGEINT;
select '-12.9e1'::TINYINT;
select '-3276.9e1'::SMALLINT;
select '-214748364.9e1'::INTEGER;
select '-922337203685477580.9e1'::BIGINT;
select '-17014118346046923173168730371588410572.9e1'::HUGEINT;
select '25.6e1'::UTINYINT;
select '6553.6e1'::USMALLINT;
select '429496729.6e1'::UINTEGER;
select '1844674407370955161.6e1'::UBIGINT;
select '1e100000'::int;
select '1e-100000'::int;
select '0.00000000000000000000000000000009223372036854775807e50'::BIGINT;
select '-0.00000000000000000000000000000009223372036854775807e50'::BIGINT;
select '0.00000000000170141183460469231731687303715884105727e50'::HUGEINT;
select '-0.00000000000170141183460469231731687303715884105727e50'::HUGEINT;
select '15123456789e-32768'::int;
select '0e32767'::int;
PRAGMA enable_verification;
SELECT CAST(1=1 AS VARCHAR);
SELECT CAST(1=0 AS VARCHAR);
SELECT CAST('true' AS BOOLEAN);
SELECT CAST('t' AS BOOLEAN);
SELECT CAST('TRUE' AS BOOLEAN);
SELECT CAST('false' AS BOOLEAN);
SELECT CAST('f' AS BOOLEAN);
SELECT CAST('FALSE' AS BOOLEAN);
SELECT CAST('12345' AS BOOLEAN);
SELECT CAST(CAST('12345' AS INTEGER) AS BOOLEAN);
SELECT CAST(CAST('0' AS INTEGER) AS BOOLEAN);
SELECT CAST(CAST('1' AS tinyint) AS BOOLEAN);
SELECT CAST(CAST('0' AS tinyint) AS BOOLEAN);
SELECT CAST(CAST('1' AS smallint) AS BOOLEAN);
SELECT CAST(CAST('0' AS smallint) AS BOOLEAN);
SELECT CAST(CAST('1' AS integer) AS BOOLEAN);
SELECT CAST(CAST('0' AS integer) AS BOOLEAN);
SELECT CAST(CAST('1' AS bigint) AS BOOLEAN);
SELECT CAST(CAST('0' AS bigint) AS BOOLEAN);
SELECT CAST(CAST('1' AS decimal) AS BOOLEAN);
SELECT CAST(CAST('0' AS decimal) AS BOOLEAN);
SELECT CAST(CAST('1' AS decimal(1,0)) AS BOOLEAN);
SELECT CAST(CAST('0' AS decimal(1,0)) AS BOOLEAN);
SELECT CAST(CAST('1' AS decimal(9,0)) AS BOOLEAN);
SELECT CAST(CAST('0' AS decimal(9,0)) AS BOOLEAN);
SELECT CAST(CAST('1' AS decimal(38,0)) AS BOOLEAN);
SELECT CAST(CAST('0' AS decimal(38,0)) AS BOOLEAN);
SELECT CAST(CAST('1' AS float) AS BOOLEAN);
SELECT CAST(CAST('0' AS float) AS BOOLEAN);
SELECT CAST(CAST('1' AS double) AS BOOLEAN);
SELECT CAST(CAST('0' AS double) AS BOOLEAN);
SELECT CAST(CAST('1' AS HUGEINT) AS BOOLEAN);
SELECT CAST(CAST('0' AS HUGEINT) AS BOOLEAN);
SELECT CAST(CAST('1' AS UHUGEINT) AS BOOLEAN);
SELECT CAST(CAST('0' AS UHUGEINT) AS BOOLEAN);
PRAGMA enable_verification;
SELECT TRY_CAST('hello' as INTEGER);
SELECT CAST('hello' as INTEGER);
SELECT TRY_CAST(3 as BIGINT), CAST(3 AS BIGINT), TRY_CAST(2 as BIGINT), CAST(3 AS INTEGER);
CREATE TABLE try_cast(try_cast INTEGER);
INSERT INTO try_cast VALUES (3);
SELECT try_cast FROM try_cast;
SELECT try_cast(try_cast as bigint) FROM try_cast;
SELECT try_cast(try_cast(try_cast as integer) as integer) FROM try_cast;
PRAGMA enable_verification;
SELECT '{key_A:0}'::STRUCT(key_A INT);
SELECT '{key_A: 2, key_B: 46, key_C: -3000}'::STRUCT(key_A INT, key_B INT, key_C INT);
SELECT '{key_A: 2, key_B: 3, key_C: 8}'::STRUCT(key_A INT, key_B DOUBLE, key_C FLOAT);
SELECT '{"key_A": 2, "key_B": hello world}'::STRUCT(key_A INT, key_B VARCHAR);
select (struct_pack(key_A=>'42'::double, key_B=>'DuckDB'::string)::VARCHAR)::STRUCT(key_A INT, key_B VARCHAR);
SELECT '{🦆: Quack, 🦤: ....}'::STRUCT(🦆 VARCHAR, 🦤 VARCHAR);
SELECT '{a:{c:1}, b:900}'::STRUCT(a STRUCT(c INT), b INT);
SELECT '{a:{b:DuckDB, c:12}, b:900, c:{a:"DuckParty"}}'::STRUCT(a STRUCT(b VARCHAR, c INT), b INT, c STRUCT(a VARCHAR));
SELECT '{a:{b:DuckDB, c:{a:{a:0.9, b:{a:"DuckieDuck"}, c:{a:9000}, d:{a:5881580-07-10}}, b:"🦆"}}, b:900, c:{a:"DuckParty"}}'::STRUCT(a STRUCT(b VARCHAR, c STRUCT(a STRUCT(a FLOAT, b STRUCT(a VARCHAR), c STRUCT(a INT), d STRUCT(a DATE)), b VARCHAR)), b INT, c STRUCT(a VARCHAR));
SELECT CAST('{a:{b:{c:{d:{e:{f:"Hello World"}}}}}}' AS STRUCT(a STRUCT(b STRUCT(c STRUCT(d STRUCT(e STRUCT(f VARCHAR)))))));
CREATE TABLE tbl1(col VARCHAR);
INSERT INTO tbl1 (VALUES ('{a:1, b:3}'));
SELECT col::STRUCT(a INT, b INT) FROM tbl1;
CREATE TABLE tbl2(col VARCHAR);
INSERT INTO tbl2 (VALUES ('{a:1, b:"hello, world"}')); ;
SELECT col::STRUCT(a INT, b VARCHAR) FROM tbl2;
CREATE TABLE tbl3(col VARCHAR);
INSERT INTO tbl3 (VALUES ('{a:DUCK, b:9.999, c:12}'), ('{a:"DB", b:1.111, c:21}'));
SELECT col::STRUCT(a VARCHAR, b FLOAT, c INT) FROM tbl3;
CREATE TABLE tbl4(col VARCHAR);
INSERT INTO tbl4 (VALUES ('{a:{b:1}}'));
SELECT col::STRUCT(a STRUCT(b INT)) FROM tbl4;
SELECT '{key_A: [2, 3, 4], key_B: [Hello, World]}'::STRUCT(key_A INT[], key_B VARCHAR[]);
SELECT '{key_A: [[2, 3], [4]], key_B: [Hello, World]}'::STRUCT(key_A INT[][], key_B VARCHAR[]);
SELECT '{key_A: [[{a: 5, b: 900}, {a:3, b:34}], [{a:2, b: 0}]], key_B: [Hello, World]}'::STRUCT(key_A STRUCT(a INT, b INT)[][], key_B VARCHAR[]);
SELECT '{key_B: 2, key_A: 46}'::STRUCT(key_A INT, key_B INT);
SELECT '{c:{a:"DuckParty"}, b:900, a:{b:DuckDB, c:{a:{a:0.9, b:{a:"DuckieDuck"}, c:{a:9000}, d:{a:5881580-07-10}}, b:"🦆"}}}'::STRUCT(a STRUCT(b VARCHAR, c STRUCT(a STRUCT(a FLOAT, b STRUCT(a VARCHAR), c STRUCT(a INT), d STRUCT(a DATE)), b VARCHAR)), b INT, c STRUCT(a VARCHAR));
SELECT '{key_D: "World Hello", key_B: [Hello, World], key_C : 5000, key_A: [[{a: 5, b: 900}, {a:3, b:34}], [{a:2, b: 0}]]}'::STRUCT(key_A STRUCT(a INT, b INT)[][], key_B VARCHAR[], key_C INT, key_D VARCHAR);
SELECT ('{a: "can''t", b: "you''re", c: "i''m"}'::STRUCT(a VARCHAR, b VARCHAR, c VARCHAR));
SELECT ('{a:"}", b: hello universe}'::STRUCT(a VARCHAR, b VARCHAR));
SELECT ('{a:''}'', b: "hello world"}'::STRUCT(a VARCHAR, b VARCHAR));
SELECT '{  key_A:     2, key_B: hello world    }'::STRUCT(key_A INT, key_B VARCHAR);
SELECT '    {a:        {b:         DuckDB,    c:12  }, b:  900, c          :{a
                    :   "DuckParty  "}       }    '::STRUCT(a STRUCT(b VARCHAR, c INT), b INT, c STRUCT(a VARCHAR));
SELECT '{key_A     : [      [{      a: 5    , b  : 900          }, { a: 3, b:    34}],      [   {a:
                2, b: 0    }    ] ],     key_B: [Hello       , World]   }'::STRUCT(key_A STRUCT(a INT, b INT)[][], key_B VARCHAR[]);
SELECT '{a  :  {c   : 9000}, b    : NULL
                                            , c:{ d: "Ducky", e:        NULL     }       }     '::STRUCT(a STRUCT(c INT), b VARCHAR, c STRUCT(d VARCHAR, e DOUBLE));
SELECT ' {      }   '::STRUCT(a INT, b DATE);
SELECT '{  key_A:     2, key_B: {key_C: hello world    }     X   }'::STRUCT(key_A INT, key_B STRUCT(key_C VARCHAR));
SELECT CAST(NULL AS STRUCT(a INT));
SELECT '{a: NULL}'::STRUCT(a VARCHAR);
SELECT '{a:12, b:NULL}'::STRUCT(a INT, b INT);
SELECT '{a:{c: NULL}, b: NULL, c:{d: "Ducky", e: NULL}}'::STRUCT(a STRUCT(c INT), b VARCHAR, c STRUCT(d VARCHAR, e DOUBLE));
SELECT '{key_A: 2, key_C: 8}'::STRUCT(key_A INT, key_B INT, key_C FLOAT);
SELECT '{key_C: 8, key_A: 2}'::STRUCT(key_A INT, key_B DOUBLE, key_C FLOAT);
SELECT '{key_C: Quack}'::STRUCT(key_A INT, key_B VARCHAR, key_C VARCHAR);
SELECT {'key_C': 2, 'key_A': 4}::VARCHAR::STRUCT(key_A INT, key_B VARCHAR, key_C VARCHAR);
SELECT '{key_A:0}'::STRUCT(key_A INT, key_B VARCHAR);
SELECT '{key_C: {key_B: 3, key_E: 🦆}, key_A: 2}'::STRUCT(key_A INT, key_C STRUCT(key_B INT, key_D INT, key_E VARCHAR));
SELECT '{a:{b:{b:300}, c:12}, c:{a:"DuckParty"}}'::STRUCT(a STRUCT(b STRUCT(a INT, b VARCHAR), c INT), b INT, c STRUCT(a VARCHAR, b STRUCT(a INT)));
SELECT '{}'::STRUCT(a INT, b VARCHAR);
SELECT TRY_CAST('{key_B: "hello", key_Z: 2, key_A: 46}' AS STRUCT(key_A INT, key_B VARCHAR));
SELECT TRY_CAST('{key_B: "hello", key_Z: 2, key_A: 46}' AS STRUCT(key_A INT, key_B VARCHAR, key_C INT));
SELECT TRY_CAST('{key_B: "hello", key_A: 46}' AS STRUCT(key_A INT, key_B INT));
SELECT TRY_CAST('{a:4, b:''Ducky'', c:''🦆''}' AS STRUCT(a INT, b DOUBLE, c VARCHAR));
CREATE TABLE try_cast_tbl(col VARCHAR);
INSERT INTO try_cast_tbl (VALUES ('{a:{d:1}, b:100, c:"🦆"}'), ('{a:{X:1}, b:100, c:"🦆"}'), ('{a:{d:1}, b:100, X:"🦆"}'), ('{a:"oh oh", b:100, c:"🦆"}'), ('{a:{d:"oops"}, b:100, c:"🦆"}'), ('{a:{d:"oops"}, b:100, Z: "undercover", c:"🦆"}'));
SELECT TRY_CAST(col AS STRUCT(a STRUCT(d INT), b DOUBLE, c VARCHAR)) FROM try_cast_tbl;
SELECT CAST('[{a:3}]' AS STRUCT(a INT));
SELECT CAST('Hello World' AS STRUCT(a VARCHAR));
SELECT CAST('{a: 3}}' AS STRUCT(a INT));
SELECT CAST('{a: 3, b:{c: 8}}}' AS STRUCT(a INT, b STRUCT(c INT)));
SELECT CAST('{{a: 3}' AS STRUCT(a INT));
SELECT CAST('{a:3}, {b:1}' AS STRUCT(a INT, b INT));
SELECT CAST('{a:{a:3}, b:{{b:1}}}' AS STRUCT(a STRUCT(a INT), b STRUCT(b INT)));
SELECT CAST('{a: 3 1}' AS STRUCT(a INT));
SELECT CAST('{a:3,, b:1}' AS STRUCT(a INT, b INT));
SELECT CAST('}{a:5}' AS STRUCT(a INT));
SELECT CAST('{a:{b:{d: 800}, {c: "Duck"}}}' AS STRUCT(a STRUCT(b STRUCT(d INT), c STRUCT(c VARCHAR))));
SELECT CAST('{[{]}}' AS STRUCT(a VARCHAR[]));
CREATE TABLE tbl(col VARCHAR);
INSERT INTO tbl (VALUES ('{a:DUCK, b:12}'), ('{a:"DB", b:21}'), ('{a:"Quack", b:2}'));
SELECT cast(col as STRUCT(a VARCHAR, b INT)).a FROM tbl WHERE cast(col as STRUCT(a VARCHAR, b INT)).b=12;
CREATE TABLE assorted_structs(col1 STRUCT(a INT, b VARCHAR));
COPY (SELECT '{a: 8, b: "hello, DuckDB"}') TO 'duckdb_unittest_tempdir/73788/assorted_structs.csv';
COPY assorted_structs FROM 'duckdb_unittest_tempdir/73788/assorted_structs.csv';
SELECT * FROM assorted_structs;
PRAGMA enable_verification;
CREATE TABLE bits (b bit);
INSERT INTO bits VALUES('00001111');
SELECT bitstring('1', 9)::BOOL;
SELECT b::BOOLEAN FROM bits;
SELECT '1'::BIT::BOOL;
SELECT '0'::BIT::BOOL;
SELECT b::TINYINT FROM bits;
SELECT b::SMALLINT FROM bits;
SELECT b::INTEGER FROM bits;
SELECT b::BIGINT FROM bits;
SELECT b::UTINYINT FROM bits;
SELECT b::USMALLINT FROM bits;
SELECT b::UINTEGER FROM bits;
SELECT b::UBIGINT FROM bits;
SELECT b::HUGEINT FROM bits;
SELECT b::UHUGEINT FROM bits;
SELECT b::FLOAT FROM bits;
SELECT b::DOUBLE FROM bits;
SELECT '100001111000011110000111100001111'::BIT::BIGINT;
SELECT 15::BOOLEAN::BIT;
SELECT 15::TINYINT::BIT;
SELECT 15::SMALLINT::BIT;
SELECT 15::BIT;
SELECT 15::BIGINT::BIT;
SELECT 15::HUGEINT::BIT;
SELECT 15::UHUGEINT::BIT;
SELECT 2.1e-44::FLOAT::BIT;
SELECT 7.4e-323::BIT;
SELECT bitstring('1', 9)::TINYINT;
SELECT bitstring('1', 17)::SMALLINT;
SELECT bitstring('1', 33)::INT;
SELECT bitstring('1', 65)::BIGINT;
SELECT bitstring('1', 33)::FLOAT;
SELECT bitstring('1', 65)::DOUBLE;
SELECT b::BLOB FROM bits;
SELECT bitstring('1111', 32)::BLOB;
SELECT '1111'::BIT::BLOB;
SELECT bitstring('1111', 33)::BLOB;
SELECT 'AAAA'::BLOB::BIT;
SELECT ''::BLOB::BIT;
SELECT (-15)::TINYINT::BIT;
SELECT (-15)::HUGEINT::BIT;
SELECT (127)::TINYINT::BIT;
SELECT (-128)::TINYINT::BIT;
SELECT (32767)::SMALLINT::BIT;
SELECT (-32768)::SMALLINT::BIT;
SELECT (2147483647)::INT::BIT;
SELECT (-2147483648)::INT::BIT;
SELECT (9223372036854775807)::BIGINT::BIT;
SELECT (-9223372036854775808)::BIGINT::BIT;
SELECT (170141183460469231731687303715884105727)::HUGEINT::BIT;
SELECT (-170141183460469231731687303715884105728)::HUGEINT::BIT;
SELECT '01111111'::BIT::TINYINT;
SELECT '10000000'::BIT::TINYINT;
SELECT '0111111111111111'::BIT::SMALLINT;
SELECT '1000000000000000'::BIT::SMALLINT;
SELECT '01111111111111111111111111111111'::BIT::INT;
SELECT '10000000000000000000000000000000'::BIT::INT;
SELECT '0111111111111111111111111111111111111111111111111111111111111111'::BIT::BIGINT;
SELECT '1000000000000000000000000000000000000000000000000000000000000000'::BIT::BIGINT;
SELECT '01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'::BIT::HUGEINT;
SELECT '10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'::BIT::HUGEINT;
SELECT (255)::UTINYINT::BIT;
SELECT (65535)::USMALLINT::BIT;
SELECT (4294967295)::UINTEGER::BIT;
SELECT (18446744073709551615)::UBIGINT::BIT;
SELECT '340282366920938463463374607431768211455'::UHUGEINT::BIT;
SELECT '11111111'::BIT::UTINYINT;
SELECT '1111111111111111'::BIT::USMALLINT;
SELECT '11111111111111111111111111111111'::BIT::UINTEGER;
SELECT '1111111111111111111111111111111111111111111111111111111111111111'::BIT::UBIGINT;
SELECT (3.4028235e+38)::FLOAT::BIT;
SELECT (1.7976931348623157e+308)::DOUBLE::BIT;
SELECT '01111111011111111111111111111111'::BIT::FLOAT;
SELECT '0111111111101111111111111111111111111111111111111111111111111111'::BIT::DOUBLE;
SELECT NULL::BIT;
SELECT NULL::BIT::INT;
PRAGMA enable_verification;
SELECT (1=1)::VARCHAR, (1=0)::VARCHAR, NULL::BOOLEAN::VARCHAR;
SELECT 1::TINYINT::VARCHAR, 12::TINYINT::VARCHAR, (-125)::TINYINT::VARCHAR;
SELECT 1::SMALLINT::VARCHAR, 12442::SMALLINT::VARCHAR, (-32153)::SMALLINT::VARCHAR;
SELECT 1::INTEGER::VARCHAR, 12442952::INTEGER::VARCHAR, (-2000000111)::INTEGER::VARCHAR;
SELECT 1::BIGINT::VARCHAR, 1244295295289253::BIGINT::VARCHAR, (-2000000111551166)::BIGINT::VARCHAR;
SELECT 2::FLOAT::VARCHAR, 0.5::FLOAT::VARCHAR, (-128.5)::FLOAT::VARCHAR;
SELECT 2::DOUBLE::VARCHAR, 0.5::DOUBLE::VARCHAR, (-128.5)::DOUBLE::VARCHAR;
SELECT '0xF'::INTEGER, '0x0'::INTEGER, '0xFEE'::INTEGER, '0xfee'::INTEGER, '0x00FEE'::INTEGER;
SELECT '0x'::INT;
SELECT '0X'::INT;
SELECT '0xHELLO'::INT;
SELECT '0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF'::INT;
SELECT '0x7F'::TINYINT, '0x7FFF'::SMALLINT, '0x7FFFFFFF'::INT, '0x7FFFFFFFFFFFFFFF'::BIGINT;
SELECT '0xFF'::UINT8, '0xFFFF'::UINT16, '0xFFFFFFFF'::UINT32, '0xFFFFFFFFFFFFFFFF'::UINT64;
SELECT '0x000000000000000000000000000000000000000000000000000000000000000000'::INT;
SELECT '0x80'::TINYINT;
SELECT '0x8000'::SMALLINT;
SELECT '0x80000000'::INT;
SELECT '0x8000000000000000'::BIGINT;
SELECT '0x100'::UINT8;
SELECT '0x10000'::UINT16;
SELECT '0x100000000'::UINT32;
SELECT '0x10000000000000000'::UINT64;
SELECT TRY_CAST('0x80' AS TINYINT);
SELECT TRY_CAST('0x8000' AS SMALLINT);
SELECT TRY_CAST('0x80000000' AS INT);
SELECT TRY_CAST('0x8000000000000000' AS BIGINT);
SELECT TRY_CAST('0x100' AS UINT8);
SELECT TRY_CAST('0x10000' AS UINT16);
SELECT TRY_CAST('0x100000000' AS UINT32);
SELECT TRY_CAST('0x10000000000000000' AS UINT64);
SELECT '0.5'::TINYINT;
SELECT '-0.5'::TINYINT;
SELECT '0.5'::SMALLINT;
SELECT '-0.5'::SMALLINT;
SELECT '0.5'::INTEGER;
SELECT '-0.5'::INTEGER;
SELECT '0.5'::BIGINT;
SELECT '-0.5'::BIGINT;
SELECT '0.5'::HUGEINT;
SELECT '-0.5'::HUGEINT;
SELECT '0x1e'::TINYINT;
SELECT '0x1e'::SMALLINT;
SELECT '0x1e'::INTEGER;
SELECT '0x1e'::BIGINT;
SELECT '0xfade'::INT;
SELECT '0Xfade'::INT;
SELECT '0xFADE'::INT;
SELECT '0XFADE'::INT;
SELECT '0xFaDe'::INT;
SELECT '0xFaDE'::INT;
SELECT '0XFaDe'::INT;
SELECT '0xfAdE'::INT;
SELECT '0'::TINYINT;
SELECT '0'::SMALLINT;
SELECT '0'::INTEGER;
SELECT '0'::BIGINT;
SELECT '0'::HUGEINT;
SELECT '0'::DECIMAL;
SELECT ('infinity'::timestamp)::VARCHAR;
SELECT ('-infinity'::timestamp)::VARCHAR;
SELECT TRY_CAST('infinity' AS timestamp);
SELECT TRY_CAST('-infinity' AS timestamp);
SELECT ('infinity'::timestamp_ms)::VARCHAR;
SELECT ('-infinity'::timestamp_ms)::VARCHAR;
SELECT TRY_CAST('infinity' AS timestamp_ms);
SELECT TRY_CAST('-infinity' AS timestamp_ms);
SELECT ('infinity'::timestamp_ns)::VARCHAR;
SELECT ('-infinity'::timestamp_ns)::VARCHAR;
SELECT TRY_CAST('infinity' AS timestamp_ns);
SELECT TRY_CAST('-infinity' AS timestamp_ns);
SELECT ('infinity'::timestamp_s)::VARCHAR;
SELECT ('-infinity'::timestamp_s)::VARCHAR;
SELECT TRY_CAST('infinity' AS timestamp_s);
SELECT TRY_CAST('-infinity' AS timestamp_s);
SELECT ('infinity'::timestamptz)::VARCHAR;
SELECT ('-infinity'::timestamptz)::VARCHAR;
SELECT TRY_CAST('infinity' AS timestamptz);
SELECT TRY_CAST('-infinity' AS timestamptz);
PRAGMA enable_verification;
select '0.000005'::tinyint;
select '1.100004'::tinyint;
select '0.5'::tinyint;
select '1.50004'::tinyint;
select '0.000005'::smallint;
select '1.100004'::smallint;
select '0.5'::smallint;
select '1.50004'::smallint;
select '0.000005'::integer;
select '1.100004'::integer;
select '0.5'::integer;
select '1.50004'::integer;
select '0.000005'::bigint;
select '1.100004'::bigint;
select '0.5'::bigint;
select '1.50004'::bigint;
select '0.000005'::hugeint;
select '1.100004'::hugeint;
select '0.5'::hugeint;
select '1.50004'::hugeint;
select '0.000005'::utinyint;
select '1.100004'::utinyint;
select '0.5'::utinyint;
select '1.50004'::utinyint;
select '0.000005'::usmallint;
select '1.100004'::usmallint;
select '0.5'::usmallint;
select '1.50004'::usmallint;
select '0.000005'::uinteger;
select '1.100004'::uinteger;
select '0.5'::uinteger;
select '1.50004'::uinteger;
select '0.000005'::ubigint;
select '1.100004'::ubigint;
select '0.5'::ubigint;
select '1.50004'::ubigint;
select '0.000005'::uhugeint;
select '1.100004'::uhugeint;
select '0.5'::uhugeint;
select '1.50004'::uhugeint;
select '-0.000005'::tinyint;
select '-1.100004'::tinyint;
select '-0.5'::tinyint;
select '-1.50004'::tinyint;
select '-0.000005'::smallint;
select '-1.100004'::smallint;
select '-0.5'::smallint;
select '-1.50004'::smallint;
select '-0.000005'::integer;
select '-1.100004'::integer;
select '-0.5'::integer;
select '-1.50004'::integer;
select '-0.000005'::bigint;
select '-1.100004'::bigint;
select '-0.5'::bigint;
select '-1.50004'::bigint;
select '-0.000005'::hugeint;
select '-1.100004'::hugeint;
select '-0.5'::hugeint;
select '-1.50004'::hugeint;
select '127.1'::TINYINT, '-128.1'::TINYINT;
select '32767.1'::SMALLINT, '-32768.1'::SMALLINT;
select '2147483647.1'::INTEGER, '-2147483648.1'::INTEGER;
select '9223372036854775807.1'::BIGINT, '-9223372036854775808.1'::BIGINT;
select '170141183460469231731687303715884105727.1'::HUGEINT, '-170141183460469231731687303715884105728.1'::HUGEINT;
select '255.1'::UTINYINT;
select '65535.1'::USMALLINT;
select '4294967295.1'::UINTEGER;
select '18446744073709551615.1'::UBIGINT;
select '340282366920938463463374607431768211455.1'::UHUGEINT;
select '127.5'::TINYINT;
select '32767.5'::SMALLINT;
select '2147483647.5'::INTEGER;
select '9223372036854775807.5'::BIGINT;
select '170141183460469231731687303715884105727.5'::HUGEINT;
select '-128.5'::TINYINT;
select '-32768.5'::SMALLINT;
select '-2147483648.5'::INTEGER;
select '-9223372036854775808.5'::BIGINT;
select '-170141183460469231731687303715884105728.5'::HUGEINT;
select '255.5'::UTINYINT;
select '65535.5'::USMALLINT;
select '4294967295.5'::UINTEGER;
select '18446744073709551615.5'::UBIGINT;
PRAGMA enable_verification;
SELECT '[12,13,14]'::INT[];
SELECT '["hello", "world", "!"]'::VARCHAR[];
SELECT CAST('[Hello World!]' AS VARCHAR[]);
SELECT CAST('[[Hello World!], hello, universe]' AS VARCHAR[]);
SELECT '[Cast like this]':: VARCHAR[];
select UNNEST('[NULL, , NULL]'::varchar[]);
select UNNEST('[NULL,, NULL]'::varchar[]);
select UNNEST('[NULL,   , NULL]'::varchar[]);
SELECT UNNEST('[NULL, NULL , ]'::varchar[]);
SELECT UNNEST('[NULL, NULL ,]'::varchar[]);
SELECT UNNEST('[NULL, NULL,]'::varchar[]);
SELECT CAST('[ [12,13,14], [8, 9], [4], [2, 1, 0] ]' AS INT[][]);
SELECT CAST('[ [[12,13,14], [8, 9]], [[4]], [[2, 1, 0], [99]] ]' AS INT[][][]);
SELECT CAST('[ [12,13,14], [8, 9], [4], [2,  1,  0] ]' AS VARCHAR[]);
SELECT CAST('[[ [🦆, 🦆, 🦆]], [[duck, db, 🦆], [🦆]], [[🦆, duck, db]]]' AS VARCHAR[][][]);
CREATE TABLE stringList (col1 VARCHAR);
INSERT INTO stringList VALUES ('["hello","world","!"]'), ('["Amazing","text"]'), ('[Hello World!]');
SELECT col1::VARCHAR[] FROM stringList;
CREATE TABLE nestedStrings (col1 VARCHAR);
INSERT INTO nestedStrings VALUES ('[["hello"], ["world"],["!"]]'), ('[["Amazing"],["text"]]'), ('[[Hello World!]]');
SELECT col1::VARCHAR[][] FROM nestedStrings;
CREATE TABLE superNestedStrings (col1 VARCHAR);
INSERT INTO superNestedStrings VALUES ('[[[[["hello"]]], [[["world"],["!"]]]]]'), ('[[[[["Amazing"]],[["text"]]]]]'), ('[[[[[Hello World!]]]]]');
SELECT col1::VARCHAR[][][][][] FROM superNestedStrings;
CREATE TABLE tbl (col1 VARCHAR);
INSERT INTO tbl VALUES ('[1,2,2]'), ('[345,67865,44,4]'), ('[5,6,7]');
SELECT col1::INT[] FROM tbl;
CREATE TABLE doubleNested (col1 VARCHAR);
INSERT INTO doubleNested VALUES ('[[1,2],[2]]'), ('[[345],[67865,44,4]]'), ('[[5],[6,7]]');
SELECT col1::INT[][] FROM doubleNested;
CREATE TABLE tripleNested (col1 VARCHAR);
INSERT INTO tripleNested VALUES ('[[[1,2],[3]]]'), ('[[[4]]]');
SELECT col1::INT[][][] FROM tripleNested;
CREATE TABLE crazyNested (col1 VARCHAR);
INSERT INTO crazyNested VALUES ('[[[[[[1]],[[3,4,9]]],[[[0,1]]]]]]'), ('[[[[[[4]]]]]]');
SELECT col1::INT[][][][][][] FROM crazyNested;
SELECT CAST('[''hello'',''world'', ''!'']' AS VARCHAR[]);
SELECT CAST('[''''hello'''',''''world'''', ''''!'''']' AS VARCHAR[]);
SELECT CAST('[[ [''🦆, 🦆, 🦆'']], [[duck, db, ''🦆''] ]]' AS VARCHAR[][][]);
SELECT CAST('["can''t", "you''re", "i''m"]' AS VARCHAR[]);
SELECT CAST('[can''t, you''re, i''m]' AS VARCHAR[]);
SELECT CAST('["]", "hello", "world"]' AS VARCHAR[]);
SELECT CAST('['']'', "hello", "world"]' AS VARCHAR[]);
SELECT CAST('[ [12,     13,14], [8, 9         ], [ 4    ], [    2, 1,     0] ]  ' AS INT[][]);
SELECT CAST('[          [ [12,     13,14], [8, 9         ]  ],[[ 4    ]   ],        [[    2, 1,     0 ]         ] ]  ' AS INT[][][]);
SELECT CAST('["   hello","          ''  world", "!         "]' AS VARCHAR[]);
SELECT CAST('[   hello     ,   world      , !         ]' AS VARCHAR[]);     ;
SELECT CAST('[    [ "   hello"]  ,["            world"        ],[ "!        "           ]      ]' AS VARCHAR[][]);
SELECT '[]'::VARCHAR[];
SELECT '[]'::INT[];
SELECT '[]'::INT[][][][];
SELECT '[[1, 2, 3], [], [	], [  ]]'::INT[][];
SELECT '[[1, 2, 3], [], NULL, [NULL], [4, NULL]]'::INT[][];
CREATE TABLE null_tbl(col1 VARCHAR);
INSERT INTO null_tbl VALUES(NULL), (NULL), ('[NULL]');
SELECT col1::INT[] FROM null_tbl;
SELECT CAST(NULL AS INT[]);
SELECT CAST('[NULL]' AS INT[]);
SELECT CAST('[NULL]' AS INT[][]);
SELECT CAST('[[12,13,14], [8, 9], NULL, [2, 1]]' AS INT[][]);
SELECT CAST('[[12,13,14], [8, 9], [2, NULL, 1]]' AS INT[][]);
SELECT CAST('[ [[12,13,14], NULL], [[4]], NULL, [[2, NULL, 1, 0], [99]] ]' AS INT[][][]);
SELECT TRY_CAST('Hello World' AS INT[]);
CREATE TABLE try_cast_tbl (col1 VARCHAR);
INSERT INTO try_cast_tbl VALUES ('[1,2,X,2]'), ('[hello DuckDB]'), ('[345,oops,44,4.0]'), ('[12345678901]'), ('[5,6,7]'), ('[3 0, 1]');
SELECT TRY_CAST(col1 AS INT[]) FROM try_cast_tbl;
SELECT CAST('{[3]}' AS INT[]);
SELECT CAST('Hello World' AS INT[]);
SELECT CAST('[3]]' AS INT[]);
SELECT CAST('[3],[[]' AS INT[][]);
SELECT CAST('[3], [[1]]' AS INT[][]);
SELECT CAST('[[3 1]]' AS INT[][]);
SELECT CAST('[[3,, 1]]' AS INT[][]);
SELECT CAST('[[3], [[5], [4]]' AS INT[][]);
SELECT CAST('][3]' AS INT[]);
SELECT CAST('[[[[[]][3][[]][][[[][]]]]]' AS INT[][][][]);
SELECT * FROM tbl WHERE cast(col1 as int[]) = [1, 2, 2];
SELECT col1 FROM tbl WHERE LEN(cast(col1 as int[])) < 4;
SELECT cast(col1 as int[]) FROM tbl WHERE LEN(cast(col1 as int[])) < 4;
CREATE TABLE struct_tbl1(col VARCHAR);
INSERT INTO struct_tbl1 VALUES('[{a: "hii"}, {a: "hellooo"}]');
SELECT col::STRUCT(a VARCHAR)[] FROM struct_tbl1;
SELECT CAST('[ [{a:[12,13,14], b:"🦆"}], [{a:[12,13,14], b:"🦆", c:100}] ]' AS STRUCT(a INT[], b VARCHAR, c FLOAT)[][]);
SELECT CAST('[{a:[12,13,14], b:"🦆", c:{a:[[a], [b, c]], b:[123]}}]' AS STRUCT(a INT[], b VARCHAR, c STRUCT(a VARCHAR[][], b INT[]))[]);
SELECT '[{a: hii}, {a: "{" }]'::STRUCT(a VARCHAR)[] FROM struct_tbl1;
CREATE TABLE struct_tbl2(col VARCHAR);
INSERT INTO struct_tbl2 VALUES('[{a: 7, b:"Duck"}, {a: 7000, b: "🦆🦆🦆🦆🦆🦆"}]');
SELECT col::STRUCT(a INT, b VARCHAR)[] FROM struct_tbl2;
CREATE TABLE int_list(col INT[]);
COPY (SELECT [1,2,3]) TO 'duckdb_unittest_tempdir/73788/int_list.csv';
COPY int_list FROM 'duckdb_unittest_tempdir/73788/int_list.csv';
SELECT col FROM int_list;
CREATE TABLE assorted_lists(col1 INT[], col2 VARCHAR[], col3 DATE[]);
COPY (SELECT [8,7,6], '[hello, Duck''DB]', '[2022-12-2, 1929-01-25]') TO 'duckdb_unittest_tempdir/73788/assorted_lists.csv' (Header 0);
COPY assorted_lists FROM 'duckdb_unittest_tempdir/73788/assorted_lists.csv';
SELECT * FROM assorted_lists;
select '[{"bar":"\""}]'::VARCHAR[];
select '[{"bar":"\\""}]'::VARCHAR[];
select '[{"bar":"\\\""}]'::VARCHAR[];
select '[{"bar":"\"\"\\\"\"\"\\"}]'::VARCHAR[];
SELECT '0b'::INT;
SELECT '0b2'::INT;
SELECT '0b10105'::INT;
SELECT '0b-1'::INT;
SELECT '-0b1'::INT;
SELECT '0b1'::INT;
SELECT '0b10'::INT;
SELECT '0b11'::INT;
SELECT '0b0000000'::INT;
SELECT '0b1_0'::INT;
SELECT '0b1_0_0'::INT;
SELECT '0b11110000_11110000'::INT;
SELECT '0b_1'::INT;
SELECT '0b1_'::INT;
SELECT '0b1_0_'::INT;
SELECT '0b_1_0'::INT;
WITH binary_string as (select replace('1', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b1'::INT
FROM binary_string;
WITH binary_string as (select replace('01', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b01'::INT
FROM binary_string;
WITH binary_string as (select replace('00', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b00'::INT
FROM binary_string;
WITH binary_string as (select replace('0_0', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b0_0'::INT
FROM binary_string;
WITH binary_string as (select replace('10', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b10'::INT
FROM binary_string;
WITH binary_string as (select replace('10101', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b10101'::INT
FROM binary_string;
WITH binary_string as (select replace('1001', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b1001'::INT
FROM binary_string;
WITH binary_string as (select replace('0001', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b0001'::INT
FROM binary_string;
WITH binary_string as (select replace('1111', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b1111'::INT
FROM binary_string;
WITH binary_string as (select replace('1111_1111', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b1111_1111'::INT
FROM binary_string;
WITH binary_string as (select replace('01111111111111111111111111111111', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b01111111111111111111111111111111'::INT
FROM binary_string;
WITH binary_string as (select replace('01111111_11111111_11111111_11111111', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0b01111111_11111111_11111111_11111111'::INT
FROM binary_string;
SELECT '0b0000000000000000000000000000000001111111'::TINYINT;
SELECT '0b0000000000000000000000000000000011111111'::UINT8;
SELECT '0b00000000000000000000000000000000111111111'::TINYINT;
SELECT '0b1111111111111111111111111111111'::INT;
SELECT '0b11111111111111111111111111111111'::INT;
SELECT '0b01111111111111111111111111111111'::UINT32;
SELECT '0b11111111111111111111111111111111'::UINT32;
SELECT '0b11111111111111111111111111111111'::BIGINT;
SELECT '0b111111111111111111111111111111111111111111111111111111111111111'::BIGINT;
SELECT '0b1111111111111111111111111111111111111111111111111111111111111111'::BIGINT;
SELECT '0b1111111111111111111111111111111111111111111111111111111111111111'::UINT64;
SELECT '0B'::INT;
SELECT '0B2'::INT;
SELECT '0B10105'::INT;
SELECT '0B-1'::INT;
SELECT '-0B1'::INT;
SELECT '0B1'::INT;
SELECT '0B10'::INT;
SELECT '0B11'::INT;
SELECT '0B0000000'::INT;
SELECT '0B1_0'::INT;
SELECT '0B1_0_0'::INT;
SELECT '0B11110000_11110000'::INT;
SELECT '0B_1'::INT;
SELECT '0B1_'::INT;
SELECT '0B1_0_'::INT;
SELECT '0B_1_0'::INT;
WITH binary_string as (select replace('1', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B1'::INT
FROM binary_string;
WITH binary_string as (select replace('01', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B01'::INT
FROM binary_string;
WITH binary_string as (select replace('00', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B00'::INT
FROM binary_string;
WITH binary_string as (select replace('0_0', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B0_0'::INT
FROM binary_string;
WITH binary_string as (select replace('10', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B10'::INT
FROM binary_string;
WITH binary_string as (select replace('10101', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B10101'::INT
FROM binary_string;
WITH binary_string as (select replace('1001', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B1001'::INT
FROM binary_string;
WITH binary_string as (select replace('0001', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B0001'::INT
FROM binary_string;
WITH binary_string as (select replace('1111', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B1111'::INT
FROM binary_string;
WITH binary_string as (select replace('1111_1111', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B1111_1111'::INT
FROM binary_string;
WITH binary_string as (select replace('01111111111111111111111111111111', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B01111111111111111111111111111111'::INT
FROM binary_string;
WITH binary_string as (select replace('01111111_11111111_11111111_11111111', '_', '') as str)
SELECT 
	list_sum([ (CASE WHEN str[i+1] = '0' THEN 0 ELSE 1 END) * (2 ** (len(str)-(i+1))) for i in range(len(str))])::INT
	==
	'0B01111111_11111111_11111111_11111111'::INT
FROM binary_string;
SELECT '0B0000000000000000000000000000000001111111'::TINYINT;
SELECT '0B0000000000000000000000000000000011111111'::UINT8;
SELECT '0B00000000000000000000000000000000111111111'::TINYINT;
SELECT '0B1111111111111111111111111111111'::INT;
SELECT '0B11111111111111111111111111111111'::INT;
SELECT '0B01111111111111111111111111111111'::UINT32;
SELECT '0B11111111111111111111111111111111'::UINT32;
SELECT '0B11111111111111111111111111111111'::BIGINT;
SELECT '0B111111111111111111111111111111111111111111111111111111111111111'::BIGINT;
SELECT '0B1111111111111111111111111111111111111111111111111111111111111111'::BIGINT;
SELECT '0B1111111111111111111111111111111111111111111111111111111111111111'::UINT64;
PRAGMA enable_verification;
select 1e308::float;
select '1e308'::float;
select '1e310'::double;
select '-1e308'::float;
select '-1e310'::double;
PRAGMA enable_verification;
SELECT CAST(0.55 AS TINYINT) as x;
SELECT CAST(-0.55 AS TINYINT) as x;
SELECT CAST(0.55 AS SMALLINT) as x;
SELECT CAST(-0.55 AS SMALLINT) as x;
SELECT CAST(0.55 AS INTEGER) as x;
SELECT CAST(-0.55 AS INTEGER) as x;
SELECT CAST(0.55 AS BIGINT) as x;
SELECT CAST(-0.55 AS BIGINT) as x;
SELECT CAST(0.55 AS HUGEINT) as x;
SELECT CAST(-0.55 AS HUGEINT) as x;
PRAGMA enable_verification;
SELECT true=1;
SELECT true=0;
SELECT false=0;
SELECT false=1;
SELECT 1=true;
SELECT 0=true;
SELECT 0=false;
SELECT 1=false;
SELECT true='1';
SELECT true='0';
SELECT false='0';
SELECT false='1';
SELECT true='true';
SELECT true='false';
SELECT false='false';
SELECT false='true';
SELECT '1'=true;
SELECT '0'=true;
SELECT '0'=false;
SELECT '1'=false;
SELECT true='true';
SELECT true='false';
SELECT false='false';
SELECT false='true';
SELECT false='unknownbool';
SELECT 'unknownbool'=false;
PRAGMA enable_verification;
SELECT 1::STRUCT(i INTEGER);
SELECT 1000::utinyint;
SELECT 'hello'::int;
SELECT 1000::decimal(2,1);
SELECT 1000.0::decimal(5,1)::decimal(2,1);
SELECT [1000]::utinyint[];
SELECT {'x': 1000}::row(x tinyint);
select 1e308::float;
select 1e308::hugeint;
select 1000000000000000000000000000000::hugeint::int;
select nth_value(42, 'hello') over ();
select '1900'::date;
select 42::utinyint + 'hello';
SELECT bitstring('1', 9)::BOOL;
SELECT [1,2,3]::INT[2];
SELECT '\x'::BYTEA;
CREATE TABLE cast_table(i INTEGER, s VARCHAR, d DECIMAL(5,1), l INT[], int_struct ROW(i INTEGER), dbl DOUBLE, hge HUGEINT, invalid_blob_str VARCHAR);
INSERT INTO cast_table VALUES (1000, 'hello', 1000.0, [1000], {'i': 1000}, 1e308, 1000000000000000000000000000000, '\x');
SELECT i::utinyint from cast_table;
SELECT s::int FROM cast_table;
SELECT i::decimal(2,1) FROM cast_table;
SELECT d::decimal(2,1) FROM cast_table;
SELECT l::utinyint[] FROM cast_table;
SELECT int_struct::row(x tinyint) FROM cast_table;
select dbl::float FROM cast_table;
select dbl::hugeint FROM cast_table;
select hge::hugeint::int FROM cast_table;
SELECT l::INT[3] FROM cast_table;
SELECT invalid_blob_str::BYTEA FROM cast_table;
PRAGMA enable_verification;
create table test as
select '2021-02-04 19:30:00'::timestamp t;
select *
from test
where (t::date) = '2021-02-04'::date;
select *
from test
where (t::date) = '2021-02-04';
WITH t AS (
    SELECT
        '2020-09-13 00:30:00'::TIMESTAMP AS a,
)
SELECT
    a::DATE = '2020-09-13'::DATE,
FROM t;
WITH t AS (
    SELECT
        '2020-09-13 00:30:00'::TIMESTAMP_S AS a,
)
SELECT
    a::DATE = '2020-09-13'::DATE,
FROM t;
WITH t AS (
    SELECT
        '2020-09-13 00:30:00'::TIMESTAMP_MS AS a,
)
SELECT
    a::DATE = '2020-09-13'::DATE,
FROM t;
WITH t AS (
    SELECT
        '2020-09-13 00:30:00'::TIMESTAMP_NS AS a,
)
SELECT
    a::DATE = '2020-09-13'::DATE,
FROM t;
PRAGMA enable_verification;
SELECT '{a=1, b=2, c=3}'::MAP(VARCHAR, INT);
SELECT '{key_A=Duck, key_B="hello world"}'::MAP(VARCHAR, VARCHAR);
SELECT '{1=Duck, 2=hello world, 3=!}'::MAP(INT, VARCHAR);
SELECT '{greetings=[Hello World!, Hello DuckDB, Howdy], farewells=[Bye World, Bye DuckDB]}'::MAP(VARCHAR, VARCHAR[]);
SELECT '{"key=A"=Duck, "key=B"="hello=world"}'::MAP(VARCHAR, VARCHAR);
SELECT '{a=1, b=2, a=3}'::MAP(VARCHAR, INT);
SELECT '{{1=100, 2=200}=value}'::MAP(MAP(INT, INT), VARCHAR);
SELECT '{{1=100, 2=200}={3=c, 5=e, 7=g}}'::MAP(MAP(INT, INT), MAP(INT, VARCHAR));
CREATE TABLE stringMap (col1 VARCHAR);
INSERT INTO stringMap VALUES ('{1=Duck, 2=DB}'), ('{999=🦆}'), ('{7=Hello, 8=World, 2=!}');
SELECT col1::MAP(INT, VARCHAR) FROM stringMap;
SELECT CAST('{''hello''=2, ''world''=50, ''!''=12}' AS MAP(VARCHAR, INT));
SELECT CAST('{''''hello''''=hello, ''''world''''=world, ''''!''''=!}' AS MAP(VARCHAR, VARCHAR));
SELECT CAST('{[[''🦆, 🦆, 🦆'']]=100, [[duck, db, ''🦆'']]=101}' AS MAP(VARCHAR[][], INT));
SELECT CAST('{"can''t"="you''re", "i''m"="q''u''o''t''e"}' AS MAP(VARCHAR, VARCHAR));
SELECT CAST('{"{"="}", "["="]"}' AS MAP(VARCHAR, VARCHAR));
SELECT CAST('{''}''="{", '']''="["}' AS MAP(VARCHAR, VARCHAR));
SELECT ' {greetings    =[    Hello World  !, Hello     DuckDB  , Howdy ]  ,      farewells=  [Bye World, Bye DuckDB  ] }    '::MAP(VARCHAR, VARCHAR[]);
SELECT CAST('{ [12,     13,14]=val, [       8, 9         ]      =val, [ 4    ]=val   }' AS MAP(INT[], VARCHAR));
SELECT CAST('   { { a:[2,    3], b:  Duckster      }=         {50.0        =50}, {a    : [9,1,4], b:Duck          }
                ={  1      =    0}  }' AS MAP(STRUCT(a INT[], b VARCHAR), MAP(INT, DOUBLE)));
CREATE TABLE null_tbl(col1 VARCHAR);
INSERT INTO null_tbl VALUES(NULL), ('{key=NULL}'), ('{zero=0, key=NULL}');
SELECT col1::MAP(VARCHAR, VARCHAR) FROM null_tbl;
SELECT CAST(NULL AS MAP(INT, VARCHAR));
SELECT CAST('{12=34, 56=NULL, 910=1112, 1314=NULL}' AS MAP(INT, INT));
SELECT CAST('{NULL=5}' AS MAP(INT, INT));
SELECT CAST('{}' AS MAP(INT, INT));
SELECT TRY_CAST('Hello World' AS MAP(VARCHAR, VARCHAR));
CREATE TABLE try_cast_tbl (col1 VARCHAR);
INSERT INTO try_cast_tbl VALUES ('{1=2, XXX=2}'), ('{NULL=DuckDB}'), ('{3=oops, 5=5 44=4.0}'), ('{12345678901=0}'), ('{5=6!, 7=7000}'), ('{3 0, 1=1}');
SELECT TRY_CAST(col1 AS MAP(INT, INT)) FROM try_cast_tbl;
SELECT CAST('{3==3}' AS MAP(INT, INT));
SELECT CAST('{[5]=5}' AS MAP(INT, INT));
SELECT CAST('{3=three}}' AS MAP(INT, VARCHAR));
SELECT CAST('{Ducky=, DB=ok}' AS MAP(VARCHAR, INT));
SELECT CAST('{5=5,, 3=3}' AS MAP(INT, INT));
SELECT CAST('{3=3, 4=4' AS MAP(INT, INT));
SELECT CAST('{3=3, 4=4} bla' AS MAP(INT, INT));
SELECT CAST('{                                                                      ' AS MAP(INT, INT));
CREATE TABLE Duck_tbl (col1 VARCHAR);
INSERT INTO Duck_tbl VALUES ('{1=Duck, 3=DB}'), ('{12=DuckDB}'), ('{3=DB, 5=🦆 4=Ducky, 7=Duckster}'), ('{0=DuckParty}'), ('{5=DBDuck, 7=Duckster, 1=🦆}'), ('{1="final Quack"}');
SELECT * FROM Duck_tbl WHERE list_contains(cast(col1 as MAP(INT, VARCHAR))[7], 'Duckster') ;
SELECT col1::MAP(INT, VARCHAR) FROM Duck_tbl WHERE cardinality(cast(col1 as MAP(INT, VARCHAR))) < 3;
SELECT CAST('{A={a:[12,13,14], b:"🦆", c:0.12}, B={a:[12,13,14], b:DuckDuck, c:9.03}}' AS MAP(VARCHAR, STRUCT(a INT[], b VARCHAR, c FLOAT)));
SELECT CAST('{{a:Meow=Meow}={a:12, b:0.8, c:MeowMeow}, {a:Quack}={a:13, b:3.2, c:QuackQuack}}' AS MAP(STRUCT(a VARCHAR), STRUCT(a INT, b DOUBLE, c VARCHAR)));
SELECT CAST('{{A:AAA}={a:[12,13,14], b:"🦆", c:{a:[[a], [b, c]], b:[123]}}}' AS MAP(STRUCT(A VARCHAR), STRUCT(a INT[], b VARCHAR, c STRUCT(a VARCHAR[][], b INT[]))));
SELECT '{[[a, b], [c, d], [e]]= {a:2000}, [[aaa]]={a:100}, [[z],[y], [x]]={}}'::MAP(VARCHAR[][], STRUCT(a INT));
SELECT CAST('{a=True, b=False, z=true, X=FALSE}' AS MAP(VARCHAR, BOOL));
SELECT CAST('{True=[true, FALSE, true], False=[false, false, false]}' AS MAP(BOOL, BOOL[]));
SELECT CAST('{0={a:1, b: 8.3}, 5.7={a:2, b: 3}}' AS MAP(TINYINT, STRUCT(a TINYINT, b TINYINT)));
SELECT CAST('{0={a:1, b: 8.3}, 5.7={a:2, b: 3}}' AS MAP(SMALLINT, STRUCT(a SMALLINT, b SMALLINT)));
SELECT CAST('{0={a:1, b: 8.3}, 5.7={a:2, b: 3}}' AS MAP(INTEGER, STRUCT(a INTEGER, b INTEGER)));
SELECT CAST('{0={a:1, b: 8.3}, 5.7={a:2, b: 3}}' AS MAP(BIGINT, STRUCT(a BIGINT, b BIGINT)));
SELECT CAST('{0={a:1, b: 8.3}, 5.7={a:2, b: 3}}' AS MAP(HUGEINT, STRUCT(a HUGEINT, b HUGEINT)));
SELECT CAST('{0={a:1, b: 8.3}, 5.7={a:2, b: 3}}' AS MAP(UTINYINT, STRUCT(a UTINYINT, b UTINYINT)));
SELECT CAST('{0={a:1, b: 8.3}, 5.7={a:2, b: 3}}' AS MAP(USMALLINT, STRUCT(a USMALLINT, b USMALLINT)));
SELECT CAST('{0={a:1, b: 8.3}, 5.7={a:2, b: 3}}' AS MAP(UINTEGER, STRUCT(a UINTEGER, b UINTEGER)));
SELECT CAST('{0={a:1, b: 8.3}, 5.7={a:2, b: 3}}' AS MAP(UBIGINT, STRUCT(a UBIGINT, b UBIGINT)));
SELECT CAST('{0={a:1, b: 8.3}, 5.7={a:2, b: 3}}' AS MAP(UHUGEINT, STRUCT(a UHUGEINT, b UHUGEINT)));
SELECT CAST('{-9.01=9.13 ,3=0.00002}' AS MAP(DOUBLE, DOUBLE));
SELECT CAST('{-9.01=9.13 ,3=0.00002}' AS MAP(FLOAT, FLOAT));
CREATE TYPE mood AS ENUM('ok', 'sad', 'happy');
SELECT '{🦆=ok, duck=happy}'::MAP(VARCHAR, MOOD);
SELECT '{ok=happy, sad=ok}'::MAP(MOOD, MOOD);
SELECT '{sadDucky: nothappy}'::MAP(VARCHAR, MOOD);
CREATE TABLE intMap AS SELECT map([i], [i+1])::VARCHAR::MAP(INT, INT) col FROM range(0, 10000) tbl(i);
SELECT MAX(CAST(col AS MAP(INT, INT))) FROM intMap;
CREATE TABLE assembled_maps(col1 MAP(INT, VARCHAR));
COPY (SELECT '{8="hello, DuckDB"}') TO 'duckdb_unittest_tempdir/73788/assembled_maps.csv';
COPY assembled_maps FROM 'duckdb_unittest_tempdir/73788/assembled_maps.csv';
SELECT * FROM assembled_maps;
PRAGMA enable_verification;
SELECT CAST('e1' AS INTEGER);
SELECT CAST('  e1' AS INTEGER);
SELECT CAST('  E1' AS INTEGER);
SELECT CAST('e1' AS DOUBLE);
SELECT CAST('  e1' AS DOUBLE);
SELECT CAST('  E1' AS DOUBLE);
SELECT CAST('1e1' AS INTEGER);
SELECT CAST('  1e1' AS INTEGER);
SELECT CAST('1e1' AS DOUBLE);
SELECT CAST('   1e1' AS DOUBLE);
