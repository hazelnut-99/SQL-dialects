PRAGMA enable_verification;
SELECT [1] AS l, list_filter([1], l -> l > 1);
SELECT [1] AS l, list_filter([1], l -> l > 1);
;
SELECT [1] AS l, list_filter([1], l -> l > 1);
SELECT main.list_value(1) AS l, list_filter(main.list_value(1), (l -> (l > 1)));
;
;
;
;
SELECT [1] AS l, list_filter([1], l -> l > 1);
SELECT list_filter(NULL, x -> x > 1);
SELECT list_filter(NULL, x -> x > 1);
;
SELECT list_filter(NULL, x -> x > 1);
SELECT list_filter(NULL, (x -> (x > 1)));
;
;
;
;
SELECT list_filter(NULL, x -> x > 1);
SELECT list_filter([True], x -> x);
SELECT list_filter([True], x -> x);
;
SELECT list_filter([True], x -> x);
SELECT list_filter(main.list_value(CAST('t' AS BOOLEAN)), (x -> x));
;
;
;
;
SELECT list_filter([True], x -> x);
SELECT list_filter(['duck', 'a', 'ö'], duck -> contains(concat(duck, 'DB'), 'duck'));
SELECT list_filter(['duck', 'a', 'ö'], duck -> contains(concat(duck, 'DB'), 'duck'));
;
SELECT list_filter(['duck', 'a', 'ö'], duck -> contains(concat(duck, 'DB'), 'duck'));
SELECT list_filter(main.list_value('duck', 'a', 'ö'), (duck -> contains(concat(duck, 'DB'), 'duck')));
;
;
;
;
SELECT list_filter(['duck', 'a', 'ö'], duck -> contains(concat(duck, 'DB'), 'duck'));
SELECT list_filter([1, 2, 3], x -> x % 2 = 0);
SELECT list_filter([1, 2, 3], x -> x % 2 = 0);
;
SELECT list_filter([1, 2, 3], x -> x % 2 = 0);
SELECT list_filter(main.list_value(1, 2, 3), (x -> ((x % 2) = 0)));
;
;
;
;
SELECT list_filter([1, 2, 3], x -> x % 2 = 0);
SELECT list_filter([], x -> x > 1);
SELECT list_filter([], x -> x > 1);
;
SELECT list_filter([], x -> x > 1);
SELECT list_filter(main.list_value(), (x -> (x > 1)));
;
;
;
;
SELECT list_filter([], x -> x > 1);
SELECT list_filter([1, NULL, -2, NULL], x -> x % 2 != 0);
SELECT list_filter([1, NULL, -2, NULL], x -> x % 2 != 0);
;
SELECT list_filter([1, NULL, -2, NULL], x -> x % 2 != 0);
SELECT list_filter(main.list_value(1, NULL, -2, NULL), (x -> ((x % 2) != 0)));
;
;
;
;
SELECT list_filter([1, NULL, -2, NULL], x -> x % 2 != 0);
SELECT list_filter([5, -6, NULL, 7], x -> x > 0);
SELECT list_filter([5, -6, NULL, 7], x -> x > 0);
;
SELECT list_filter([5, -6, NULL, 7], x -> x > 0);
SELECT list_filter(main.list_value(5, -6, NULL, 7), (x -> (x > 0)));
;
;
;
;
SELECT list_filter([5, -6, NULL, 7], x -> x > 0);
SELECT list_filter([5, NULL, 7, NULL], x -> x IS NOT NULL);
SELECT list_filter([5, NULL, 7, NULL], x -> x IS NOT NULL);
;
SELECT list_filter([5, NULL, 7, NULL], x -> x IS NOT NULL);
SELECT list_filter(main.list_value(5, NULL, 7, NULL), (x -> (x IS NOT NULL)));
;
;
;
;
SELECT list_filter([5, NULL, 7, NULL], x -> x IS NOT NULL);
CREATE TABLE lists (n integer, l integer[]);
INSERT INTO lists VALUES (1, [1]), (2, [1, 2, 3]), (3, NULL), (4, [-1, NULL, 2]);
SELECT list_filter(l, x -> x + 1 <= 2) FROM lists;
SELECT list_filter(l, x -> x + 1 <= 2) FROM lists;
;
SELECT list_filter(l, x -> x + 1 <= 2) FROM lists;
SELECT list_filter(l, (x -> ((x + 1) <= 2))) FROM lists;
;
;
;
;
SELECT list_filter(l, x -> x + 1 <= 2) FROM lists;
SELECT list_filter(l, x -> x <= n) FROM lists;
SELECT list_filter(l, x -> x <= n) FROM lists;
;
SELECT list_filter(l, x -> x <= n) FROM lists;
SELECT list_filter(l, (x -> (x <= n))) FROM lists;
;
;
;
;
SELECT list_filter(l, x -> x <= n) FROM lists;
SELECT list_filter(l, x -> x IS NOT NULL) FROM lists;
SELECT list_filter(l, x -> x IS NOT NULL) FROM lists;
;
SELECT list_filter(l, x -> x IS NOT NULL) FROM lists;
SELECT list_filter(l, (x -> (x IS NOT NULL))) FROM lists;
;
;
;
;
SELECT list_filter(l, x -> x IS NOT NULL) FROM lists;
SELECT list_filter(['x', 'abc', 'z'], x -> contains(x || '0', 'a'));
SELECT list_filter(['x', 'abc', 'z'], x -> contains(x || '0', 'a'));
;
SELECT list_filter(['x', 'abc', 'z'], x -> contains(x || '0', 'a'));
SELECT list_filter(main.list_value('x', 'abc', 'z'), (x -> contains((x || '0'), 'a')));
;
;
;
;
SELECT list_filter(['x', 'abc', 'z'], x -> contains(x || '0', 'a'));
SELECT list_transform([[1, 3], [2, 3, 1], [2, 4, 2]], x -> list_filter(x, y -> y <= 2));
SELECT list_transform([[1, 3], [2, 3, 1], [2, 4, 2]], x -> list_filter(x, y -> y <= 2));
;
SELECT list_transform([[1, 3], [2, 3, 1], [2, 4, 2]], x -> list_filter(x, y -> y <= 2));
SELECT list_transform(main.list_value(main.list_value(1, 3), main.list_value(2, 3, 1), main.list_value(2, 4, 2)), (x -> list_filter(x, (y -> (y <= 2)))));
;
;
;
;
SELECT list_transform([[1, 3], [2, 3, 1], [2, 4, 2]], x -> list_filter(x, y -> y <= 2));
SELECT list_concat(list_filter([42, -42, 8, -5, 2], elem -> elem > 0)::varchar[], list_filter(['enjoy', 'life', 'to', 'the', 'fullest'], str -> str ILIKE '%e%'));
SELECT list_concat(list_filter([42, -42, 8, -5, 2], elem -> elem > 0)::varchar[], list_filter(['enjoy', 'life', 'to', 'the', 'fullest'], str -> str ILIKE '%e%'));
;
SELECT list_concat(list_filter([42, -42, 8, -5, 2], elem -> elem > 0)::varchar[], list_filter(['enjoy', 'life', 'to', 'the', 'fullest'], str -> str ILIKE '%e%'));
SELECT list_concat(CAST(list_filter(main.list_value(42, -42, 8, -5, 2), (elem -> (elem > 0))) AS VARCHAR[]), list_filter(main.list_value('enjoy', 'life', 'to', 'the', 'fullest'), (str -> (str ~~* '%e%'))));
;
;
;
;
SELECT list_concat(list_filter([42, -42, 8, -5, 2], elem -> elem > 0)::varchar[], list_filter(['enjoy', 'life', 'to', 'the', 'fullest'], str -> str ILIKE '%e%'));
SELECT array_filter([1, NULL], arr_elem -> arr_elem < 4);
SELECT array_filter([1, NULL], arr_elem -> arr_elem < 4);
;
SELECT array_filter([1, NULL], arr_elem -> arr_elem < 4);
SELECT array_filter(main.list_value(1, NULL), (arr_elem -> (arr_elem < 4)));
;
;
;
;
SELECT array_filter([1, NULL], arr_elem -> arr_elem < 4);
CREATE TABLE empty_lists (l integer[]);
INSERT INTO empty_lists VALUES ([]), ([]), ([]), ([1, NULL, -1]), ([]), (NULL), (NULL), ([]), ([1, 2, 3]), ([]), ([]), ([]);;
SELECT list_filter(l, x -> x > 0) FROM empty_lists;
SELECT list_filter(l, x -> x > 0) FROM empty_lists;
;
SELECT list_filter(l, x -> x > 0) FROM empty_lists;
SELECT list_filter(l, (x -> (x > 0))) FROM empty_lists;
;
;
;
;
SELECT list_filter(l, x -> x > 0) FROM empty_lists;
CREATE TABLE large_lists AS SELECT range % 4 g, list(range) l FROM range(10000) GROUP BY range % 4;;
SELECT g, list_count(list_filter(l, x -> x % 2 = 0)) FROM large_lists ORDER BY g;
SELECT g, list_count(list_filter(l, x -> x % 2 = 0)) FROM large_lists ORDER BY g;
;
SELECT g, list_count(list_filter(l, x -> x % 2 = 0)) FROM large_lists ORDER BY g;
SELECT g, list_count(list_filter(l, (x -> ((x % 2) = 0)))) FROM large_lists ORDER BY g;
;
;
;
;
SELECT g, list_count(list_filter(l, x -> x % 2 = 0)) FROM large_lists ORDER BY g;
CREATE TABLE corr_test (n integer, l varchar[], g integer);
INSERT INTO corr_test VALUES (1, ['a', '11', '23'], 1), (3, [NULL, '2', 'hello', 'wie gehts'], 1), (NULL, NULL, 1), (0, [], 1);
SELECT n FROM corr_test WHERE list_count(list_filter(l, elem -> length(elem) >= n)) >= n;
SELECT n FROM corr_test WHERE list_count(list_filter(l, elem -> length(elem) >= n)) >= n;
;
SELECT n FROM corr_test WHERE list_count(list_filter(l, elem -> length(elem) >= n)) >= n;
SELECT n FROM corr_test WHERE (list_count(list_filter(l, (elem -> (length(elem) >= n)))) >= n);
;
;
;
;
SELECT n FROM corr_test WHERE list_count(list_filter(l, elem -> length(elem) >= n)) >= n;
SELECT ct.n FROM corr_test ct
WHERE list_count(ct.l) < (SELECT list_count(list_filter(list_concat(list(c.n)::varchar[], ct.l), a -> length(a) >= 1)) FROM corr_test c GROUP BY c.g)
ORDER BY ct.n;
SELECT ct.n FROM corr_test ct
WHERE list_count(ct.l) < (SELECT list_count(list_filter(list_concat(list(c.n)::varchar[], ct.l), a -> length(a) >= 1)) FROM corr_test c GROUP BY c.g)
ORDER BY ct.n;
;
SELECT ct.n FROM corr_test ct
WHERE list_count(ct.l) < (SELECT list_count(list_filter(list_concat(list(c.n)::varchar[], ct.l), a -> length(a) >= 1)) FROM corr_test c GROUP BY c.g)
ORDER BY ct.n;
SELECT ct.n FROM corr_test AS ct WHERE (list_count(ct.l) < (SELECT list_count(list_filter(list_concat(CAST(list(c.n) AS VARCHAR[]), ct.l), (a -> (length(a) >= 1)))) FROM corr_test AS c GROUP BY c.g)) ORDER BY ct.n;
;
;
;
;
SELECT ct.n FROM corr_test ct
WHERE list_count(ct.l) < (SELECT list_count(list_filter(list_concat(list(c.n)::varchar[], ct.l), a -> length(a) >= 1)) FROM corr_test c GROUP BY c.g)
ORDER BY ct.n;
SELECT (SELECT list_filter(l, elem -> length(elem) >= 1)) FROM corr_test;
SELECT (SELECT list_filter(l, elem -> length(elem) >= 1)) FROM corr_test;
;
SELECT (SELECT list_filter(l, elem -> length(elem) >= 1)) FROM corr_test;
SELECT (SELECT list_filter(l, (elem -> (length(elem) >= 1)))) FROM corr_test;
;
;
;
;
SELECT (SELECT list_filter(l, elem -> length(elem) >= 1)) FROM corr_test;
SELECT (SELECT list_filter(l, elem -> length(elem) >= n)) FROM corr_test;
SELECT (SELECT list_filter(l, elem -> length(elem) >= n)) FROM corr_test;
;
SELECT (SELECT list_filter(l, elem -> length(elem) >= n)) FROM corr_test;
SELECT (SELECT list_filter(l, (elem -> (length(elem) >= n)))) FROM corr_test;
;
;
;
;
SELECT (SELECT list_filter(l, elem -> length(elem) >= n)) FROM corr_test;
SELECT (SELECT (SELECT (SELECT list_filter(l, elem -> length(elem) >= 1)))) FROM corr_test;
SELECT (SELECT (SELECT (SELECT list_filter(l, elem -> length(elem) >= 1)))) FROM corr_test;
;
SELECT (SELECT (SELECT (SELECT list_filter(l, elem -> length(elem) >= 1)))) FROM corr_test;
SELECT (SELECT (SELECT (SELECT list_filter(l, (elem -> (length(elem) >= 1)))))) FROM corr_test;
;
;
;
;
SELECT (SELECT (SELECT (SELECT list_filter(l, elem -> length(elem) >= 1)))) FROM corr_test;
SELECT list_filter([1, 2, 3, 4, 5, 6, 7, 8, 9], x -> x > #1) FROM range(10);
SELECT list_filter([1, 2, 3, 4, 5, 6, 7, 8, 9], x -> x > #1) FROM range(10);
;
SELECT list_filter([1, 2, 3, 4, 5, 6, 7, 8, 9], x -> x > #1) FROM range(10);
SELECT list_filter(main.list_value(1, 2, 3, 4, 5, 6, 7, 8, 9), (x -> (x > #1))) FROM range(10);
;
;
;
;
SELECT list_filter([1, 2, 3, 4, 5, 6, 7, 8, 9], x -> x > #1) FROM range(10);
create table lambdas AS SELECT [5,6] AS col1, [4,8] AS col2;;
SELECT list_apply(col1, x -> list_filter(col2, y -> y)) from lambdas;;
SELECT list_apply(col1, x -> list_filter(col2, y -> y)) from lambdas;;
;
SELECT list_apply(col1, x -> list_filter(col2, y -> y)) from lambdas;;
SELECT list_apply(col1, (x -> list_filter(col2, (y -> y)))) FROM lambdas;
;
;
;
;
SELECT list_apply(col1, x -> list_filter(col2, y -> y)) from lambdas;;
SELECT list_apply([5,6], x -> list_filter([4,8], y -> y));;
SELECT list_apply([5,6], x -> list_filter([4,8], y -> y));;
;
SELECT list_apply([5,6], x -> list_filter([4,8], y -> y));;
SELECT list_apply(main.list_value(5, 6), (x -> list_filter(main.list_value(4, 8), (y -> y))));
;
;
;
;
SELECT list_apply([5,6], x -> list_filter([4,8], y -> y));;
SELECT list_apply([[5,6]], x -> list_filter(x, y -> y));;
SELECT list_apply([[5,6]], x -> list_filter(x, y -> y));;
;
SELECT list_apply([[5,6]], x -> list_filter(x, y -> y));;
SELECT list_apply(main.list_value(main.list_value(5, 6)), (x -> list_filter(x, (y -> y))));
;
;
;
;
SELECT list_apply([[5,6]], x -> list_filter(x, y -> y));;
SELECT list_transform([['abc']], x -> list_filter(x, y -> y));;
SELECT list_transform([['abc']], x -> list_filter(x, y -> y));;
;
SELECT list_transform([['abc']], x -> list_filter(x, y -> y));;
SELECT list_transform([['abc']], x -> list_filter(x, y -> y));;
select [[y] for y in range(5)] as c, [x for x in c if x IS NOT NULL];;
select [[y] for y in range(5)] as c, [x for x in c if x IS NOT NULL];;
;
select [[y] for y in range(5)] as c, [x for x in c if x IS NOT NULL];;
SELECT main.list_apply(range(5), (y -> main.list_value(y))) AS c, main.list_apply(main.list_filter(c, (x -> (x IS NOT NULL))), (x -> x));
;
;
;
;
select [[y] for y in range(5)] as c, [x for x in c if x IS NOT NULL];;
