PRAGMA enable_verification;
CREATE TABLE integers (a INT);
INSERT INTO integers VALUES (1);
CREATE MACRO one() AS (SELECT 1);;
SELECT one();
SELECT one();
;
SELECT one();
SELECT one();
;
;
;
;
SELECT one();
SELECT one(1);
SELECT one(1);
;
SELECT one(1);
SELECT one(1);
SELECT one(NULL);
SELECT one(NULL);
;
SELECT one(NULL);
SELECT one(NULL);
DROP MACRO one;;
CREATE MACRO having_macro(x) AS (SELECT * FROM integers GROUP BY a HAVING a = x);
SELECT having_macro(1);
SELECT having_macro(1);
;
SELECT having_macro(1);
SELECT having_macro(1);
;
;
;
;
SELECT having_macro(1);
SELECT having_macro(6);
SELECT having_macro(6);
;
SELECT having_macro(6);
SELECT having_macro(6);
;
;
;
;
SELECT having_macro(6);
CREATE MACRO union_macro(x, y, z) AS (SELECT x IN (SELECT y UNION ALL SELECT z));
SELECT union_macro(1, 2, 3);
SELECT union_macro(1, 2, 3);
;
SELECT union_macro(1, 2, 3);
SELECT union_macro(1, 2, 3);
;
;
;
;
SELECT union_macro(1, 2, 3);
SELECT union_macro(1, 2, 1);
SELECT union_macro(1, 2, 1);
;
SELECT union_macro(1, 2, 1);
SELECT union_macro(1, 2, 1);
;
;
;
;
SELECT union_macro(1, 2, 1);
SELECT union_macro(1, 1, 2);
SELECT union_macro(1, 1, 2);
;
SELECT union_macro(1, 1, 2);
SELECT union_macro(1, 1, 2);
;
;
;
;
SELECT union_macro(1, 1, 2);
CREATE MACRO in_expression_list(x, y, z) AS (SELECT x IN (VALUES (y), (z)));
SELECT in_expression_list(1, 2, 3);
SELECT in_expression_list(1, 2, 3);
;
SELECT in_expression_list(1, 2, 3);
SELECT in_expression_list(1, 2, 3);
;
;
;
;
SELECT in_expression_list(1, 2, 3);
SELECT in_expression_list(1, 2, 1);
SELECT in_expression_list(1, 2, 1);
;
SELECT in_expression_list(1, 2, 1);
SELECT in_expression_list(1, 2, 1);
;
;
;
;
SELECT in_expression_list(1, 2, 1);
SELECT in_expression_list(1, 1, 2);
SELECT in_expression_list(1, 1, 2);
;
SELECT in_expression_list(1, 1, 2);
SELECT in_expression_list(1, 1, 2);
;
;
;
;
SELECT in_expression_list(1, 1, 2);
CREATE FUNCTION two() AS (SELECT 2);;
SELECT two();
SELECT two();
;
SELECT two();
SELECT two();
;
;
;
;
SELECT two();
DROP FUNCTION two;;
CREATE MACRO add_macro(a) AS a + b;
CREATE MACRO add_macro(a, b) AS a + b;
SELECT add_macro(a,a) FROM integers;
SELECT add_macro(a,a) FROM integers;
;
SELECT add_macro(a,a) FROM integers;
SELECT add_macro(a, a) FROM integers;
;
;
;
;
SELECT add_macro(a,a) FROM integers;
CREATE TABLE floats (b FLOAT);
INSERT INTO floats VALUES (0.5);
SELECT add_macro(a,2) + add_macro(3,b) FROM integers, floats;
SELECT add_macro(a,2) + add_macro(3,b) FROM integers, floats;
;
SELECT add_macro(a,2) + add_macro(3,b) FROM integers, floats;
SELECT (add_macro(a, 2) + add_macro(3, b)) FROM integers , floats;
;
;
;
;
SELECT add_macro(a,2) + add_macro(3,b) FROM integers, floats;
CREATE MACRO string_split(a,b) AS a + b;
SELECT string_split(1, 2);
SELECT string_split(1, 2);
;
SELECT string_split(1, 2);
SELECT string_split(1, 2);
;
;
;
;
SELECT string_split(1, 2);
CREATE MACRO IFELSE(a,b,c) AS CASE WHEN a THEN b ELSE c END;
SELECT IFELSE(1,'true','false');
SELECT IFELSE(1,'true','false');
;
SELECT IFELSE(1,'true','false');
SELECT ifelse(1, 'true', 'false');
;
;
;
;
SELECT IFELSE(1,'true','false');
SELECT ifelse(1,'true','false');
SELECT ifelse(1,'true','false');
;
SELECT ifelse(1,'true','false');
SELECT ifelse(1, 'true', 'false');
;
;
;
;
SELECT ifelse(1,'true','false');
SELECT IFELSE(0,'true','false');
SELECT IFELSE(0,'true','false');
;
SELECT IFELSE(0,'true','false');
SELECT ifelse(0, 'true', 'false');
;
;
;
;
SELECT IFELSE(0,'true','false');
SELECT IFELSE(a = 1, 'true', 'false') FROM integers;
SELECT IFELSE(a = 1, 'true', 'false') FROM integers;
;
SELECT IFELSE(a = 1, 'true', 'false') FROM integers;
SELECT ifelse((a = 1), 'true', 'false') FROM integers;
;
;
;
;
SELECT IFELSE(a = 1, 'true', 'false') FROM integers;
SELECT IFELSE(a = 0, 'true', 'false') FROM integers;
SELECT IFELSE(a = 0, 'true', 'false') FROM integers;
;
SELECT IFELSE(a = 0, 'true', 'false') FROM integers;
SELECT ifelse((a = 0), 'true', 'false') FROM integers;
;
;
;
;
SELECT IFELSE(a = 0, 'true', 'false') FROM integers;
SELECT IFELSE();;
SELECT IFELSE();;
;
SELECT IFELSE();;
SELECT IFELSE();;
SELECT IFELSE(1);;
SELECT IFELSE(1);;
;
SELECT IFELSE(1);;
SELECT IFELSE(1);;
SELECT IFELSE(1, 2);;
SELECT IFELSE(1, 2);;
;
SELECT IFELSE(1, 2);;
SELECT IFELSE(1, 2);;
SELECT IFELSE(1, 2, 3, 4);;
SELECT IFELSE(1, 2, 3, 4);;
;
SELECT IFELSE(1, 2, 3, 4);;
SELECT IFELSE(1, 2, 3, 4);;
CREATE MACRO IFELSE(a,b) AS a+b;
CREATE MACRO ifelse(a,b) AS a+b;
SELECT IFELSE('1', 'random', RANDOM()::VARCHAR);
SELECT IFELSE('1', 'random', RANDOM()::VARCHAR);
;
SELECT IFELSE('1', 'random', RANDOM()::VARCHAR);
SELECT ifelse('1', 'random', CAST(random() AS VARCHAR));
;
;
;
;
SELECT IFELSE('1', 'random', RANDOM()::VARCHAR);
CREATE SCHEMA macros;
CREATE MACRO macros.add_macro(a, b) AS a + b;
SELECT macros.add_macro(40,2);
SELECT macros.add_macro(40,2);
;
SELECT macros.add_macro(40,2);
SELECT macros.add_macro(40, 2);
;
;
;
;
SELECT macros.add_macro(40,2);
CREATE MACRO conflict(i, i) AS i + 1;
CREATE MACRO myavg(x) AS SUM(x) / COUNT(x);
INSERT INTO integers VALUES (21), (41);;
SELECT myavg(a) FROM integers;
SELECT myavg(a) FROM integers;
;
SELECT myavg(a) FROM integers;
SELECT myavg(a) FROM integers;
;
;
;
;
SELECT myavg(a) FROM integers;
CREATE MACRO weird_avg(x) AS (MIN(x) + MAX(x)) / COUNT(x);
SELECT weird_avg(a) FROM integers;
SELECT weird_avg(a) FROM integers;
;
SELECT weird_avg(a) FROM integers;
SELECT weird_avg(a) FROM integers;
;
;
;
;
SELECT weird_avg(a) FROM integers;
CREATE MACRO star() AS *;
CREATE MACRO conflict(a, a := 1) AS a + a;
CREATE MACRO add_default5(a, b := 5) AS a + b;
SELECT add_default5(3, 6);
SELECT add_default5(3, 6);
;
SELECT add_default5(3, 6);
SELECT add_default5(3, 6);
SELECT add_default5(3);
SELECT add_default5(3);
;
SELECT add_default5(3);
SELECT add_default5(3);
;
;
;
;
SELECT add_default5(3);
SELECT add_default5(3, b := 6);
SELECT add_default5(3, b := 6);
;
SELECT add_default5(3, b := 6);
SELECT add_default5(3, b := 6);
;
;
;
;
SELECT add_default5(3, b := 6);
SELECT add_default5(b := 6, 3);
SELECT add_default5(b := 6, 3);
;
SELECT add_default5(b := 6, 3);
SELECT add_default5(b := 6, 3);
CREATE MACRO select_plus_floats(a, f := b) AS (SELECT a + f FROM floats);
CREATE MACRO two_default_params(a := 4, b := 2) AS a + b;
SELECT two_default_params();
SELECT two_default_params();
;
SELECT two_default_params();
SELECT two_default_params();
;
;
;
;
SELECT two_default_params();
SELECT two_default_params(a := 5);
SELECT two_default_params(a := 5);
;
SELECT two_default_params(a := 5);
SELECT two_default_params(a := 5);
;
;
;
;
SELECT two_default_params(a := 5);
SELECT two_default_params(b := 3);
SELECT two_default_params(b := 3);
;
SELECT two_default_params(b := 3);
SELECT two_default_params(b := 3);
;
;
;
;
SELECT two_default_params(b := 3);
SELECT two_default_params(a := 5, a := 3);
SELECT two_default_params(a := 5, a := 3);
;
SELECT two_default_params(a := 5, a := 3);
SELECT two_default_params(a := 5, a := 3);
SELECT two_default_params(b := 5, b := 3);
SELECT two_default_params(b := 5, b := 3);
;
SELECT two_default_params(b := 5, b := 3);
SELECT two_default_params(b := 5, b := 3);
CREATE MACRO macros.add_macro(a, b) AS a + b;
CREATE MACRO my_macro(a.b) AS 42;;
CREATE MACRO my_macro(a.b.c) AS 42;;
CREATE MACRO my_macro(a) AS 42;;
SELECT my_macro(x := 42);;
SELECT my_macro(x := 42);;
;
SELECT my_macro(x := 42);;
SELECT my_macro(x := 42);;
SELECT my_macro(a := 42, a := 42);;
SELECT my_macro(a := 42, a := 42);;
;
SELECT my_macro(a := 42, a := 42);;
SELECT my_macro(a := 42, a := 42);;
create macro zz1(x) as (select 10+x);;
create macro zz2(x) as 20+x;;
select zz1(1),zz2(2);;
select zz1(1),zz2(2);;
;
select zz1(1),zz2(2);;
SELECT zz1(1), zz2(2);
;
;
;
;
select zz1(1),zz2(2);;
select function_name, parameters, macro_definition
from duckdb_functions()
where function_name like 'zz%'
and macro_definition like '%macro_parameters%';;
select function_name, parameters, macro_definition
from duckdb_functions()
where function_name like 'zz%'
and macro_definition like '%macro_parameters%';;
;
select function_name, parameters, macro_definition
from duckdb_functions()
where function_name like 'zz%'
and macro_definition like '%macro_parameters%';;
SELECT function_name, parameters, macro_definition FROM duckdb_functions() WHERE ((function_name ~~ 'zz%') AND (macro_definition ~~ '%macro_parameters%'));
;
;
;
;
select function_name, parameters, macro_definition
from duckdb_functions()
where function_name like 'zz%'
and macro_definition like '%macro_parameters%';;
