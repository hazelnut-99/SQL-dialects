PRAGMA enable_verification;
SELECT list_transform([10], x -> sum(1) + x);
SELECT list_transform([10], x -> sum(1) + x);
;
SELECT list_transform([10], x -> sum(1) + x);
SELECT list_transform(main.list_value(10), (x -> (sum(1) + x)));
;
;
;
;
SELECT list_transform([10], x -> sum(1) + x);
SELECT list_filter([10], x -> sum(1) > 0);
SELECT list_filter([10], x -> sum(1) > 0);
;
SELECT list_filter([10], x -> sum(1) > 0);
SELECT list_filter(main.list_value(10), (x -> (sum(1) > 0)));
;
;
;
;
SELECT list_filter([10], x -> sum(1) > 0);
SELECT list_transform([NULL, DATE '1992-09-20', DATE '2021-09-20'], elem -> extract('year' FROM elem) BETWEEN 2000 AND 2022);
SELECT list_transform([NULL, DATE '1992-09-20', DATE '2021-09-20'], elem -> extract('year' FROM elem) BETWEEN 2000 AND 2022);
;
SELECT list_transform([NULL, DATE '1992-09-20', DATE '2021-09-20'], elem -> extract('year' FROM elem) BETWEEN 2000 AND 2022);
SELECT list_transform(main.list_value(NULL, CAST('1992-09-20' AS DATE), CAST('2021-09-20' AS DATE)), (elem -> (main.date_part('year', elem) BETWEEN 2000 AND 2022)));
;
;
;
;
SELECT list_transform([NULL, DATE '1992-09-20', DATE '2021-09-20'], elem -> extract('year' FROM elem) BETWEEN 2000 AND 2022);
SELECT list_filter([NULL, DATE '1992-09-20', DATE '2021-09-20'], elem -> extract('year' FROM elem) BETWEEN 2000 AND 2022);
SELECT list_filter([NULL, DATE '1992-09-20', DATE '2021-09-20'], elem -> extract('year' FROM elem) BETWEEN 2000 AND 2022);
;
SELECT list_filter([NULL, DATE '1992-09-20', DATE '2021-09-20'], elem -> extract('year' FROM elem) BETWEEN 2000 AND 2022);
SELECT list_filter(main.list_value(NULL, CAST('1992-09-20' AS DATE), CAST('2021-09-20' AS DATE)), (elem -> (main.date_part('year', elem) BETWEEN 2000 AND 2022)));
;
;
;
;
SELECT list_filter([NULL, DATE '1992-09-20', DATE '2021-09-20'], elem -> extract('year' FROM elem) BETWEEN 2000 AND 2022);
SELECT list_transform(['hello', 'duck', 'sunshine'], str -> CASE WHEN str LIKE '%e%' THEN 'e' ELSE 'other' END);
SELECT list_transform(['hello', 'duck', 'sunshine'], str -> CASE WHEN str LIKE '%e%' THEN 'e' ELSE 'other' END);
;
SELECT list_transform(['hello', 'duck', 'sunshine'], str -> CASE WHEN str LIKE '%e%' THEN 'e' ELSE 'other' END);
SELECT list_transform(main.list_value('hello', 'duck', 'sunshine'), (str -> CASE  WHEN ((str ~~ '%e%')) THEN ('e') ELSE 'other' END));
;
;
;
;
SELECT list_transform(['hello', 'duck', 'sunshine'], str -> CASE WHEN str LIKE '%e%' THEN 'e' ELSE 'other' END);
SELECT list_filter(['hello', 'duck', 'sunshine'], str -> (CASE WHEN str LIKE '%e%' THEN 'e' ELSE 'other' END) LIKE 'e');
SELECT list_filter(['hello', 'duck', 'sunshine'], str -> (CASE WHEN str LIKE '%e%' THEN 'e' ELSE 'other' END) LIKE 'e');
;
SELECT list_filter(['hello', 'duck', 'sunshine'], str -> (CASE WHEN str LIKE '%e%' THEN 'e' ELSE 'other' END) LIKE 'e');
SELECT list_filter(main.list_value('hello', 'duck', 'sunshine'), (str -> (CASE  WHEN ((str ~~ '%e%')) THEN ('e') ELSE 'other' END ~~ 'e')));
;
;
;
;
SELECT list_filter(['hello', 'duck', 'sunshine'], str -> (CASE WHEN str LIKE '%e%' THEN 'e' ELSE 'other' END) LIKE 'e');
SELECT list_transform([2.0::DOUBLE], x -> x::INTEGER);
SELECT list_transform([2.0::DOUBLE], x -> x::INTEGER);
;
SELECT list_transform([2.0::DOUBLE], x -> x::INTEGER);
SELECT list_transform(main.list_value(CAST(2.0 AS DOUBLE)), (x -> CAST(x AS INTEGER)));
;
;
;
;
SELECT list_transform([2.0::DOUBLE], x -> x::INTEGER);
SELECT list_filter([2], x -> x::DOUBLE == 2);
SELECT list_filter([2], x -> x::DOUBLE == 2);
;
SELECT list_filter([2], x -> x::DOUBLE == 2);
SELECT list_filter(main.list_value(2), (x -> (CAST(x AS DOUBLE) = 2)));
;
;
;
;
SELECT list_filter([2], x -> x::DOUBLE == 2);
SELECT list_transform([2.4, NULL, -4.7], x -> x != 10.4);
SELECT list_transform([2.4, NULL, -4.7], x -> x != 10.4);
;
SELECT list_transform([2.4, NULL, -4.7], x -> x != 10.4);
SELECT list_transform(main.list_value(2.4, NULL, -4.7), (x -> (x != 10.4)));
;
;
;
;
SELECT list_transform([2.4, NULL, -4.7], x -> x != 10.4);
SELECT list_filter([2.4, NULL, -4.7], x -> x != -4.7);
SELECT list_filter([2.4, NULL, -4.7], x -> x != -4.7);
;
SELECT list_filter([2.4, NULL, -4.7], x -> x != -4.7);
SELECT list_filter(main.list_value(2.4, NULL, -4.7), (x -> (x != -4.7)));
;
;
;
;
SELECT list_filter([2.4, NULL, -4.7], x -> x != -4.7);
SELECT list_transform([True, False, NULL], x -> x AND true);
SELECT list_transform([True, False, NULL], x -> x AND true);
;
SELECT list_transform([True, False, NULL], x -> x AND true);
SELECT list_transform(main.list_value(CAST('t' AS BOOLEAN), CAST('f' AS BOOLEAN), NULL), (x -> (x AND CAST('t' AS BOOLEAN))));
;
;
;
;
SELECT list_transform([True, False, NULL], x -> x AND true);
SELECT list_filter([True, False, NULL], x -> x AND true);
SELECT list_filter([True, False, NULL], x -> x AND true);
;
SELECT list_filter([True, False, NULL], x -> x AND true);
SELECT list_filter(main.list_value(CAST('t' AS BOOLEAN), CAST('f' AS BOOLEAN), NULL), (x -> (x AND CAST('t' AS BOOLEAN))));
;
;
;
;
SELECT list_filter([True, False, NULL], x -> x AND true);
SELECT list_transform([TIMESTAMP '1992-03-22', TIMESTAMP '209-03-22', TIMESTAMP '1700-03-22'], x -> century(x));
SELECT list_transform([TIMESTAMP '1992-03-22', TIMESTAMP '209-03-22', TIMESTAMP '1700-03-22'], x -> century(x));
;
SELECT list_transform([TIMESTAMP '1992-03-22', TIMESTAMP '209-03-22', TIMESTAMP '1700-03-22'], x -> century(x));
SELECT list_transform(main.list_value(CAST('1992-03-22' AS TIMESTAMP), CAST('209-03-22' AS TIMESTAMP), CAST('1700-03-22' AS TIMESTAMP)), (x -> century(x)));
;
;
;
;
SELECT list_transform([TIMESTAMP '1992-03-22', TIMESTAMP '209-03-22', TIMESTAMP '1700-03-22'], x -> century(x));
SELECT list_filter([TIMESTAMP '1992-03-22', TIMESTAMP '209-03-22', TIMESTAMP '1700-03-22'], x -> century(x) > 16);
SELECT list_filter([TIMESTAMP '1992-03-22', TIMESTAMP '209-03-22', TIMESTAMP '1700-03-22'], x -> century(x) > 16);
;
SELECT list_filter([TIMESTAMP '1992-03-22', TIMESTAMP '209-03-22', TIMESTAMP '1700-03-22'], x -> century(x) > 16);
SELECT list_filter(main.list_value(CAST('1992-03-22' AS TIMESTAMP), CAST('209-03-22' AS TIMESTAMP), CAST('1700-03-22' AS TIMESTAMP)), (x -> (century(x) > 16)));
;
;
;
;
SELECT list_filter([TIMESTAMP '1992-03-22', TIMESTAMP '209-03-22', TIMESTAMP '1700-03-22'], x -> century(x) > 16);
SELECT list_transform([2], x -> x + x);
SELECT list_transform([2], x -> x + x);
;
SELECT list_transform([2], x -> x + x);
SELECT list_transform(main.list_value(2), (x -> (x + x)));
;
;
;
;
SELECT list_transform([2], x -> x + x);
SELECT list_filter([2], x -> x + x = 4);
SELECT list_filter([2], x -> x + x = 4);
;
SELECT list_filter([2], x -> x + x = 4);
SELECT list_filter(main.list_value(2), (x -> ((x + x) = 4)));
;
;
;
;
SELECT list_filter([2], x -> x + x = 4);
SELECT list_transform([2], x -> (SELECT 1 - x) * x);
SELECT list_transform([2], x -> (SELECT 1 - x) * x);
;
SELECT list_transform([2], x -> (SELECT 1 - x) * x);
SELECT list_transform([2], x -> (SELECT 1 - x) * x);
SELECT list_filter([2], x -> (SELECT 1 - x) * x > 2);
SELECT list_filter([2], x -> (SELECT 1 - x) * x > 2);
;
SELECT list_filter([2], x -> (SELECT 1 - x) * x > 2);
SELECT list_filter([2], x -> (SELECT 1 - x) * x > 2);
CREATE MACRO list_contains_macro(x, y) AS (SELECT list_contains(x, y));
SELECT list_filter([[1, 2, 1], [1, 2, 3], [1, 1, 1]], x -> list_contains_macro(x, 3));
SELECT list_filter([[1, 2, 1], [1, 2, 3], [1, 1, 1]], x -> list_contains_macro(x, 3));
;
SELECT list_filter([[1, 2, 1], [1, 2, 3], [1, 1, 1]], x -> list_contains_macro(x, 3));
SELECT list_filter([[1, 2, 1], [1, 2, 3], [1, 1, 1]], x -> list_contains_macro(x, 3));
SELECT list_transform([1], x -> x = UNNEST([1]));;
SELECT list_transform([1], x -> x = UNNEST([1]));;
;
SELECT list_transform([1], x -> x = UNNEST([1]));;
SELECT list_transform(main.list_value(1), (x -> (x = unnest(main.list_value(1)))));
;
;
;
;
SELECT list_transform([1], x -> x = UNNEST([1]));;
SELECT list_filter([1], x -> x = UNNEST([1]));;
SELECT list_filter([1], x -> x = UNNEST([1]));;
;
SELECT list_filter([1], x -> x = UNNEST([1]));;
SELECT list_filter(main.list_value(1), (x -> (x = unnest(main.list_value(1)))));
;
;
;
;
SELECT list_filter([1], x -> x = UNNEST([1]));;
CREATE TABLE my_window (l integer[], g integer, o integer);
INSERT INTO my_window VALUES ([1], 1, 1), ([1, NULL, 2], 1, 2), ([], 2, 3), (NULL, NULL, NULL), ([1, 2], 2, 4);
SELECT list(list_transform(l, e -> e + 1)) OVER (PARTITION BY g ORDER BY o) 
FROM my_window
ORDER BY ALL;
SELECT list(list_transform(l, e -> e + 1)) OVER (PARTITION BY g ORDER BY o) 
FROM my_window
ORDER BY ALL;
;
SELECT list(list_transform(l, e -> e + 1)) OVER (PARTITION BY g ORDER BY o) 
FROM my_window
ORDER BY ALL;
SELECT list(list_transform(l, (e -> (e + 1)))) OVER (PARTITION BY g ORDER BY o) FROM my_window ORDER BY COLUMNS(*);
;
;
;
;
SELECT list(list_transform(l, e -> e + 1)) OVER (PARTITION BY g ORDER BY o) 
FROM my_window
ORDER BY ALL;
