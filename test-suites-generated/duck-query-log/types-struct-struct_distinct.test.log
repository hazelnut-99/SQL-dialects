PRAGMA enable_verification;
SELECT {'x': 1::tinyint} IS NOT DISTINCT FROM {'x': 2::tinyint};
SELECT {'x': 1::tinyint} IS NOT DISTINCT FROM {'x': 2::tinyint};
;
SELECT {'x': 1::tinyint} IS NOT DISTINCT FROM {'x': 2::tinyint};
SELECT (main.struct_pack(x := CAST(1 AS TINYINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS TINYINT)));
;
;
;
;
SELECT {'x': 1::tinyint} IS NOT DISTINCT FROM {'x': 2::tinyint};
SELECT {'x': 1::tinyint} IS NOT DISTINCT FROM {'x': 1::tinyint};
SELECT {'x': 1::tinyint} IS NOT DISTINCT FROM {'x': 1::tinyint};
;
SELECT {'x': 1::tinyint} IS NOT DISTINCT FROM {'x': 1::tinyint};
SELECT (main.struct_pack(x := CAST(1 AS TINYINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS TINYINT)));
;
;
;
;
SELECT {'x': 1::tinyint} IS NOT DISTINCT FROM {'x': 1::tinyint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::tinyint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::tinyint};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::tinyint};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS TINYINT)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::tinyint};
SELECT {'x': 1::tinyint} IS DISTINCT FROM {'x': 2::tinyint};
SELECT {'x': 1::tinyint} IS DISTINCT FROM {'x': 2::tinyint};
;
SELECT {'x': 1::tinyint} IS DISTINCT FROM {'x': 2::tinyint};
SELECT (main.struct_pack(x := CAST(1 AS TINYINT)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS TINYINT)));
;
;
;
;
SELECT {'x': 1::tinyint} IS DISTINCT FROM {'x': 2::tinyint};
SELECT {'x': 1::tinyint} IS DISTINCT FROM {'x': 1::tinyint};
SELECT {'x': 1::tinyint} IS DISTINCT FROM {'x': 1::tinyint};
;
SELECT {'x': 1::tinyint} IS DISTINCT FROM {'x': 1::tinyint};
SELECT (main.struct_pack(x := CAST(1 AS TINYINT)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS TINYINT)));
;
;
;
;
SELECT {'x': 1::tinyint} IS DISTINCT FROM {'x': 1::tinyint};
SELECT {'x': 1::tinyint} IS DISTINCT FROM NULL;
SELECT {'x': 1::tinyint} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::tinyint} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS TINYINT)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::tinyint} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::tinyint}, {'x': 1::tinyint}),
	({'x': 1::tinyint}, {'x': 2::tinyint}),
	({'x': 2::tinyint}, {'x': 1::tinyint}),
	(NULL, {'x': 1::tinyint}),
	({'x': 2::tinyint}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 1::smallint} IS NOT DISTINCT FROM {'x': 2::smallint};
SELECT {'x': 1::smallint} IS NOT DISTINCT FROM {'x': 2::smallint};
;
SELECT {'x': 1::smallint} IS NOT DISTINCT FROM {'x': 2::smallint};
SELECT (main.struct_pack(x := CAST(1 AS SMALLINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS SMALLINT)));
;
;
;
;
SELECT {'x': 1::smallint} IS NOT DISTINCT FROM {'x': 2::smallint};
SELECT {'x': 1::smallint} IS NOT DISTINCT FROM {'x': 1::smallint};
SELECT {'x': 1::smallint} IS NOT DISTINCT FROM {'x': 1::smallint};
;
SELECT {'x': 1::smallint} IS NOT DISTINCT FROM {'x': 1::smallint};
SELECT (main.struct_pack(x := CAST(1 AS SMALLINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS SMALLINT)));
;
;
;
;
SELECT {'x': 1::smallint} IS NOT DISTINCT FROM {'x': 1::smallint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::smallint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::smallint};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::smallint};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS SMALLINT)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::smallint};
SELECT {'x': 1::smallint} IS DISTINCT FROM {'x': 2::smallint};
SELECT {'x': 1::smallint} IS DISTINCT FROM {'x': 2::smallint};
;
SELECT {'x': 1::smallint} IS DISTINCT FROM {'x': 2::smallint};
SELECT (main.struct_pack(x := CAST(1 AS SMALLINT)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS SMALLINT)));
;
;
;
;
SELECT {'x': 1::smallint} IS DISTINCT FROM {'x': 2::smallint};
SELECT {'x': 1::smallint} IS DISTINCT FROM {'x': 1::smallint};
SELECT {'x': 1::smallint} IS DISTINCT FROM {'x': 1::smallint};
;
SELECT {'x': 1::smallint} IS DISTINCT FROM {'x': 1::smallint};
SELECT (main.struct_pack(x := CAST(1 AS SMALLINT)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS SMALLINT)));
;
;
;
;
SELECT {'x': 1::smallint} IS DISTINCT FROM {'x': 1::smallint};
SELECT {'x': 1::smallint} IS DISTINCT FROM NULL;
SELECT {'x': 1::smallint} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::smallint} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS SMALLINT)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::smallint} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::smallint}, {'x': 1::smallint}),
	({'x': 1::smallint}, {'x': 2::smallint}),
	({'x': 2::smallint}, {'x': 1::smallint}),
	(NULL, {'x': 1::smallint}),
	({'x': 2::smallint}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 1::integer} IS NOT DISTINCT FROM {'x': 2::integer};
SELECT {'x': 1::integer} IS NOT DISTINCT FROM {'x': 2::integer};
;
SELECT {'x': 1::integer} IS NOT DISTINCT FROM {'x': 2::integer};
SELECT (main.struct_pack(x := CAST(1 AS INTEGER)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS INTEGER)));
;
;
;
;
SELECT {'x': 1::integer} IS NOT DISTINCT FROM {'x': 2::integer};
SELECT {'x': 1::integer} IS NOT DISTINCT FROM {'x': 1::integer};
SELECT {'x': 1::integer} IS NOT DISTINCT FROM {'x': 1::integer};
;
SELECT {'x': 1::integer} IS NOT DISTINCT FROM {'x': 1::integer};
SELECT (main.struct_pack(x := CAST(1 AS INTEGER)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS INTEGER)));
;
;
;
;
SELECT {'x': 1::integer} IS NOT DISTINCT FROM {'x': 1::integer};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::integer};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::integer};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::integer};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS INTEGER)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::integer};
SELECT {'x': 1::integer} IS DISTINCT FROM {'x': 2::integer};
SELECT {'x': 1::integer} IS DISTINCT FROM {'x': 2::integer};
;
SELECT {'x': 1::integer} IS DISTINCT FROM {'x': 2::integer};
SELECT (main.struct_pack(x := CAST(1 AS INTEGER)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS INTEGER)));
;
;
;
;
SELECT {'x': 1::integer} IS DISTINCT FROM {'x': 2::integer};
SELECT {'x': 1::integer} IS DISTINCT FROM {'x': 1::integer};
SELECT {'x': 1::integer} IS DISTINCT FROM {'x': 1::integer};
;
SELECT {'x': 1::integer} IS DISTINCT FROM {'x': 1::integer};
SELECT (main.struct_pack(x := CAST(1 AS INTEGER)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS INTEGER)));
;
;
;
;
SELECT {'x': 1::integer} IS DISTINCT FROM {'x': 1::integer};
SELECT {'x': 1::integer} IS DISTINCT FROM NULL;
SELECT {'x': 1::integer} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::integer} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS INTEGER)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::integer} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::integer}, {'x': 1::integer}),
	({'x': 1::integer}, {'x': 2::integer}),
	({'x': 2::integer}, {'x': 1::integer}),
	(NULL, {'x': 1::integer}),
	({'x': 2::integer}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 1::bigint} IS NOT DISTINCT FROM {'x': 2::bigint};
SELECT {'x': 1::bigint} IS NOT DISTINCT FROM {'x': 2::bigint};
;
SELECT {'x': 1::bigint} IS NOT DISTINCT FROM {'x': 2::bigint};
SELECT (main.struct_pack(x := CAST(1 AS BIGINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS BIGINT)));
;
;
;
;
SELECT {'x': 1::bigint} IS NOT DISTINCT FROM {'x': 2::bigint};
SELECT {'x': 1::bigint} IS NOT DISTINCT FROM {'x': 1::bigint};
SELECT {'x': 1::bigint} IS NOT DISTINCT FROM {'x': 1::bigint};
;
SELECT {'x': 1::bigint} IS NOT DISTINCT FROM {'x': 1::bigint};
SELECT (main.struct_pack(x := CAST(1 AS BIGINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS BIGINT)));
;
;
;
;
SELECT {'x': 1::bigint} IS NOT DISTINCT FROM {'x': 1::bigint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::bigint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::bigint};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::bigint};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS BIGINT)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::bigint};
SELECT {'x': 1::bigint} IS DISTINCT FROM {'x': 2::bigint};
SELECT {'x': 1::bigint} IS DISTINCT FROM {'x': 2::bigint};
;
SELECT {'x': 1::bigint} IS DISTINCT FROM {'x': 2::bigint};
SELECT (main.struct_pack(x := CAST(1 AS BIGINT)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS BIGINT)));
;
;
;
;
SELECT {'x': 1::bigint} IS DISTINCT FROM {'x': 2::bigint};
SELECT {'x': 1::bigint} IS DISTINCT FROM {'x': 1::bigint};
SELECT {'x': 1::bigint} IS DISTINCT FROM {'x': 1::bigint};
;
SELECT {'x': 1::bigint} IS DISTINCT FROM {'x': 1::bigint};
SELECT (main.struct_pack(x := CAST(1 AS BIGINT)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS BIGINT)));
;
;
;
;
SELECT {'x': 1::bigint} IS DISTINCT FROM {'x': 1::bigint};
SELECT {'x': 1::bigint} IS DISTINCT FROM NULL;
SELECT {'x': 1::bigint} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::bigint} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS BIGINT)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::bigint} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::bigint}, {'x': 1::bigint}),
	({'x': 1::bigint}, {'x': 2::bigint}),
	({'x': 2::bigint}, {'x': 1::bigint}),
	(NULL, {'x': 1::bigint}),
	({'x': 2::bigint}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 1::hugeint} IS NOT DISTINCT FROM {'x': 2::hugeint};
SELECT {'x': 1::hugeint} IS NOT DISTINCT FROM {'x': 2::hugeint};
;
SELECT {'x': 1::hugeint} IS NOT DISTINCT FROM {'x': 2::hugeint};
SELECT (main.struct_pack(x := CAST(1 AS HUGEINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS HUGEINT)));
;
;
;
;
SELECT {'x': 1::hugeint} IS NOT DISTINCT FROM {'x': 2::hugeint};
SELECT {'x': 1::hugeint} IS NOT DISTINCT FROM {'x': 1::hugeint};
SELECT {'x': 1::hugeint} IS NOT DISTINCT FROM {'x': 1::hugeint};
;
SELECT {'x': 1::hugeint} IS NOT DISTINCT FROM {'x': 1::hugeint};
SELECT (main.struct_pack(x := CAST(1 AS HUGEINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS HUGEINT)));
;
;
;
;
SELECT {'x': 1::hugeint} IS NOT DISTINCT FROM {'x': 1::hugeint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::hugeint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::hugeint};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::hugeint};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS HUGEINT)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::hugeint};
SELECT {'x': 1::hugeint} IS DISTINCT FROM {'x': 2::hugeint};
SELECT {'x': 1::hugeint} IS DISTINCT FROM {'x': 2::hugeint};
;
SELECT {'x': 1::hugeint} IS DISTINCT FROM {'x': 2::hugeint};
SELECT (main.struct_pack(x := CAST(1 AS HUGEINT)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS HUGEINT)));
;
;
;
;
SELECT {'x': 1::hugeint} IS DISTINCT FROM {'x': 2::hugeint};
SELECT {'x': 1::hugeint} IS DISTINCT FROM {'x': 1::hugeint};
SELECT {'x': 1::hugeint} IS DISTINCT FROM {'x': 1::hugeint};
;
SELECT {'x': 1::hugeint} IS DISTINCT FROM {'x': 1::hugeint};
SELECT (main.struct_pack(x := CAST(1 AS HUGEINT)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS HUGEINT)));
;
;
;
;
SELECT {'x': 1::hugeint} IS DISTINCT FROM {'x': 1::hugeint};
SELECT {'x': 1::hugeint} IS DISTINCT FROM NULL;
SELECT {'x': 1::hugeint} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::hugeint} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS HUGEINT)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::hugeint} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::hugeint}, {'x': 1::hugeint}),
	({'x': 1::hugeint}, {'x': 2::hugeint}),
	({'x': 2::hugeint}, {'x': 1::hugeint}),
	(NULL, {'x': 1::hugeint}),
	({'x': 2::hugeint}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 1::utinyint} IS NOT DISTINCT FROM {'x': 2::utinyint};
SELECT {'x': 1::utinyint} IS NOT DISTINCT FROM {'x': 2::utinyint};
;
SELECT {'x': 1::utinyint} IS NOT DISTINCT FROM {'x': 2::utinyint};
SELECT (main.struct_pack(x := CAST(1 AS UTINYINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS UTINYINT)));
;
;
;
;
SELECT {'x': 1::utinyint} IS NOT DISTINCT FROM {'x': 2::utinyint};
SELECT {'x': 1::utinyint} IS NOT DISTINCT FROM {'x': 1::utinyint};
SELECT {'x': 1::utinyint} IS NOT DISTINCT FROM {'x': 1::utinyint};
;
SELECT {'x': 1::utinyint} IS NOT DISTINCT FROM {'x': 1::utinyint};
SELECT (main.struct_pack(x := CAST(1 AS UTINYINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS UTINYINT)));
;
;
;
;
SELECT {'x': 1::utinyint} IS NOT DISTINCT FROM {'x': 1::utinyint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::utinyint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::utinyint};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::utinyint};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS UTINYINT)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::utinyint};
SELECT {'x': 1::utinyint} IS DISTINCT FROM {'x': 2::utinyint};
SELECT {'x': 1::utinyint} IS DISTINCT FROM {'x': 2::utinyint};
;
SELECT {'x': 1::utinyint} IS DISTINCT FROM {'x': 2::utinyint};
SELECT (main.struct_pack(x := CAST(1 AS UTINYINT)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS UTINYINT)));
;
;
;
;
SELECT {'x': 1::utinyint} IS DISTINCT FROM {'x': 2::utinyint};
SELECT {'x': 1::utinyint} IS DISTINCT FROM {'x': 1::utinyint};
SELECT {'x': 1::utinyint} IS DISTINCT FROM {'x': 1::utinyint};
;
SELECT {'x': 1::utinyint} IS DISTINCT FROM {'x': 1::utinyint};
SELECT (main.struct_pack(x := CAST(1 AS UTINYINT)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS UTINYINT)));
;
;
;
;
SELECT {'x': 1::utinyint} IS DISTINCT FROM {'x': 1::utinyint};
SELECT {'x': 1::utinyint} IS DISTINCT FROM NULL;
SELECT {'x': 1::utinyint} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::utinyint} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS UTINYINT)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::utinyint} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::utinyint}, {'x': 1::utinyint}),
	({'x': 1::utinyint}, {'x': 2::utinyint}),
	({'x': 2::utinyint}, {'x': 1::utinyint}),
	(NULL, {'x': 1::utinyint}),
	({'x': 2::utinyint}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 1::usmallint} IS NOT DISTINCT FROM {'x': 2::usmallint};
SELECT {'x': 1::usmallint} IS NOT DISTINCT FROM {'x': 2::usmallint};
;
SELECT {'x': 1::usmallint} IS NOT DISTINCT FROM {'x': 2::usmallint};
SELECT (main.struct_pack(x := CAST(1 AS USMALLINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS USMALLINT)));
;
;
;
;
SELECT {'x': 1::usmallint} IS NOT DISTINCT FROM {'x': 2::usmallint};
SELECT {'x': 1::usmallint} IS NOT DISTINCT FROM {'x': 1::usmallint};
SELECT {'x': 1::usmallint} IS NOT DISTINCT FROM {'x': 1::usmallint};
;
SELECT {'x': 1::usmallint} IS NOT DISTINCT FROM {'x': 1::usmallint};
SELECT (main.struct_pack(x := CAST(1 AS USMALLINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS USMALLINT)));
;
;
;
;
SELECT {'x': 1::usmallint} IS NOT DISTINCT FROM {'x': 1::usmallint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::usmallint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::usmallint};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::usmallint};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS USMALLINT)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::usmallint};
SELECT {'x': 1::usmallint} IS DISTINCT FROM {'x': 2::usmallint};
SELECT {'x': 1::usmallint} IS DISTINCT FROM {'x': 2::usmallint};
;
SELECT {'x': 1::usmallint} IS DISTINCT FROM {'x': 2::usmallint};
SELECT (main.struct_pack(x := CAST(1 AS USMALLINT)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS USMALLINT)));
;
;
;
;
SELECT {'x': 1::usmallint} IS DISTINCT FROM {'x': 2::usmallint};
SELECT {'x': 1::usmallint} IS DISTINCT FROM {'x': 1::usmallint};
SELECT {'x': 1::usmallint} IS DISTINCT FROM {'x': 1::usmallint};
;
SELECT {'x': 1::usmallint} IS DISTINCT FROM {'x': 1::usmallint};
SELECT (main.struct_pack(x := CAST(1 AS USMALLINT)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS USMALLINT)));
;
;
;
;
SELECT {'x': 1::usmallint} IS DISTINCT FROM {'x': 1::usmallint};
SELECT {'x': 1::usmallint} IS DISTINCT FROM NULL;
SELECT {'x': 1::usmallint} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::usmallint} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS USMALLINT)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::usmallint} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::usmallint}, {'x': 1::usmallint}),
	({'x': 1::usmallint}, {'x': 2::usmallint}),
	({'x': 2::usmallint}, {'x': 1::usmallint}),
	(NULL, {'x': 1::usmallint}),
	({'x': 2::usmallint}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 1::uinteger} IS NOT DISTINCT FROM {'x': 2::uinteger};
SELECT {'x': 1::uinteger} IS NOT DISTINCT FROM {'x': 2::uinteger};
;
SELECT {'x': 1::uinteger} IS NOT DISTINCT FROM {'x': 2::uinteger};
SELECT (main.struct_pack(x := CAST(1 AS UINTEGER)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS UINTEGER)));
;
;
;
;
SELECT {'x': 1::uinteger} IS NOT DISTINCT FROM {'x': 2::uinteger};
SELECT {'x': 1::uinteger} IS NOT DISTINCT FROM {'x': 1::uinteger};
SELECT {'x': 1::uinteger} IS NOT DISTINCT FROM {'x': 1::uinteger};
;
SELECT {'x': 1::uinteger} IS NOT DISTINCT FROM {'x': 1::uinteger};
SELECT (main.struct_pack(x := CAST(1 AS UINTEGER)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS UINTEGER)));
;
;
;
;
SELECT {'x': 1::uinteger} IS NOT DISTINCT FROM {'x': 1::uinteger};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::uinteger};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::uinteger};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::uinteger};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS UINTEGER)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::uinteger};
SELECT {'x': 1::uinteger} IS DISTINCT FROM {'x': 2::uinteger};
SELECT {'x': 1::uinteger} IS DISTINCT FROM {'x': 2::uinteger};
;
SELECT {'x': 1::uinteger} IS DISTINCT FROM {'x': 2::uinteger};
SELECT (main.struct_pack(x := CAST(1 AS UINTEGER)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS UINTEGER)));
;
;
;
;
SELECT {'x': 1::uinteger} IS DISTINCT FROM {'x': 2::uinteger};
SELECT {'x': 1::uinteger} IS DISTINCT FROM {'x': 1::uinteger};
SELECT {'x': 1::uinteger} IS DISTINCT FROM {'x': 1::uinteger};
;
SELECT {'x': 1::uinteger} IS DISTINCT FROM {'x': 1::uinteger};
SELECT (main.struct_pack(x := CAST(1 AS UINTEGER)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS UINTEGER)));
;
;
;
;
SELECT {'x': 1::uinteger} IS DISTINCT FROM {'x': 1::uinteger};
SELECT {'x': 1::uinteger} IS DISTINCT FROM NULL;
SELECT {'x': 1::uinteger} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::uinteger} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS UINTEGER)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::uinteger} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::uinteger}, {'x': 1::uinteger}),
	({'x': 1::uinteger}, {'x': 2::uinteger}),
	({'x': 2::uinteger}, {'x': 1::uinteger}),
	(NULL, {'x': 1::uinteger}),
	({'x': 2::uinteger}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 1::ubigint} IS NOT DISTINCT FROM {'x': 2::ubigint};
SELECT {'x': 1::ubigint} IS NOT DISTINCT FROM {'x': 2::ubigint};
;
SELECT {'x': 1::ubigint} IS NOT DISTINCT FROM {'x': 2::ubigint};
SELECT (main.struct_pack(x := CAST(1 AS UBIGINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS UBIGINT)));
;
;
;
;
SELECT {'x': 1::ubigint} IS NOT DISTINCT FROM {'x': 2::ubigint};
SELECT {'x': 1::ubigint} IS NOT DISTINCT FROM {'x': 1::ubigint};
SELECT {'x': 1::ubigint} IS NOT DISTINCT FROM {'x': 1::ubigint};
;
SELECT {'x': 1::ubigint} IS NOT DISTINCT FROM {'x': 1::ubigint};
SELECT (main.struct_pack(x := CAST(1 AS UBIGINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS UBIGINT)));
;
;
;
;
SELECT {'x': 1::ubigint} IS NOT DISTINCT FROM {'x': 1::ubigint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::ubigint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::ubigint};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::ubigint};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS UBIGINT)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::ubigint};
SELECT {'x': 1::ubigint} IS DISTINCT FROM {'x': 2::ubigint};
SELECT {'x': 1::ubigint} IS DISTINCT FROM {'x': 2::ubigint};
;
SELECT {'x': 1::ubigint} IS DISTINCT FROM {'x': 2::ubigint};
SELECT (main.struct_pack(x := CAST(1 AS UBIGINT)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS UBIGINT)));
;
;
;
;
SELECT {'x': 1::ubigint} IS DISTINCT FROM {'x': 2::ubigint};
SELECT {'x': 1::ubigint} IS DISTINCT FROM {'x': 1::ubigint};
SELECT {'x': 1::ubigint} IS DISTINCT FROM {'x': 1::ubigint};
;
SELECT {'x': 1::ubigint} IS DISTINCT FROM {'x': 1::ubigint};
SELECT (main.struct_pack(x := CAST(1 AS UBIGINT)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS UBIGINT)));
;
;
;
;
SELECT {'x': 1::ubigint} IS DISTINCT FROM {'x': 1::ubigint};
SELECT {'x': 1::ubigint} IS DISTINCT FROM NULL;
SELECT {'x': 1::ubigint} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::ubigint} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS UBIGINT)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::ubigint} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::ubigint}, {'x': 1::ubigint}),
	({'x': 1::ubigint}, {'x': 2::ubigint}),
	({'x': 2::ubigint}, {'x': 1::ubigint}),
	(NULL, {'x': 1::ubigint}),
	({'x': 2::ubigint}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 1::uhugeint} IS NOT DISTINCT FROM {'x': 2::uhugeint};
SELECT {'x': 1::uhugeint} IS NOT DISTINCT FROM {'x': 2::uhugeint};
;
SELECT {'x': 1::uhugeint} IS NOT DISTINCT FROM {'x': 2::uhugeint};
SELECT (main.struct_pack(x := CAST(1 AS UHUGEINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS UHUGEINT)));
;
;
;
;
SELECT {'x': 1::uhugeint} IS NOT DISTINCT FROM {'x': 2::uhugeint};
SELECT {'x': 1::uhugeint} IS NOT DISTINCT FROM {'x': 1::uhugeint};
SELECT {'x': 1::uhugeint} IS NOT DISTINCT FROM {'x': 1::uhugeint};
;
SELECT {'x': 1::uhugeint} IS NOT DISTINCT FROM {'x': 1::uhugeint};
SELECT (main.struct_pack(x := CAST(1 AS UHUGEINT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS UHUGEINT)));
;
;
;
;
SELECT {'x': 1::uhugeint} IS NOT DISTINCT FROM {'x': 1::uhugeint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::uhugeint};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::uhugeint};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::uhugeint};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS UHUGEINT)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::uhugeint};
SELECT {'x': 1::uhugeint} IS DISTINCT FROM {'x': 2::uhugeint};
SELECT {'x': 1::uhugeint} IS DISTINCT FROM {'x': 2::uhugeint};
;
SELECT {'x': 1::uhugeint} IS DISTINCT FROM {'x': 2::uhugeint};
SELECT (main.struct_pack(x := CAST(1 AS UHUGEINT)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS UHUGEINT)));
;
;
;
;
SELECT {'x': 1::uhugeint} IS DISTINCT FROM {'x': 2::uhugeint};
SELECT {'x': 1::uhugeint} IS DISTINCT FROM {'x': 1::uhugeint};
SELECT {'x': 1::uhugeint} IS DISTINCT FROM {'x': 1::uhugeint};
;
SELECT {'x': 1::uhugeint} IS DISTINCT FROM {'x': 1::uhugeint};
SELECT (main.struct_pack(x := CAST(1 AS UHUGEINT)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS UHUGEINT)));
;
;
;
;
SELECT {'x': 1::uhugeint} IS DISTINCT FROM {'x': 1::uhugeint};
SELECT {'x': 1::uhugeint} IS DISTINCT FROM NULL;
SELECT {'x': 1::uhugeint} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::uhugeint} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS UHUGEINT)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::uhugeint} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::uhugeint}, {'x': 1::uhugeint}),
	({'x': 1::uhugeint}, {'x': 2::uhugeint}),
	({'x': 2::uhugeint}, {'x': 1::uhugeint}),
	(NULL, {'x': 1::uhugeint}),
	({'x': 2::uhugeint}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 1::float} IS NOT DISTINCT FROM {'x': 2::float};
SELECT {'x': 1::float} IS NOT DISTINCT FROM {'x': 2::float};
;
SELECT {'x': 1::float} IS NOT DISTINCT FROM {'x': 2::float};
SELECT (main.struct_pack(x := CAST(1 AS FLOAT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS FLOAT)));
;
;
;
;
SELECT {'x': 1::float} IS NOT DISTINCT FROM {'x': 2::float};
SELECT {'x': 1::float} IS NOT DISTINCT FROM {'x': 1::float};
SELECT {'x': 1::float} IS NOT DISTINCT FROM {'x': 1::float};
;
SELECT {'x': 1::float} IS NOT DISTINCT FROM {'x': 1::float};
SELECT (main.struct_pack(x := CAST(1 AS FLOAT)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS FLOAT)));
;
;
;
;
SELECT {'x': 1::float} IS NOT DISTINCT FROM {'x': 1::float};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::float};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::float};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::float};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS FLOAT)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::float};
SELECT {'x': 1::float} IS DISTINCT FROM {'x': 2::float};
SELECT {'x': 1::float} IS DISTINCT FROM {'x': 2::float};
;
SELECT {'x': 1::float} IS DISTINCT FROM {'x': 2::float};
SELECT (main.struct_pack(x := CAST(1 AS FLOAT)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS FLOAT)));
;
;
;
;
SELECT {'x': 1::float} IS DISTINCT FROM {'x': 2::float};
SELECT {'x': 1::float} IS DISTINCT FROM {'x': 1::float};
SELECT {'x': 1::float} IS DISTINCT FROM {'x': 1::float};
;
SELECT {'x': 1::float} IS DISTINCT FROM {'x': 1::float};
SELECT (main.struct_pack(x := CAST(1 AS FLOAT)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS FLOAT)));
;
;
;
;
SELECT {'x': 1::float} IS DISTINCT FROM {'x': 1::float};
SELECT {'x': 1::float} IS DISTINCT FROM NULL;
SELECT {'x': 1::float} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::float} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS FLOAT)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::float} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::float}, {'x': 1::float}),
	({'x': 1::float}, {'x': 2::float}),
	({'x': 2::float}, {'x': 1::float}),
	(NULL, {'x': 1::float}),
	({'x': 2::float}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 1::double} IS NOT DISTINCT FROM {'x': 2::double};
SELECT {'x': 1::double} IS NOT DISTINCT FROM {'x': 2::double};
;
SELECT {'x': 1::double} IS NOT DISTINCT FROM {'x': 2::double};
SELECT (main.struct_pack(x := CAST(1 AS DOUBLE)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(2 AS DOUBLE)));
;
;
;
;
SELECT {'x': 1::double} IS NOT DISTINCT FROM {'x': 2::double};
SELECT {'x': 1::double} IS NOT DISTINCT FROM {'x': 1::double};
SELECT {'x': 1::double} IS NOT DISTINCT FROM {'x': 1::double};
;
SELECT {'x': 1::double} IS NOT DISTINCT FROM {'x': 1::double};
SELECT (main.struct_pack(x := CAST(1 AS DOUBLE)) IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS DOUBLE)));
;
;
;
;
SELECT {'x': 1::double} IS NOT DISTINCT FROM {'x': 1::double};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::double};
SELECT NULL IS NOT DISTINCT FROM {'x': 1::double};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::double};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := CAST(1 AS DOUBLE)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1::double};
SELECT {'x': 1::double} IS DISTINCT FROM {'x': 2::double};
SELECT {'x': 1::double} IS DISTINCT FROM {'x': 2::double};
;
SELECT {'x': 1::double} IS DISTINCT FROM {'x': 2::double};
SELECT (main.struct_pack(x := CAST(1 AS DOUBLE)) IS DISTINCT FROM main.struct_pack(x := CAST(2 AS DOUBLE)));
;
;
;
;
SELECT {'x': 1::double} IS DISTINCT FROM {'x': 2::double};
SELECT {'x': 1::double} IS DISTINCT FROM {'x': 1::double};
SELECT {'x': 1::double} IS DISTINCT FROM {'x': 1::double};
;
SELECT {'x': 1::double} IS DISTINCT FROM {'x': 1::double};
SELECT (main.struct_pack(x := CAST(1 AS DOUBLE)) IS DISTINCT FROM main.struct_pack(x := CAST(1 AS DOUBLE)));
;
;
;
;
SELECT {'x': 1::double} IS DISTINCT FROM {'x': 1::double};
SELECT {'x': 1::double} IS DISTINCT FROM NULL;
SELECT {'x': 1::double} IS DISTINCT FROM NULL;
;
SELECT {'x': 1::double} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := CAST(1 AS DOUBLE)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1::double} IS DISTINCT FROM NULL;
CREATE OR REPLACE VIEW struct_int AS SELECT * FROM (VALUES
	({'x': 1::double}, {'x': 1::double}),
	({'x': 1::double}, {'x': 2::double}),
	({'x': 2::double}, {'x': 1::double}),
	(NULL, {'x': 1::double}),
	({'x': 2::double}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT l IS DISTINCT FROM r FROM struct_int;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT (l IS DISTINCT FROM r) FROM struct_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_int;
SELECT {'x': 'duck'} IS NOT DISTINCT FROM {'x': 'goose'};
SELECT {'x': 'duck'} IS NOT DISTINCT FROM {'x': 'goose'};
;
SELECT {'x': 'duck'} IS NOT DISTINCT FROM {'x': 'goose'};
SELECT (main.struct_pack(x := 'duck') IS NOT DISTINCT FROM main.struct_pack(x := 'goose'));
;
;
;
;
SELECT {'x': 'duck'} IS NOT DISTINCT FROM {'x': 'goose'};
SELECT {'x': 'duck'} IS NOT DISTINCT FROM {'x': 'duck'};
SELECT {'x': 'duck'} IS NOT DISTINCT FROM {'x': 'duck'};
;
SELECT {'x': 'duck'} IS NOT DISTINCT FROM {'x': 'duck'};
SELECT (main.struct_pack(x := 'duck') IS NOT DISTINCT FROM main.struct_pack(x := 'duck'));
;
;
;
;
SELECT {'x': 'duck'} IS NOT DISTINCT FROM {'x': 'duck'};
SELECT {'x': 'duck'} IS NOT DISTINCT FROM NULL;
SELECT {'x': 'duck'} IS NOT DISTINCT FROM NULL;
;
SELECT {'x': 'duck'} IS NOT DISTINCT FROM NULL;
SELECT (main.struct_pack(x := 'duck') IS NOT DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 'duck'} IS NOT DISTINCT FROM NULL;
SELECT NULL IS NOT DISTINCT FROM {'x': 'duck'};
SELECT NULL IS NOT DISTINCT FROM {'x': 'duck'};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 'duck'};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := 'duck'));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 'duck'};
SELECT {'x': 'duck'} IS DISTINCT FROM {'x': 'goose'};
SELECT {'x': 'duck'} IS DISTINCT FROM {'x': 'goose'};
;
SELECT {'x': 'duck'} IS DISTINCT FROM {'x': 'goose'};
SELECT (main.struct_pack(x := 'duck') IS DISTINCT FROM main.struct_pack(x := 'goose'));
;
;
;
;
SELECT {'x': 'duck'} IS DISTINCT FROM {'x': 'goose'};
SELECT {'x': 'duck'} IS DISTINCT FROM {'x': 'duck'};
SELECT {'x': 'duck'} IS DISTINCT FROM {'x': 'duck'};
;
SELECT {'x': 'duck'} IS DISTINCT FROM {'x': 'duck'};
SELECT (main.struct_pack(x := 'duck') IS DISTINCT FROM main.struct_pack(x := 'duck'));
;
;
;
;
SELECT {'x': 'duck'} IS DISTINCT FROM {'x': 'duck'};
SELECT {'x': 'duck'} IS DISTINCT FROM NULL;
SELECT {'x': 'duck'} IS DISTINCT FROM NULL;
;
SELECT {'x': 'duck'} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := 'duck') IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 'duck'} IS DISTINCT FROM NULL;
SELECT NULL IS DISTINCT FROM {'x': 'duck'};
SELECT NULL IS DISTINCT FROM {'x': 'duck'};
;
SELECT NULL IS DISTINCT FROM {'x': 'duck'};
SELECT (NULL IS DISTINCT FROM main.struct_pack(x := 'duck'));
;
;
;
;
SELECT NULL IS DISTINCT FROM {'x': 'duck'};
CREATE VIEW struct_str AS SELECT * FROM (VALUES
	({'x': 'duck'}, {'x': 'duck'}),
	({'x': 'duck'}, {'x': 'goose'}),
	({'x': 'goose'}, {'x': 'duck'}),
	(NULL, {'x': 'duck'}),
	({'x': 'goose'}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_str;
SELECT l IS NOT DISTINCT FROM r FROM struct_str;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_str;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_str;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_str;
SELECT l IS DISTINCT FROM r FROM struct_str;
SELECT l IS DISTINCT FROM r FROM struct_str;
;
SELECT l IS DISTINCT FROM r FROM struct_str;
SELECT (l IS DISTINCT FROM r) FROM struct_str;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_str;
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM {'x': 'goose', 'y': 2};
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM {'x': 'goose', 'y': 2};
;
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM {'x': 'goose', 'y': 2};
SELECT (main.struct_pack(x := 'duck', y := 1) IS NOT DISTINCT FROM main.struct_pack(x := 'goose', y := 2));
;
;
;
;
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM {'x': 'goose', 'y': 2};
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM {'x': 'duck', 'y': 1};
;
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT (main.struct_pack(x := 'duck', y := 1) IS NOT DISTINCT FROM main.struct_pack(x := 'duck', y := 1));
;
;
;
;
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT NULL IS NOT DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT NULL IS NOT DISTINCT FROM {'x': 'duck', 'y': 1};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := 'duck', y := 1));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM NULL;
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM NULL;
;
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM NULL;
SELECT (main.struct_pack(x := 'duck', y := 1) IS NOT DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 'duck', 'y': 1} IS NOT DISTINCT FROM NULL;
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM {'x': 'goose', 'y': 2};
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM {'x': 'goose', 'y': 2};
;
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM {'x': 'goose', 'y': 2};
SELECT (main.struct_pack(x := 'duck', y := 1) IS DISTINCT FROM main.struct_pack(x := 'goose', y := 2));
;
;
;
;
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM {'x': 'goose', 'y': 2};
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM {'x': 'duck', 'y': 1};
;
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT (main.struct_pack(x := 'duck', y := 1) IS DISTINCT FROM main.struct_pack(x := 'duck', y := 1));
;
;
;
;
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT NULL IS DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT NULL IS DISTINCT FROM {'x': 'duck', 'y': 1};
;
SELECT NULL IS DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT (NULL IS DISTINCT FROM main.struct_pack(x := 'duck', y := 1));
;
;
;
;
SELECT NULL IS DISTINCT FROM {'x': 'duck', 'y': 1};
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM NULL;
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM NULL;
;
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := 'duck', y := 1) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 'duck', 'y': 1} IS DISTINCT FROM NULL;
CREATE VIEW struct_str_int AS SELECT * FROM (VALUES
	({'x': 'duck', 'y': 1}, {'x': 'duck', 'y': 1}),
	({'x': 'duck', 'y': 1}, {'x': 'goose', 'y': 2}),
	({'x': 'goose', 'y': 2}, {'x': 'duck', 'y': 1}),
	(NULL, {'x': 'duck', 'y': 1}),
	({'x': 'goose', 'y': 2}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_str_int;
SELECT l IS NOT DISTINCT FROM r FROM struct_str_int;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_str_int;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_str_int;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_str_int;
SELECT l IS DISTINCT FROM r FROM struct_str_int;
SELECT l IS DISTINCT FROM r FROM struct_str_int;
;
SELECT l IS DISTINCT FROM r FROM struct_str_int;
SELECT (l IS DISTINCT FROM r) FROM struct_str_int;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_str_int;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
SELECT (main.struct_pack(x := 1, y := main.struct_pack(a := 'duck', b := 1.5)) IS NOT DISTINCT FROM main.struct_pack(x := 2, y := main.struct_pack(a := 'goose', b := 2.5)));
;
;
;
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT (main.struct_pack(x := 1, y := main.struct_pack(a := 'duck', b := 1.5)) IS NOT DISTINCT FROM main.struct_pack(x := 1, y := main.struct_pack(a := 'duck', b := 1.5)));
;
;
;
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT NULL IS NOT DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT NULL IS NOT DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := 1, y := main.struct_pack(a := 'duck', b := 1.5)));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM NULL;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM NULL;
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM NULL;
SELECT (main.struct_pack(x := 1, y := main.struct_pack(a := 'duck', b := 1.5)) IS NOT DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS NOT DISTINCT FROM NULL;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
SELECT (main.struct_pack(x := 1, y := main.struct_pack(a := 'duck', b := 1.5)) IS DISTINCT FROM main.struct_pack(x := 2, y := main.struct_pack(a := 'goose', b := 2.5)));
;
;
;
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM {'x': 2, 'y': {'a': 'goose', 'b': 2.5}};
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT (main.struct_pack(x := 1, y := main.struct_pack(a := 'duck', b := 1.5)) IS DISTINCT FROM main.struct_pack(x := 1, y := main.struct_pack(a := 'duck', b := 1.5)));
;
;
;
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT NULL IS DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT NULL IS DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
;
SELECT NULL IS DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT (NULL IS DISTINCT FROM main.struct_pack(x := 1, y := main.struct_pack(a := 'duck', b := 1.5)));
;
;
;
;
SELECT NULL IS DISTINCT FROM {'x': 1, 'y': {'a': 'duck', 'b': 1.5}};
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM NULL;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM NULL;
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := 1, y := main.struct_pack(a := 'duck', b := 1.5)) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1, 'y': {'a': 'duck', 'b': 1.5}} IS DISTINCT FROM NULL;
CREATE VIEW struct_nested AS SELECT * FROM (VALUES
	({'x': 1, 'y': {'a': 'duck', 'b': 1.5}}, {'x': 1, 'y': {'a': 'duck', 'b': 1.5}}),
	({'x': 1, 'y': {'a': 'duck', 'b': 1.5}}, {'x': 2, 'y': {'a': 'goose', 'b': 2.5}}),
	({'x': 2, 'y': {'a': 'goose', 'b': 2.5}}, {'x': 1, 'y': {'a': 'duck', 'b': 1.5}}),
	(NULL, {'x': 1, 'y': {'a': 'duck', 'b': 1.5}}),
	({'x': 2, 'y': {'a': 'goose', 'b': 2.5}}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM struct_nested;
SELECT l IS NOT DISTINCT FROM r FROM struct_nested;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_nested;
SELECT (l IS NOT DISTINCT FROM r) FROM struct_nested;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM struct_nested;
SELECT l IS DISTINCT FROM r FROM struct_nested;
SELECT l IS DISTINCT FROM r FROM struct_nested;
;
SELECT l IS DISTINCT FROM r FROM struct_nested;
SELECT (l IS DISTINCT FROM r) FROM struct_nested;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM struct_nested;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM {'x': 2, 'y': ['goose']};
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM {'x': 2, 'y': ['goose']};
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM {'x': 2, 'y': ['goose']};
SELECT (main.struct_pack(x := 1, y := main.list_value('duck', 'somateria')) IS NOT DISTINCT FROM main.struct_pack(x := 2, y := main.list_value('goose')));
;
;
;
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM {'x': 2, 'y': ['goose']};
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT (main.struct_pack(x := 1, y := main.list_value('duck', 'somateria')) IS NOT DISTINCT FROM main.struct_pack(x := 1, y := main.list_value('duck', 'somateria')));
;
;
;
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT NULL IS NOT DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT NULL IS NOT DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT (NULL IS NOT DISTINCT FROM main.struct_pack(x := 1, y := main.list_value('duck', 'somateria')));
;
;
;
;
SELECT NULL IS NOT DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM NULL;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM NULL;
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM NULL;
SELECT (main.struct_pack(x := 1, y := main.list_value('duck', 'somateria')) IS NOT DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS NOT DISTINCT FROM NULL;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM {'x': 2, 'y': ['goose']};
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM {'x': 2, 'y': ['goose']};
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM {'x': 2, 'y': ['goose']};
SELECT (main.struct_pack(x := 1, y := main.list_value('duck', 'somateria')) IS DISTINCT FROM main.struct_pack(x := 2, y := main.list_value('goose')));
;
;
;
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM {'x': 2, 'y': ['goose']};
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT (main.struct_pack(x := 1, y := main.list_value('duck', 'somateria')) IS DISTINCT FROM main.struct_pack(x := 1, y := main.list_value('duck', 'somateria')));
;
;
;
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT NULL IS DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT NULL IS DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
;
SELECT NULL IS DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT (NULL IS DISTINCT FROM main.struct_pack(x := 1, y := main.list_value('duck', 'somateria')));
;
;
;
;
SELECT NULL IS DISTINCT FROM {'x': 1, 'y': ['duck', 'somateria']};
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM NULL;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM NULL;
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM NULL;
SELECT (main.struct_pack(x := 1, y := main.list_value('duck', 'somateria')) IS DISTINCT FROM NULL);
;
;
;
;
SELECT {'x': 1, 'y': ['duck', 'somateria']} IS DISTINCT FROM NULL;
CREATE VIEW list_in_struct AS SELECT * FROM (VALUES
	({'x': 1, 'y': ['duck', 'somateria']}, {'x': 1, 'y': ['duck', 'somateria']}),
	({'x': 1, 'y': ['duck', 'somateria']}, {'x': 2, 'y': ['goose']}),
	({'x': 2, 'y': ['goose']}, {'x': 1, 'y': ['duck', 'somateria']}),
	(NULL, {'x': 1, 'y': ['duck', 'somateria']}),
	({'x': 2, 'y': ['goose']}, NULL),
	(NULL, NULL)
	) tbl(l, r);;
SELECT l IS NOT DISTINCT FROM r FROM list_in_struct;
SELECT l IS NOT DISTINCT FROM r FROM list_in_struct;
;
SELECT l IS NOT DISTINCT FROM r FROM list_in_struct;
SELECT (l IS NOT DISTINCT FROM r) FROM list_in_struct;
;
;
;
;
SELECT l IS NOT DISTINCT FROM r FROM list_in_struct;
SELECT l IS DISTINCT FROM r FROM list_in_struct;
SELECT l IS DISTINCT FROM r FROM list_in_struct;
;
SELECT l IS DISTINCT FROM r FROM list_in_struct;
SELECT (l IS DISTINCT FROM r) FROM list_in_struct;
;
;
;
;
SELECT l IS DISTINCT FROM r FROM list_in_struct;
select CASE WHEN a < 4 THEN {'x': a, 'y': a+1, 'z': a+2} ELSE NULL END IS NOT DISTINCT FROM {'x': 1, 'y': 2, 'z': 3}
from range(5) tbl(a);;
select CASE WHEN a < 4 THEN {'x': a, 'y': a+1, 'z': a+2} ELSE NULL END IS NOT DISTINCT FROM {'x': 1, 'y': 2, 'z': 3}
from range(5) tbl(a);;
;
select CASE WHEN a < 4 THEN {'x': a, 'y': a+1, 'z': a+2} ELSE NULL END IS NOT DISTINCT FROM {'x': 1, 'y': 2, 'z': 3}
from range(5) tbl(a);;
SELECT (CASE  WHEN ((a < 4)) THEN (main.struct_pack(x := a, y := (a + 1), z := (a + 2))) ELSE NULL END IS NOT DISTINCT FROM main.struct_pack(x := 1, y := 2, z := 3)) FROM range(5) AS tbl(a);
;
;
;
;
select CASE WHEN a < 4 THEN {'x': a, 'y': a+1, 'z': a+2} ELSE NULL END IS NOT DISTINCT FROM {'x': 1, 'y': 2, 'z': 3}
from range(5) tbl(a);;
select CASE WHEN a < 4 THEN {'x': a, 'y': a+1, 'z': a+2} ELSE NULL END IS DISTINCT FROM {'x': 1, 'y': 2, 'z': 3}
from range(5) tbl(a);;
select CASE WHEN a < 4 THEN {'x': a, 'y': a+1, 'z': a+2} ELSE NULL END IS DISTINCT FROM {'x': 1, 'y': 2, 'z': 3}
from range(5) tbl(a);;
;
select CASE WHEN a < 4 THEN {'x': a, 'y': a+1, 'z': a+2} ELSE NULL END IS DISTINCT FROM {'x': 1, 'y': 2, 'z': 3}
from range(5) tbl(a);;
SELECT (CASE  WHEN ((a < 4)) THEN (main.struct_pack(x := a, y := (a + 1), z := (a + 2))) ELSE NULL END IS DISTINCT FROM main.struct_pack(x := 1, y := 2, z := 3)) FROM range(5) AS tbl(a);
;
;
;
;
select CASE WHEN a < 4 THEN {'x': a, 'y': a+1, 'z': a+2} ELSE NULL END IS DISTINCT FROM {'x': 1, 'y': 2, 'z': 3}
from range(5) tbl(a);;
