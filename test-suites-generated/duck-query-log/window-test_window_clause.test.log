PRAGMA enable_verification;
create table integers as select range i from range(0,16);;
select max(base), max(referenced), sum(refined), sum(unrefined) from (
    select
    	row_number() over w AS base,
    	row_number() over (w) as referenced,
    	sum(i % 4) over (w rows between 1 preceding and 1 following) AS refined,
    	sum(i % 4) over (rows between 1 preceding and 1 following) AS unrefined
    from integers
    WINDOW w AS (partition by i // 4 order by i % 4)
) q;;
select max(base), max(referenced), sum(refined), sum(unrefined) from (
    select
    	row_number() over w AS base,
    	row_number() over (w) as referenced,
    	sum(i % 4) over (w rows between 1 preceding and 1 following) AS refined,
    	sum(i % 4) over (rows between 1 preceding and 1 following) AS unrefined
    from integers
    WINDOW w AS (partition by i // 4 order by i % 4)
) q;;
;
select max(base), max(referenced), sum(refined), sum(unrefined) from (
    select
    	row_number() over w AS base,
    	row_number() over (w) as referenced,
    	sum(i % 4) over (w rows between 1 preceding and 1 following) AS refined,
    	sum(i % 4) over (rows between 1 preceding and 1 following) AS unrefined
    from integers
    WINDOW w AS (partition by i // 4 order by i % 4)
) q;;
SELECT max(base), max(referenced), sum(refined), sum(unrefined) FROM (SELECT row_number() OVER (PARTITION BY (i // 4) ORDER BY (i % 4)) AS base, row_number() OVER (PARTITION BY (i // 4) ORDER BY (i % 4)) AS referenced, sum((i % 4)) OVER (PARTITION BY (i // 4) ORDER BY (i % 4) ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS refined, sum((i % 4)) OVER (ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) AS unrefined FROM integers) AS q;
;
;
;
;
select max(base), max(referenced), sum(refined), sum(unrefined) from (
    select
    	row_number() over w AS base,
    	row_number() over (w) as referenced,
    	sum(i % 4) over (w rows between 1 preceding and 1 following) AS refined,
    	sum(i % 4) over (rows between 1 preceding and 1 following) AS unrefined
    from integers
    WINDOW w AS (partition by i // 4 order by i % 4)
) q;;
select 
  x, y, 
  count(*) over (partition by y order by x), 
  count(*) over (w order by x)
from (values (1, 1), (2, 1), (3, 2), (4, 2)) as t (x, y)
window w as (partition by y)
order by x;
select 
  x, y, 
  count(*) over (partition by y order by x), 
  count(*) over (w order by x)
from (values (1, 1), (2, 1), (3, 2), (4, 2)) as t (x, y)
window w as (partition by y)
order by x;
;
select 
  x, y, 
  count(*) over (partition by y order by x), 
  count(*) over (w order by x)
from (values (1, 1), (2, 1), (3, 2), (4, 2)) as t (x, y)
window w as (partition by y)
order by x;
SELECT x, y, count() OVER (PARTITION BY y ORDER BY x), count() OVER (PARTITION BY y ORDER BY x) FROM (SELECT * FROM (VALUES (1, 1), (2, 1), (3, 2), (4, 2)) AS valueslist) AS t(x, y) ORDER BY x;
;
;
;
;
select 
  x, y, 
  count(*) over (partition by y order by x), 
  count(*) over (w order by x)
from (values (1, 1), (2, 1), (3, 2), (4, 2)) as t (x, y)
window w as (partition by y)
order by x;
SELECT sum(i) over cumulativeSum 
FROM integers 
WINDOW cumulativeSum AS ();;
SELECT sum(i) over cumulativeSum 
FROM integers 
WINDOW cumulativeSum AS ();;
;
SELECT sum(i) over cumulativeSum 
FROM integers 
WINDOW cumulativeSum AS ();;
SELECT sum(i) OVER () FROM integers;
;
;
;
;
SELECT sum(i) over cumulativeSum 
FROM integers 
WINDOW cumulativeSum AS ();;
