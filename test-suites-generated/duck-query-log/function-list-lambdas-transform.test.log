PRAGMA enable_verification;
SELECT [1] AS l, list_transform([1], l -> l + 1);
SELECT [1] AS l, list_transform([1], l -> l + 1);
;
SELECT [1] AS l, list_transform([1], l -> l + 1);
SELECT main.list_value(1) AS l, list_transform(main.list_value(1), (l -> (l + 1)));
;
;
;
;
SELECT [1] AS l, list_transform([1], l -> l + 1);
SELECT list_transform(NULL, x -> x + 1);
SELECT list_transform(NULL, x -> x + 1);
;
SELECT list_transform(NULL, x -> x + 1);
SELECT list_transform(NULL, (x -> (x + 1)));
;
;
;
;
SELECT list_transform(NULL, x -> x + 1);
SELECT list_transform([1], x -> x);
SELECT list_transform([1], x -> x);
;
SELECT list_transform([1], x -> x);
SELECT list_transform(main.list_value(1), (x -> x));
;
;
;
;
SELECT list_transform([1], x -> x);
SELECT list_transform(['duck', 'a', 'ö'], duck -> concat(duck, 'DB'));
SELECT list_transform(['duck', 'a', 'ö'], duck -> concat(duck, 'DB'));
;
SELECT list_transform(['duck', 'a', 'ö'], duck -> concat(duck, 'DB'));
SELECT list_transform(main.list_value('duck', 'a', 'ö'), (duck -> concat(duck, 'DB')));
;
;
;
;
SELECT list_transform(['duck', 'a', 'ö'], duck -> concat(duck, 'DB'));
SELECT list_transform([1, 2, 3], x -> 1);
SELECT list_transform([1, 2, 3], x -> 1);
;
SELECT list_transform([1, 2, 3], x -> 1);
SELECT list_transform(main.list_value(1, 2, 3), (x -> 1));
;
;
;
;
SELECT list_transform([1, 2, 3], x -> 1);
SELECT list_transform([], x -> x + 1);
SELECT list_transform([], x -> x + 1);
;
SELECT list_transform([], x -> x + 1);
SELECT list_transform(main.list_value(), (x -> (x + 1)));
;
;
;
;
SELECT list_transform([], x -> x + 1);
SELECT list_transform([1, 2, 3], x -> x + 1);
SELECT list_transform([1, 2, 3], x -> x + 1);
;
SELECT list_transform([1, 2, 3], x -> x + 1);
SELECT list_transform(main.list_value(1, 2, 3), (x -> (x + 1)));
;
;
;
;
SELECT list_transform([1, 2, 3], x -> x + 1);
SELECT list_transform([1, NULL, -2, NULL], x -> x + 1);
SELECT list_transform([1, NULL, -2, NULL], x -> x + 1);
;
SELECT list_transform([1, NULL, -2, NULL], x -> x + 1);
SELECT list_transform(main.list_value(1, NULL, -2, NULL), (x -> (x + 1)));
;
;
;
;
SELECT list_transform([1, NULL, -2, NULL], x -> x + 1);
CREATE TABLE lists (n integer, l integer[]);
INSERT INTO lists VALUES (1, [1]), (2, [1, 2, 3]), (3, NULL), (4, [-1, NULL, 2]);
SELECT list_transform(l, x -> x) FROM lists;
SELECT list_transform(l, x -> x) FROM lists;
;
SELECT list_transform(l, x -> x) FROM lists;
SELECT list_transform(l, (x -> x)) FROM lists;
;
;
;
;
SELECT list_transform(l, x -> x) FROM lists;
SELECT list_transform(l, x -> x + n) FROM lists;
SELECT list_transform(l, x -> x + n) FROM lists;
;
SELECT list_transform(l, x -> x + n) FROM lists;
SELECT list_transform(l, (x -> (x + n))) FROM lists;
;
;
;
;
SELECT list_transform(l, x -> x + n) FROM lists;
SELECT list_transform(l, x -> x < 2) FROM lists;
SELECT list_transform(l, x -> x < 2) FROM lists;
;
SELECT list_transform(l, x -> x < 2) FROM lists;
SELECT list_transform(l, (x -> (x < 2))) FROM lists;
;
;
;
;
SELECT list_transform(l, x -> x < 2) FROM lists;
SELECT list_transform(['x', 'abc', 'z'], x -> x || '0');
SELECT list_transform(['x', 'abc', 'z'], x -> x || '0');
;
SELECT list_transform(['x', 'abc', 'z'], x -> x || '0');
SELECT list_transform(main.list_value('x', 'abc', 'z'), (x -> (x || '0')));
;
;
;
;
SELECT list_transform(['x', 'abc', 'z'], x -> x || '0');
SELECT list_transform([[1], [2, 3], [NULL], NULL], x -> list_transform(x, y -> y + 1));
SELECT list_transform([[1], [2, 3], [NULL], NULL], x -> list_transform(x, y -> y + 1));
;
SELECT list_transform([[1], [2, 3], [NULL], NULL], x -> list_transform(x, y -> y + 1));
SELECT list_transform(main.list_value(main.list_value(1), main.list_value(2, 3), main.list_value(NULL), NULL), (x -> list_transform(x, (y -> (y + 1)))));
;
;
;
;
SELECT list_transform([[1], [2, 3], [NULL], NULL], x -> list_transform(x, y -> y + 1));
SELECT list_transform([[1], [2], [3]], x -> list_concat(x, x));
SELECT list_transform([[1], [2], [3]], x -> list_concat(x, x));
;
SELECT list_transform([[1], [2], [3]], x -> list_concat(x, x));
SELECT list_transform(main.list_value(main.list_value(1), main.list_value(2), main.list_value(3)), (x -> list_concat(x, x)));
;
;
;
;
SELECT list_transform([[1], [2], [3]], x -> list_concat(x, x));
SELECT list_transform([5, NULL, 6], x -> POW(x, 2)::INTEGER);
SELECT list_transform([5, NULL, 6], x -> POW(x, 2)::INTEGER);
;
SELECT list_transform([5, NULL, 6], x -> POW(x, 2)::INTEGER);
SELECT list_transform(main.list_value(5, NULL, 6), (x -> CAST(pow(x, 2) AS INTEGER)));
;
;
;
;
SELECT list_transform([5, NULL, 6], x -> POW(x, 2)::INTEGER);
SELECT list_transform([5, NULL, 6], x -> COALESCE(x, 0) + 1);
SELECT list_transform([5, NULL, 6], x -> COALESCE(x, 0) + 1);
;
SELECT list_transform([5, NULL, 6], x -> COALESCE(x, 0) + 1);
SELECT list_transform(main.list_value(5, NULL, 6), (x -> (COALESCE(x, 0) + 1)));
;
;
;
;
SELECT list_transform([5, NULL, 6], x -> COALESCE(x, 0) + 1);
SELECT list_transform(list_value(list_unique(list_concat([1,2],[2,2]))), x -> (x + 1)::INTEGER);;
SELECT list_transform(list_value(list_unique(list_concat([1,2],[2,2]))), x -> (x + 1)::INTEGER);;
;
SELECT list_transform(list_value(list_unique(list_concat([1,2],[2,2]))), x -> (x + 1)::INTEGER);;
SELECT list_transform(list_value(list_unique(list_concat(main.list_value(1, 2), main.list_value(2, 2)))), (x -> CAST((x + 1) AS INTEGER)));
;
;
;
;
SELECT list_transform(list_value(list_unique(list_concat([1,2],[2,2]))), x -> (x + 1)::INTEGER);;
SELECT list_sort(list_transform(list_distinct(list_concat([1,2],[2,2])), x -> x + 1));;
SELECT list_sort(list_transform(list_distinct(list_concat([1,2],[2,2])), x -> x + 1));;
;
SELECT list_sort(list_transform(list_distinct(list_concat([1,2],[2,2])), x -> x + 1));;
SELECT list_sort(list_transform(list_distinct(list_concat(main.list_value(1, 2), main.list_value(2, 2))), (x -> (x + 1))));
;
;
;
;
SELECT list_sort(list_transform(list_distinct(list_concat([1,2],[2,2])), x -> x + 1));;
SELECT list_transform([[1], [2], [3]], x -> list_concat(list_transform(x, y -> y + 1), list_transform(x, z -> z - 1)));
SELECT list_transform([[1], [2], [3]], x -> list_concat(list_transform(x, y -> y + 1), list_transform(x, z -> z - 1)));
;
SELECT list_transform([[1], [2], [3]], x -> list_concat(list_transform(x, y -> y + 1), list_transform(x, z -> z - 1)));
SELECT list_transform(main.list_value(main.list_value(1), main.list_value(2), main.list_value(3)), (x -> list_concat(list_transform(x, (y -> (y + 1))), list_transform(x, (z -> (z - 1))))));
;
;
;
;
SELECT list_transform([[1], [2], [3]], x -> list_concat(list_transform(x, y -> y + 1), list_transform(x, z -> z - 1)));
SELECT list_transform([[1], [4], NULL, [1], [8]], x -> list_concat(list_transform(x, y -> CASE WHEN y > 1 THEN 'yay' ELSE 'nay' END), x));
SELECT list_transform([[1], [4], NULL, [1], [8]], x -> list_concat(list_transform(x, y -> CASE WHEN y > 1 THEN 'yay' ELSE 'nay' END), x));
;
SELECT list_transform([[1], [4], NULL, [1], [8]], x -> list_concat(list_transform(x, y -> CASE WHEN y > 1 THEN 'yay' ELSE 'nay' END), x));
SELECT list_transform([[1], [4], NULL, [1], [8]], x -> list_concat(list_transform(x, y -> CASE WHEN y > 1 THEN 'yay' ELSE 'nay' END), x));
SELECT list_transform([[1], [4], NULL, [1], [8]], x -> list_concat(list_transform(x, y -> CASE WHEN y > 1 THEN 'yay' ELSE 'nay' END), x::VARCHAR[]));
SELECT list_transform([[1], [4], NULL, [1], [8]], x -> list_concat(list_transform(x, y -> CASE WHEN y > 1 THEN 'yay' ELSE 'nay' END), x::VARCHAR[]));
;
SELECT list_transform([[1], [4], NULL, [1], [8]], x -> list_concat(list_transform(x, y -> CASE WHEN y > 1 THEN 'yay' ELSE 'nay' END), x::VARCHAR[]));
SELECT list_transform(main.list_value(main.list_value(1), main.list_value(4), NULL, main.list_value(1), main.list_value(8)), (x -> list_concat(list_transform(x, (y -> CASE  WHEN ((y > 1)) THEN ('yay') ELSE 'nay' END)), CAST(x AS VARCHAR[]))));
;
;
;
;
SELECT list_transform([[1], [4], NULL, [1], [8]], x -> list_concat(list_transform(x, y -> CASE WHEN y > 1 THEN 'yay' ELSE 'nay' END), x::VARCHAR[]));
SELECT array_transform([1, NULL], arr_elem -> arr_elem - 4);
SELECT array_transform([1, NULL], arr_elem -> arr_elem - 4);
;
SELECT array_transform([1, NULL], arr_elem -> arr_elem - 4);
SELECT array_transform(main.list_value(1, NULL), (arr_elem -> (arr_elem - 4)));
;
;
;
;
SELECT array_transform([1, NULL], arr_elem -> arr_elem - 4);
SELECT array_apply([1, NULL], arr_elem -> arr_elem - 4);
SELECT array_apply([1, NULL], arr_elem -> arr_elem - 4);
;
SELECT array_apply([1, NULL], arr_elem -> arr_elem - 4);
SELECT array_apply(main.list_value(1, NULL), (arr_elem -> (arr_elem - 4)));
;
;
;
;
SELECT array_apply([1, NULL], arr_elem -> arr_elem - 4);
SELECT list_apply([1, NULL], arr_elem -> arr_elem - 4);
SELECT list_apply([1, NULL], arr_elem -> arr_elem - 4);
;
SELECT list_apply([1, NULL], arr_elem -> arr_elem - 4);
SELECT list_apply(main.list_value(1, NULL), (arr_elem -> (arr_elem - 4)));
;
;
;
;
SELECT list_apply([1, NULL], arr_elem -> arr_elem - 4);
select list_apply(i, x -> (6 + 2 * 12) // x) from (values (list_value(1, 2, 3))) tbl(i);;
select list_apply(i, x -> (6 + 2 * 12) // x) from (values (list_value(1, 2, 3))) tbl(i);;
;
select list_apply(i, x -> (6 + 2 * 12) // x) from (values (list_value(1, 2, 3))) tbl(i);;
SELECT list_apply(i, (x -> ((6 + (2 * 12)) // x))) FROM (SELECT * FROM (VALUES (list_value(1, 2, 3))) AS valueslist) AS tbl(i);
;
;
;
;
select list_apply(i, x -> (6 + 2 * 12) // x) from (values (list_value(1, 2, 3))) tbl(i);;
select list_apply(i, x -> x + 1 AND x + 1) from (values (list_value(1, 2, 3))) tbl(i);;
select list_apply(i, x -> x + 1 AND x + 1) from (values (list_value(1, 2, 3))) tbl(i);;
;
select list_apply(i, x -> x + 1 AND x + 1) from (values (list_value(1, 2, 3))) tbl(i);;
SELECT list_apply(i, (x -> ((x + 1) AND (x + 1)))) FROM (SELECT * FROM (VALUES (list_value(1, 2, 3))) AS valueslist) AS tbl(i);
;
;
;
;
select list_apply(i, x -> x + 1 AND x + 1) from (values (list_value(1, 2, 3))) tbl(i);;
CREATE TABLE large_lists AS SELECT range % 4 g, list(range) l FROM range(10000) GROUP BY range % 4;;
CREATE TABLE transformed_lists (g integer, l integer[]);;
INSERT INTO transformed_lists (SELECT g + 1, list_transform(l, x -> x + 1) FROM large_lists WHERE g != 3);
INSERT INTO transformed_lists (SELECT g - 3, list_transform(l, x -> x - 3) FROM large_lists WHERE g = 3);
SELECT ll.l = tl.l FROM large_lists ll, transformed_lists tl WHERE ll.g = tl.g;
SELECT ll.l = tl.l FROM large_lists ll, transformed_lists tl WHERE ll.g = tl.g;
;
SELECT ll.l = tl.l FROM large_lists ll, transformed_lists tl WHERE ll.g = tl.g;
SELECT (ll.l = tl.l) FROM large_lists AS ll , transformed_lists AS tl WHERE (ll.g = tl.g);
;
;
;
;
SELECT ll.l = tl.l FROM large_lists ll, transformed_lists tl WHERE ll.g = tl.g;
SELECT list_transform([{'a': 1}], x -> x.a);;
SELECT list_transform([{'a': 1}], x -> x.a);;
;
SELECT list_transform([{'a': 1}], x -> x.a);;
SELECT list_transform(main.list_value(main.struct_pack(a := 1)), (x -> x.a));
;
;
;
;
SELECT list_transform([{'a': 1}], x -> x.a);;
SELECT list_transform([{'a': [1, 2, 3]}], x -> x.a[2]);;
SELECT list_transform([{'a': [1, 2, 3]}], x -> x.a[2]);;
;
SELECT list_transform([{'a': [1, 2, 3]}], x -> x.a[2]);;
SELECT list_transform(main.list_value(main.struct_pack(a := main.list_value(1, 2, 3))), (x -> x.a[2]));
;
;
;
;
SELECT list_transform([{'a': [1, 2, 3]}], x -> x.a[2]);;
SELECT list_transform([{'b' : {'a': 1}}], x -> x.b.a);;
SELECT list_transform([{'b' : {'a': 1}}], x -> x.b.a);;
;
SELECT list_transform([{'b' : {'a': 1}}], x -> x.b.a);;
SELECT list_transform(main.list_value(main.struct_pack(b := main.struct_pack(a := 1))), (x -> x.b.a));
;
;
;
;
SELECT list_transform([{'b' : {'a': 1}}], x -> x.b.a);;
SELECT list_transform([{'b' : {'a': 42, 'b': 43}}], x -> x.b.b);;
SELECT list_transform([{'b' : {'a': 42, 'b': 43}}], x -> x.b.b);;
;
SELECT list_transform([{'b' : {'a': 42, 'b': 43}}], x -> x.b.b);;
SELECT list_transform(main.list_value(main.struct_pack(b := main.struct_pack(a := 42, b := 43))), (x -> x.b.b));
;
;
;
;
SELECT list_transform([{'b' : {'a': 42, 'b': 43}}], x -> x.b.b);;
SELECT list_transform([{'b' : {'a': [{'c': 77}], 'b': 43}}], x -> x.b.a[1].c);;
SELECT list_transform([{'b' : {'a': [{'c': 77}], 'b': 43}}], x -> x.b.a[1].c);;
;
SELECT list_transform([{'b' : {'a': [{'c': 77}], 'b': 43}}], x -> x.b.a[1].c);;
SELECT list_transform(main.list_value(main.struct_pack(b := main.struct_pack(a := main.list_value(main.struct_pack(c := 77)), b := 43))), (x -> (x.b.a[1]).c));
;
;
;
;
SELECT list_transform([{'b' : {'a': [{'c': 77}], 'b': 43}}], x -> x.b.a[1].c);;
CREATE TABLE corr_test (n integer, l integer[], g integer);
INSERT INTO corr_test VALUES (1, [2, 1, 1], 1), (3, [NULL, 2, 4, 4], 1), (NULL, NULL, 1), (0, [], 1);
SELECT n FROM corr_test WHERE list_sum(list_transform(l, elem -> elem - n)) >= n;
SELECT n FROM corr_test WHERE list_sum(list_transform(l, elem -> elem - n)) >= n;
;
SELECT n FROM corr_test WHERE list_sum(list_transform(l, elem -> elem - n)) >= n;
SELECT n FROM corr_test WHERE (list_sum(list_transform(l, (elem -> (elem - n)))) >= n);
;
;
;
;
SELECT n FROM corr_test WHERE list_sum(list_transform(l, elem -> elem - n)) >= n;
SELECT ct.n FROM corr_test ct
WHERE list_count(ct.l) < (SELECT list_count(list_transform(list_concat(list(c.n), ct.l), a -> a)) FROM corr_test c GROUP BY c.g)
ORDER BY ct.n;
SELECT ct.n FROM corr_test ct
WHERE list_count(ct.l) < (SELECT list_count(list_transform(list_concat(list(c.n), ct.l), a -> a)) FROM corr_test c GROUP BY c.g)
ORDER BY ct.n;
;
SELECT ct.n FROM corr_test ct
WHERE list_count(ct.l) < (SELECT list_count(list_transform(list_concat(list(c.n), ct.l), a -> a)) FROM corr_test c GROUP BY c.g)
ORDER BY ct.n;
SELECT ct.n FROM corr_test AS ct WHERE (list_count(ct.l) < (SELECT list_count(list_transform(list_concat(list(c.n), ct.l), (a -> a))) FROM corr_test AS c GROUP BY c.g)) ORDER BY ct.n;
;
;
;
;
SELECT ct.n FROM corr_test ct
WHERE list_count(ct.l) < (SELECT list_count(list_transform(list_concat(list(c.n), ct.l), a -> a)) FROM corr_test c GROUP BY c.g)
ORDER BY ct.n;
SELECT (SELECT list_transform(l, elem -> elem + 1)) FROM corr_test;
SELECT (SELECT list_transform(l, elem -> elem + 1)) FROM corr_test;
;
SELECT (SELECT list_transform(l, elem -> elem + 1)) FROM corr_test;
SELECT (SELECT list_transform(l, (elem -> (elem + 1)))) FROM corr_test;
;
;
;
;
SELECT (SELECT list_transform(l, elem -> elem + 1)) FROM corr_test;
SELECT (SELECT list_transform(l, elem -> elem + n)) FROM corr_test;
SELECT (SELECT list_transform(l, elem -> elem + n)) FROM corr_test;
;
SELECT (SELECT list_transform(l, elem -> elem + n)) FROM corr_test;
SELECT (SELECT list_transform(l, (elem -> (elem + n)))) FROM corr_test;
;
;
;
;
SELECT (SELECT list_transform(l, elem -> elem + n)) FROM corr_test;
SELECT (SELECT (SELECT (SELECT list_transform(l, elem -> elem + 1)))) FROM corr_test;
SELECT (SELECT (SELECT (SELECT list_transform(l, elem -> elem + 1)))) FROM corr_test;
;
SELECT (SELECT (SELECT (SELECT list_transform(l, elem -> elem + 1)))) FROM corr_test;
SELECT (SELECT (SELECT (SELECT list_transform(l, (elem -> (elem + 1)))))) FROM corr_test;
;
;
;
;
SELECT (SELECT (SELECT (SELECT list_transform(l, elem -> elem + 1)))) FROM corr_test;
SELECT list_transform([1, 2, 3], x -> x + #1) FROM range(10);
SELECT list_transform([1, 2, 3], x -> x + #1) FROM range(10);
;
SELECT list_transform([1, 2, 3], x -> x + #1) FROM range(10);
SELECT list_transform(main.list_value(1, 2, 3), (x -> (x + #1))) FROM range(10);
;
;
;
;
SELECT list_transform([1, 2, 3], x -> x + #1) FROM range(10);
create table test(a int, b int);;
insert into test values (1, 2), (1, 3), (1, 4), (2, 2), (2, 3), (2, 4), (3, 2), (3, 3), (3, 4);;
select list_transform(bb, x->[x,b]), bb, b
from (select list(b) over wind as bb, first(b) over wind as b
    from test window wind as
        (order by a asc, b asc rows between 4 preceding and current row)
    qualify row_number() over wind >4);;
select list_transform(bb, x->[x,b]), bb, b
from (select list(b) over wind as bb, first(b) over wind as b
    from test window wind as
        (order by a asc, b asc rows between 4 preceding and current row)
    qualify row_number() over wind >4);;
;
select list_transform(bb, x->[x,b]), bb, b
from (select list(b) over wind as bb, first(b) over wind as b
    from test window wind as
        (order by a asc, b asc rows between 4 preceding and current row)
    qualify row_number() over wind >4);;
SELECT list_transform(bb, (x -> main.list_value(x, b))), bb, b FROM (SELECT list(b) OVER (ORDER BY a ASC, b ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS bb, first(b) OVER (ORDER BY a ASC, b ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS b FROM test QUALIFY (row_number() OVER (ORDER BY a ASC, b ASC ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) > 4));
;
;
;
;
select list_transform(bb, x->[x,b]), bb, b
from (select list(b) over wind as bb, first(b) over wind as b
    from test window wind as
        (order by a asc, b asc rows between 4 preceding and current row)
    qualify row_number() over wind >4);;
SELECT list_transform([[2, 3], [4]], x -> list_transform([42], y -> y + 1));
SELECT list_transform([[2, 3], [4]], x -> list_transform([42], y -> y + 1));
;
SELECT list_transform([[2, 3], [4]], x -> list_transform([42], y -> y + 1));
SELECT list_transform(main.list_value(main.list_value(2, 3), main.list_value(4)), (x -> list_transform(main.list_value(42), (y -> (y + 1)))));
;
;
;
;
SELECT list_transform([[2, 3], [4]], x -> list_transform([42], y -> y + 1));
SELECT list_transform([[2, 3], [4]], x -> list_transform(x, y -> y + 1));
SELECT list_transform([[2, 3], [4]], x -> list_transform(x, y -> y + 1));
;
SELECT list_transform([[2, 3], [4]], x -> list_transform(x, y -> y + 1));
SELECT list_transform(main.list_value(main.list_value(2, 3), main.list_value(4)), (x -> list_transform(x, (y -> (y + 1)))));
;
;
;
;
SELECT list_transform([[2, 3], [4]], x -> list_transform(x, y -> y + 1));
SELECT list_transform([[2, 3], [4]], x -> list_transform([1], y -> x || [y]));
SELECT list_transform([[2, 3], [4]], x -> list_transform([1], y -> x || [y]));
;
SELECT list_transform([[2, 3], [4]], x -> list_transform([1], y -> x || [y]));
SELECT list_transform(main.list_value(main.list_value(2, 3), main.list_value(4)), (x -> list_transform(main.list_value(1), (y -> (x || main.list_value(y))))));
;
;
;
;
SELECT list_transform([[2, 3], [4]], x -> list_transform([1], y -> x || [y]));
SELECT list_transform([[2, 3], [4]], x -> list_transform(x, y -> x || [y]));
SELECT list_transform([[2, 3], [4]], x -> list_transform(x, y -> x || [y]));
;
SELECT list_transform([[2, 3], [4]], x -> list_transform(x, y -> x || [y]));
SELECT list_transform(main.list_value(main.list_value(2, 3), main.list_value(4)), (x -> list_transform(x, (y -> (x || main.list_value(y))))));
;
;
;
;
SELECT list_transform([[2, 3], [4]], x -> list_transform(x, y -> x || [y]));
