SELECT BIT_XOR(3), BIT_XOR(NULL);
CREATE SEQUENCE seq;
SELECT BIT_XOR(nextval('seq'));
SELECT BIT_XOR(nextval('seq'));
CREATE TABLE integers(i INTEGER);
INSERT INTO integers VALUES (3), (7), (15), (31), (3), (15);
SELECT BIT_XOR(i), BIT_XOR(1), BIT_XOR(DISTINCT i), BIT_XOR(NULL) FROM integers;
SELECT BIT_XOR(i) FROM integers WHERE i > 100;
SELECT BIT_XOR();
SELECT BIT_XOR(1, 2, 3);
SELECT BIT_XOR(BIT_XOR(1));
CREATE TABLE bits(b BIT);
INSERT INTO bits VALUES ('1010101001'), ('0011010101'), ('0001011101'), ('1011111101'), ('0000010001'), ('1000110001');
SELECT BIT_XOR(b) FROM bits;
SELECT BIT_XOR(b) FROM bits WHERE get_bit(b, 3) = 1;
SELECT BIT_XOR('101011'::BIT);
SELECT BIT_XOR('0010101010101010101101011'::BIT) from bits;
PRAGMA enable_verification;
PRAGMA verify_external;
SELECT SETSEED(0.8675309);
CREATE TABLE tbl(
	"DATE" DATE,
	"TIMESTAMP" TIMESTAMP,
	"INTEGER" INTEGER,
	"BIGINT" BIGINT,
	"DOUBLE" DOUBLE,
	"VARCHAR" VARCHAR);
INSERT INTO tbl
	SELECT
		DATE '1992-01-02' + INTERVAL ((RANDOM() * 300)::INT) DAYS d,
		TIMESTAMP '1992-01-02 23:20:11' + INTERVAL ((RANDOM() * 300)::INT) DAYS + INTERVAL ((RANDOM() * 60 * 60)::INT) SECONDS ts,
		50 + (RANDOM() * 6000)::INT i,
		10 + (RANDOM() * 899999999)::BIGINT bi,
		1 + RANDOM() * 99 dbl,
		concat(chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), repeat(chr(98 + (RANDOM() * 24)::INT), 29)) str
	FROM
		range(10000);
INSERT INTO tbl VALUES (
	DATE '1992-01-01',
	TIMESTAMP '1992-01-01 23:20:11',
	42,
	0,
	0.5,
	'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
);
INSERT INTO tbl VALUES (
	DATE '1993-01-01',
	TIMESTAMP '1993-01-01 23:20:11',
	8400,
	999999999,
	100.5,
	'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
);
SELECT arg_min({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_max({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_min({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_max({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_min(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "VARCHAR")
FROM tbl;
SELECT arg_max(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "VARCHAR")
FROM tbl;
SELECT arg_min(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "DOUBLE")
FROM tbl;
SELECT arg_max(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "DOUBLE")
FROM tbl;
SELECT arg_min({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_max({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_min({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_max({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SET default_null_order='nulls_first';
PRAGMA enable_verification;
PRAGMA perfect_ht_threshold=20;
SET disabled_optimizers to 'compressed_materialization';
CREATE OR REPLACE TABLE timeseries(year INTEGER, val INTEGER);
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;
SET disabled_optimizers to '';
CREATE OR REPLACE TABLE timeseries(year INTEGER, val INTEGER);
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;
SET disabled_optimizers to 'compressed_materialization';
CREATE OR REPLACE TABLE timeseries(year UINTEGER, val UINTEGER);
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;
SET disabled_optimizers to '';
CREATE OR REPLACE TABLE timeseries(year UINTEGER, val UINTEGER);
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;
SET disabled_optimizers to 'compressed_materialization';
CREATE OR REPLACE TABLE timeseries(year BIGINT, val BIGINT);
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;
SET disabled_optimizers to '';
CREATE OR REPLACE TABLE timeseries(year BIGINT, val BIGINT);
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;
SET disabled_optimizers to 'compressed_materialization';
CREATE OR REPLACE TABLE timeseries(year UBIGINT, val UBIGINT);
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;
SET disabled_optimizers to '';
CREATE OR REPLACE TABLE timeseries(year UBIGINT, val UBIGINT);
INSERT INTO timeseries VALUES (1996, 10), (1997, 12), (1996, 20), (2001, 30), (NULL, 1), (1996, NULL);
SELECT year, SUM(val), COUNT(val), COUNT(*) FROM timeseries GROUP BY year ORDER BY year;
SELECT year, LIST(val), STRING_AGG(val::VARCHAR, ',') FROM timeseries GROUP BY year ORDER BY year;
create table manycolumns as select i a, i b, i c, i d, i e from range(0,2) tbl(i);
select a, b, c, d, e FROM manycolumns GROUP BY 1, 2, 3, 4, 5;
CREATE TABLE tinyints AS SELECT i::TINYINT::VARCHAR AS t FROM range(-127, 128) tbl(i);
SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT t::TINYINT t1 FROM tinyints GROUP BY t1) tbl(i);
CREATE TABLE smallints AS SELECT i::SMALLINT::VARCHAR AS t FROM range(-32767, 32768) tbl(i);
SELECT COUNT(DISTINCT i), MIN(i), MAX(i), SUM(i) / COUNT(i) FROM (SELECT t::SMALLINT t1 FROM smallints GROUP BY t1) tbl(i);
PRAGMA disable_verification;
create table dates as select date '1992-01-01' + concat(i, ' months')::interval as d from range(100) tbl(i);
select extract(year from d), extract(month from d) from dates group by 1, 2 ORDER BY ALL;
SET default_null_order='nulls_first';
select bool_or(0);
select bool_and(0);
select bool_or(NULL);
select bool_and(NULL);
select bool_or();
select bool_and();
select bool_or(*);
select bool_and(*);
SELECT bool_or(True) FROM range(100);
SELECT bool_and(True) FROM range(100);
SELECT bool_or(True) FROM range(100) tbl(i) WHERE 1=0;
SELECT bool_and(True) FROM range(100) tbl(i) WHERE 1=0;
create table t (d date);
insert into t values (DATE'2021-02-09'-1),(DATE'2021-02-09'+1),(NULL);
select bool_or(d > '2021-02-09') AS or_result,
       bool_and(d > '2021-02-09') AS and_result
from t;
select d,bool_or(d > '2021-02-09') AS or_result,
       bool_and(d > '2021-02-09') AS and_result
from t
group by d
order by d;
select bool_or(d > '2021-02-09') over (partition by d)
    from t order by d;
select bool_and(d > '2021-02-09') over (partition by d)
    from t order by d;
PRAGMA enable_verification;
PRAGMA verify_external;
CREATE TABLE tbl(
	"DATE" DATE,
	"TIMESTAMP" TIMESTAMP,
	"INTEGER" INTEGER,
	"BIGINT" BIGINT,
	"DOUBLE" DOUBLE,
	"VARCHAR" VARCHAR);
INSERT INTO tbl
	SELECT
		DATE '1992-01-02' + INTERVAL ((RANDOM() * 300)::INT) DAYS d,
		TIMESTAMP '1992-01-02 23:20:11' + INTERVAL ((RANDOM() * 300)::INT) DAYS + INTERVAL ((RANDOM() * 60 * 60)::INT) SECONDS ts,
		50 + (RANDOM() * 6000)::INT i,
		10 + (RANDOM() * 899999999)::BIGINT bi,
		1 + RANDOM() * 99 dbl,
		concat(chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), repeat(chr(98 + (RANDOM() * 24)::INT), 29)) str
	FROM
		range(10000);
INSERT INTO tbl VALUES (
	DATE '1992-01-01',
	TIMESTAMP '1992-01-01 23:20:11',
	42,
	0,
	0.5,
	'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
);
INSERT INTO tbl VALUES (
	DATE '1993-01-01',
	TIMESTAMP '1993-01-01 23:20:11',
	8400,
	999999999,
	100.5,
	'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
);
SELECT arg_min("VARCHAR", "DATE") FROM tbl;
SELECT arg_min("DATE", "VARCHAR") FROM tbl EXCEPT SELECT MIN("DATE") FROM tbl;
SELECT arg_max("VARCHAR", "DATE") FROM tbl;
SELECT arg_max("DATE", "VARCHAR") FROM tbl EXCEPT SELECT MAX("DATE") FROM tbl;
SELECT arg_min("VARCHAR", "TIMESTAMP") FROM tbl;
SELECT arg_min("TIMESTAMP", "VARCHAR") FROM tbl EXCEPT SELECT MIN("TIMESTAMP") FROM tbl;
SELECT arg_max("VARCHAR", "TIMESTAMP") FROM tbl;
SELECT arg_max("TIMESTAMP", "VARCHAR") FROM tbl EXCEPT SELECT MAX("TIMESTAMP") FROM tbl;
SELECT arg_min("VARCHAR", "INTEGER") FROM tbl;
SELECT arg_min("INTEGER", "VARCHAR") FROM tbl EXCEPT SELECT MIN("INTEGER") FROM tbl;
SELECT arg_max("VARCHAR", "INTEGER") FROM tbl;
SELECT arg_max("INTEGER", "VARCHAR") FROM tbl EXCEPT SELECT MAX("INTEGER") FROM tbl;
SELECT arg_min("VARCHAR", "BIGINT") FROM tbl;
SELECT arg_min("BIGINT", "VARCHAR") FROM tbl EXCEPT SELECT MIN("BIGINT") FROM tbl;
SELECT arg_max("VARCHAR", "BIGINT") FROM tbl;
SELECT arg_max("BIGINT", "VARCHAR") FROM tbl EXCEPT SELECT MAX("BIGINT") FROM tbl;
SELECT arg_min("VARCHAR", "VARCHAR") FROM tbl;
SELECT arg_min("VARCHAR", "VARCHAR") FROM tbl EXCEPT SELECT MIN("VARCHAR") FROM tbl;
SELECT arg_max("VARCHAR", "VARCHAR") FROM tbl;
SELECT arg_max("VARCHAR", "VARCHAR") FROM tbl EXCEPT SELECT MAX("VARCHAR") FROM tbl;
PRAGMA enable_verification;
SELECT
    count(*) as total_rows,
    count(*) FILTER (WHERE i <= 5) as lte_five,
    count(*) FILTER (WHERE i % 2 = 1) as odds
FROM generate_series(1,11) tbl(i);
SELECT
    count(*) FILTER (WHERE i % 2 = 1) as odds,
    count(*) FILTER (WHERE i <= 5) as lte_five,
    count(*) as total_rows
FROM generate_series(1,11) tbl(i);
SELECT
    count(*) FILTER (WHERE i <= 5) as lte_five,
    count(*) FILTER (WHERE i % 2 = 1) as odds,
    count(*) as total_rows
FROM generate_series(1,11) tbl(i);
CREATE TABLE issue3105(gender VARCHAR, pay FLOAT);
INSERT INTO issue3105 VALUES
	('male', 100),
	('male', 200),
	('male', 300),
	('female', 150),
	('female', 250);
SELECT
	SUM(pay) FILTER (WHERE gender = 'male'),
	SUM(pay) FILTER (WHERE gender = 'female'),
	SUM(pay)
FROM issue3105;
SELECT
	SUM(pay),
	SUM(pay) FILTER (WHERE gender = 'male'),
	SUM(pay) FILTER (WHERE gender = 'female')
FROM issue3105;
SELECT
	SUM(pay) FILTER (WHERE gender = 'male'),
	SUM(pay),
	SUM(pay) FILTER (WHERE gender = 'female')
FROM issue3105;
SELECT
	SUM(pay) FILTER (gender = 'male'),
	SUM(pay),
	SUM(pay) FILTER (gender = 'female')
FROM issue3105;
PRAGMA enable_verification;
PRAGMA verify_external;
CREATE TABLE test (g INTEGER, i tinyint);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
DROP TABLE test;
CREATE TABLE test (g INTEGER, i smallint);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
DROP TABLE test;
CREATE TABLE test (g INTEGER, i integer);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
DROP TABLE test;
CREATE TABLE test (g INTEGER, i bigint);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
DROP TABLE test;
CREATE TABLE test (g INTEGER, i utinyint);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
DROP TABLE test;
CREATE TABLE test (g INTEGER, i usmallint);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
DROP TABLE test;
CREATE TABLE test (g INTEGER, i uinteger);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
DROP TABLE test;
CREATE TABLE test (g INTEGER, i ubigint);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
DROP TABLE test;
CREATE TABLE test (g INTEGER, i float);
INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
DROP TABLE test;
CREATE TABLE test (g INTEGER, i double);
INSERT INTO test VALUES (1, 2), (1, 3), (2, 4);
SELECT LIST(i) FROM test GROUP BY g ORDER BY g;
DROP TABLE test;
CREATE TABLE varch (g integer, str varchar);
INSERT INTO varch VALUES (1, 'hello'), (1, 'was'), (2, 'geht');
SELECT LIST(str) FROM varch GROUP BY g ORDER BY g;
CREATE TABLE nested_lists (g INTEGER, i INTEGER[]);
INSERT INTO nested_lists VALUES (1, [2]), (1, [3]), (2, [4]);
SELECT LIST(i) FROM nested_lists GROUP BY g ORDER BY g;
CREATE TABLE bigger_lists AS SELECT range % 4 g, range i FROM range(100000);
SELECT list_count(LIST(i)) FROM bigger_lists GROUP BY g ORDER BY g;
CREATE TABLE lists AS SELECT range % 10000 g, range i FROM range(100000);
SELECT list_count(LIST(i)) FROM lists GROUP BY g ORDER BY g LIMIT 2;
CREATE TABLE structs AS SELECT 1 AS g, {'x': 3, 'b': 2} AS s;
INSERT INTO structs VALUES (1, {'x': 5, 'b': 4}), (2, {'x': 50, 'b': 40});
SELECT LIST(s) FROM structs GROUP BY g ORDER BY g;
CREATE TABLE structs_list_strings AS SELECT 1 AS g, {'a': ['strr', 'strrr']} AS s;
INSERT INTO structs_list_strings VALUES (1, {'a': ['str1', 'str2']}), (1, {'a': ['str3', 'str4']}), (2, {'a': ['str1', 'str2']});
SELECT LIST(s) FROM structs_list_strings GROUP BY g ORDER BY g;
CREATE TABLE structs_ints AS SELECT 1 AS g, {'a': [1, 2]} AS s;
INSERT INTO structs_ints VALUES (1, {'a': [3, 4]}), (1, {'a': [5, 6]}), (2, {'a': [1, 2]});
SELECT LIST(s) FROM structs_ints GROUP BY g ORDER BY g;
CREATE TABLE structs_strings AS SELECT 1 AS g, {'n': 'nm1588970'} AS s;
INSERT INTO structs_strings VALUES (1, {'n': 'nm0005690'});
SELECT LIST(s) FROM structs_strings GROUP BY g ORDER BY g;
SELECT tconst, list(principals) as principals FROM parquet_scan('data/parquet-testing/bug3734.parquet') GROUP BY 1 limit 10;
CREATE TABLE t1 AS SELECT bool AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(bool)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT tinyint AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(tinyint)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT smallint AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(smallint)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT int AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(int)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT bigint AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(bigint)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT hugeint AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(hugeint)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT uhugeint AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(uhugeint)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT utinyint AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(utinyint)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT usmallint AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(usmallint)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT uint AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(uint)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT ubigint AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(ubigint)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT date AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(date)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT time AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(time)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT timestamp AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(timestamp)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT timestamp_s AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(timestamp_s)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT timestamp_ms AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(timestamp_ms)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT timestamp_ns AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(timestamp_ns)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT time_tz AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(time_tz)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT timestamp_tz AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(timestamp_tz)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT float AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(float)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT double AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(double)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT dec_4_1 AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(dec_4_1)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT dec_9_4 AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(dec_9_4)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT dec_18_6 AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(dec_18_6)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT dec38_10 AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(dec38_10)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT uuid AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(uuid)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT interval AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(interval)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT varchar AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(varchar)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT blob AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(blob)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT small_enum AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(small_enum)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT medium_enum AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(medium_enum)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT large_enum AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(large_enum)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT int_array AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(int_array)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT double_array AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(double_array)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT date_array AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(date_array)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT timestamp_array AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(timestamp_array)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT timestamptz_array AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(timestamptz_array)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT varchar_array AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(varchar_array)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT nested_int_array AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(nested_int_array)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT struct AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(struct)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT struct_of_arrays AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(struct_of_arrays)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT array_of_structs AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(array_of_structs)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE t1 AS SELECT map AS c1 FROM test_all_types();
CREATE TABLE t2 AS SELECT UNNEST(LIST(map)) AS c2 FROM test_all_types();
SELECT * FROM t1 EXCEPT SELECT * FROM t2;
SELECT * FROM t2 EXCEPT SELECT * FROM t1;
SELECT t1.c1 IS NOT DISTINCT FROM t2.c2 
FROM t1, t2 
WHERE t1.rowid = t2.rowid;
DROP TABLE t1;
DROP TABLE t2;
CREATE TABLE long_str AS SELECT range % 4 g, repeat(range::VARCHAR, 10000) i FROM range (10);
SELECT g, list_count(LIST(i)) FROM long_str GROUP BY g ORDER BY g;
SELECT LIST(i) OVER (PARTITION BY i % 10 ORDER BY i) FROM range(10000) t(i);
CREATE TABLE list_extract_test(i INTEGER, g INTEGER);
INSERT INTO list_extract_test VALUES (1, 1), (2, 1), (3, 2), (NULL, 3), (42, 3);
SELECT g, LIST(i ORDER BY i ASC) FILTER (WHERE i <> 3) FROM list_extract_test GROUP BY g ORDER BY ALL;
SELECT COUNT(*), COUNT(1), COUNT(100), COUNT(NULL), COUNT(DISTINCT 1);
CREATE TABLE integers(i INTEGER);
INSERT INTO integers VALUES (1), (2), (NULL);
SELECT COUNT(*), COUNT(1), COUNT(i), COUNT(COALESCE(i, 1)), COUNT(DISTINCT i), COUNT(DISTINCT 1) FROM integers;
SELECT COUNT(1 ORDER BY 1);
SELECT COUNT(DISTINCT *) FROM integers;
SET default_null_order='nulls_first';
PRAGMA enable_verification;
PRAGMA threads=1;
CREATE TABLE list_extract_test(i INTEGER, g INTEGER);
INSERT INTO list_extract_test VALUES (1, 1), (2, 1), (3, 2), (NULL, 3), (42, 3);
SELECT g, LIST_EXTRACT(LIST(i), 1) FROM list_extract_test GROUP BY g ORDER BY ALL;
SELECT g, LIST_EXTRACT(LIST(i), 2) FROM list_extract_test GROUP BY g ORDER BY ALL;
SELECT g, LIST_EXTRACT(LIST(i), 3) FROM list_extract_test GROUP BY g ORDER BY ALL;
PRAGMA threads=4;
with t as (
  values ('a',1), ('c',3), ('b',2)
)
select list(col0 order by col1) from t;
SELECT g, LIST(i ORDER BY i ASC) FROM list_extract_test GROUP BY g ORDER BY ALL;
SELECT g, LIST(i ORDER BY i ASC NULLS FIRST) FROM list_extract_test GROUP BY g ORDER BY ALL;
SELECT g, LIST(i ORDER BY i ASC NULLS LAST) FROM list_extract_test GROUP BY g ORDER BY ALL;
SELECT g, LIST(i ORDER BY i DESC) FROM list_extract_test GROUP BY g ORDER BY ALL;
SELECT g, LIST(i ORDER BY i DESC NULLS FIRST) FROM list_extract_test GROUP BY g ORDER BY ALL;
SELECT g, LIST(i ORDER BY i DESC NULLS LAST) FROM list_extract_test GROUP BY g ORDER BY ALL;
SELECT g, LIST(i ORDER BY i ASC) FILTER (WHERE i <> 3) FROM list_extract_test GROUP BY g ORDER BY ALL;
SELECT g, LIST(i ORDER BY i ASC) FILTER (WHERE i IS NULL) FROM list_extract_test GROUP BY g ORDER BY ALL;
SELECT g, LIST(i ORDER BY i ASC) FILTER (WHERE i = 1337) FROM list_extract_test GROUP BY g ORDER BY ALL;
CREATE TABLE test_realloc AS (SELECT range % 4 g, list(range || 'some_string_longer_than_12') l FROM range(500000) GROUP BY range % 4);
PRAGMA enable_verification;
PRAGMA verify_external;
SELECT SETSEED(0.8675309);
CREATE TABLE tbl(
	"DATE" DATE,
	"TIMESTAMP" TIMESTAMP,
	"INTEGER" INTEGER,
	"BIGINT" BIGINT,
	"DOUBLE" DOUBLE,
	"VARCHAR" VARCHAR);
INSERT INTO tbl
	SELECT
		DATE '1992-01-02' + INTERVAL ((RANDOM() * 300)::INT) DAYS d,
		TIMESTAMP '1992-01-02 23:20:11' + INTERVAL ((RANDOM() * 300)::INT) DAYS + INTERVAL ((RANDOM() * 60 * 60)::INT) SECONDS ts,
		50 + (RANDOM() * 6000)::INT i,
		10 + (RANDOM() * 899999999)::BIGINT bi,
		1 + RANDOM() * 99 dbl,
		concat(chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), repeat(chr(98 + (RANDOM() * 24)::INT), 29)) str
	FROM
		range(10000);
INSERT INTO tbl VALUES (
	DATE '1992-01-01',
	TIMESTAMP '1992-01-01 23:20:11',
	42,
	0,
	0.5,
	'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
);
INSERT INTO tbl VALUES (
	DATE '1993-01-01',
	TIMESTAMP '1993-01-01 23:20:11',
	8400,
	999999999,
	100.5,
	'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
);
SELECT arg_min_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_max_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_min_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_max_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_min_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "VARCHAR")
FROM tbl;
SELECT arg_max_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "VARCHAR")
FROM tbl;
SELECT arg_min_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "DOUBLE")
FROM tbl;
SELECT arg_max_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "DOUBLE")
FROM tbl;
SELECT arg_min_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_max_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_min_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_max_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
INSERT INTO tbl VALUES (
	DATE '1991-01-01',
	TIMESTAMP '1991-01-01 23:20:11',
	41,
	-1,
	0.25,
	NULL
);
SELECT arg_min_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_max_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_min_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_max_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_min_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "VARCHAR")
FROM tbl;
SELECT arg_max_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "VARCHAR")
FROM tbl;
SELECT arg_min_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "DOUBLE")
FROM tbl;
SELECT arg_max_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "DOUBLE")
FROM tbl;
SELECT arg_min_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_max_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_min_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_max_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
INSERT INTO tbl VALUES (
	DATE '1994-01-01',
	TIMESTAMP '1994-01-01 23:20:11',
	9400,
	9999999999,
	101.5,
	NULL
);
SELECT arg_min_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_max_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_min_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_max_null({d: "DATE", ts: "TIMESTAMP", i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_min_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "VARCHAR")
FROM tbl;
SELECT arg_max_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "VARCHAR")
FROM tbl;
SELECT arg_min_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "DOUBLE")
FROM tbl;
SELECT arg_max_null(["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], "DOUBLE")
FROM tbl;
SELECT arg_min_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_max_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", f: "DOUBLE"}, "VARCHAR")
FROM tbl;
SELECT arg_min_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
SELECT arg_max_null({l: ["DATE", "DATE" + INTERVAL 1 DAY, NULL, "TIMESTAMP"], i: "INTEGER", b: "BIGINT", s: "VARCHAR"}, "DOUBLE")
FROM tbl;
PRAGMA enable_verification;
select sem();
select sem(NULL);
select sem(1);
select sem(*);
create table aggr(k int, v decimal(10,2), v2 decimal(10, 2));
insert into aggr values(1, 10, null),(2, 10, 11), (2, 20, 22), (2, 25, null), (2, 30, 35);
select k, sem(v),sem(v2)  from aggr group by k ORDER BY ALL;
select  sem(v),sem(v2) from aggr;
select k, sem(v) over (partition by k)
from aggr
order by all;
SET threads=8;
CREATE TABLE big_tbl AS SELECT i, concat('thisisalongstring', i) as str FROM range(10000000) t(i);
SELECT i, str, COUNT(*) FROM big_tbl GROUP BY ALL LIMIT 10;
SELECT i, str, COUNT(*) FROM big_tbl GROUP BY ALL LIMIT 10;
SELECT i, str, COUNT(*) FROM big_tbl GROUP BY ALL LIMIT 10;
SELECT i, str, COUNT(*) FROM big_tbl GROUP BY ALL LIMIT 10;
SELECT i, str, COUNT(*) FROM big_tbl GROUP BY ALL LIMIT 10;
SELECT i, str, COUNT(*) FROM big_tbl GROUP BY ALL LIMIT 10;
SELECT i, str, COUNT(*) FROM big_tbl GROUP BY ALL LIMIT 10;
SELECT i, str, COUNT(*) FROM big_tbl GROUP BY ALL LIMIT 10;
SELECT i, str, COUNT(*) FROM big_tbl GROUP BY ALL LIMIT 10;
SELECT i, str, COUNT(*) FROM big_tbl GROUP BY ALL LIMIT 10;
SELECT BIT_AND(3), BIT_AND(NULL);
CREATE SEQUENCE seq;
SELECT BIT_AND(nextval('seq'));
SELECT BIT_AND(nextval('seq'));
CREATE TABLE integers(i INTEGER);
INSERT INTO integers VALUES (3), (7), (15), (31), (3), (15);
SELECT BIT_AND(i), BIT_AND(1), BIT_AND(DISTINCT i), BIT_AND(NULL) FROM integers;
SELECT BIT_AND(i) FROM integers WHERE i > 100;
SELECT BIT_AND();
SELECT BIT_AND(1, 2, 3);
SELECT BIT_AND(BIT_AND(1));
CREATE TABLE bits(b BIT);
INSERT INTO bits VALUES ('1110101011'), ('0111010101'), ('0101011101'), ('1111111111'), ('0100010011'), ('1100110011');
SELECT BIT_AND(b) FROM bits;
SELECT BIT_AND(b) FROM bits WHERE get_bit(b, 2) = 1;
SELECT BIT_AND('010110'::BIT);
PRAGMA enable_verification;
PRAGMA verify_external;
SELECT SETSEED(0.8675309);
create table quantile as select range r, random() from range(10000) union all values (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) order by 2;
SELECT return_type, count(*) AS defined
FROM duckdb_functions()
WHERE function_name = 'reservoir_quantile'
GROUP BY ALL
HAVING defined <> 2
ORDER BY ALL;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.5) as approx_quantile ,quantile(r,0.5) as true_quantile FROM quantile) AS T;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 1.0) as approx_quantile ,quantile(r, 1.0) as true_quantile FROM quantile) AS T;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.0) as approx_quantile ,quantile(r, 0.0) as true_quantile from quantile) AS T;
SELECT approx_quantile(NULL, 0.5)  as approx_quantile ,quantile(NULL, 0.5) as true_quantile;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(42, 0.5)  as approx_quantile ,quantile(42, 0.5)  as true_quantile) AS T;
SELECT approx_quantile(NULL, 0.5)  as approx_quantile ,quantile(NULL, 0.5)  as true_quantile FROM quantile;
SELECT approx_quantile(1, 0.5)  as approx_quantile ,quantile(1, 0.5)  as true_quantile FROM quantile;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(42, 0.5)  as approx_quantile ,quantile(42, 0.5)  as true_quantile) AS T;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.1)  as approx_quantile ,quantile(r, 0.1)  as true_quantile from quantile) AS T;
SELECT CASE
	  WHEN ( approx_quantile between (true_quantile - 100) and (true_quantile + 100) )
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.9)  as approx_quantile ,quantile(r, 0.9)  as true_quantile from quantile) AS T;
SELECT [
	(a[1] BETWEEN (q[1] - 100) AND (q[1] + 100)),
	(a[2] BETWEEN (q[2] - 100) AND (q[2] + 100)),
	(a[3] BETWEEN (q[3] - 100) AND (q[3] + 100)),
	]
FROM (
	SELECT approx_quantile(r, [0.25, 0.5, 0.75]) AS a,
		   quantile(r, [0.25, 0.5, 0.75]) AS q,
	FROM quantile
) tbl;
SELECT [
	(a[1] BETWEEN (q[1] - 100) AND (q[1] + 100)),
	(a[2] BETWEEN (q[2] - 100) AND (q[2] + 100)),
	(a[3] BETWEEN (q[3] - 100) AND (q[3] + 100)),
	]
FROM (
	SELECT reservoir_quantile(r, [0.25, 0.5, 0.75], 4096) AS a,
		   quantile(r, [0.25, 0.5, 0.75]) AS q,
	FROM quantile
) tbl;
SELECT approx_quantile(r, -0.1) FROM quantile;
SELECT approx_quantile(r, 1.1) FROM quantile;
SELECT approx_quantile(r, NULL) FROM quantile;
SELECT approx_quantile(r, r) FROM quantile;
SELECT approx_quantile(r::string, 0.5) FROM quantile;
SELECT approx_quantile(r) FROM quantile;
SELECT approx_quantile(r, 0.1, 0.2) FROM quantile;
pragma threads=4;
PRAGMA verify_parallelism;
SELECT CASE
	  WHEN (approx_quantile between (true_quantile - (sumr * 0.01)) and (true_quantile + (sumr * 0.01)))
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.1) as approx_quantile, quantile(r, 0.1) as true_quantile, SUM(r) as sumr from quantile) AS T;
SELECT CASE
	  WHEN (approx_quantile between (true_quantile - (sumr * 0.01)) and (true_quantile + (sumr * 0.01)))
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.9) as approx_quantile, quantile(r, 0.9) as true_quantile, SUM(r) as sumr from quantile) AS T;
SELECT CASE
	  WHEN (approx_quantile between (true_quantile - (sumr * 0.01)) and (true_quantile + (sumr * 0.01)))
		  THEN TRUE
		  ELSE FALSE
	  END
	  FROM (SELECT approx_quantile(r, 0.5) as approx_quantile, quantile(r, 0.5) as true_quantile, SUM(r) as sumr from quantile) AS T;
PRAGMA disable_verification;
PRAGMA disable_verify_external;
SELECT reservoir_quantile(r, 0.9)  from quantile;
SELECT reservoir_quantile(r, 0.9,1000)  from quantile;
SELECT reservoir_quantile(1, 0.5, 1) FROM quantile;
SELECT RESERVOIR_QUANTILE(b, 0.5)
FROM (SELECT 'a' AS a, 1.0 AS b) y
GROUP BY a;
SELECT APPROX_QUANTILE(b, 0.5)
FROM (
    SELECT 'a' AS a, 1.0 AS b
    UNION ALL SELECT 'a' AS a, 1.0 AS b
    UNION ALL SELECT 'b' AS a, 1.0 AS b
    ) y
GROUP BY a;
SELECT reservoir_quantile(r, r)  from quantile;
SELECT reservoir_quantile(r, NULL)  from quantile;
SELECT reservoir_quantile(r, r, r)  from quantile;
SELECT reservoir_quantile(r, 0.9, NULL)  from quantile;
SELECT reservoir_quantile(r, 0.9, r)  from quantile;
SELECT reservoir_quantile(r, random()::float)  from quantile;
SELECT reservoir_quantile(r, 0.9, random()::float)  from quantile;
PRAGMA enable_verification;
WITH my_data as (
        SELECT 'text1'::varchar(1000) as my_column union all
        SELECT 'text1'::varchar(1000) as my_column union all
        SELECT 'text1'::varchar(1000) as my_column
    )
        SELECT string_agg(my_column,', ') as my_string_agg
        FROM my_data;
WITH my_data as (
        SELECT 1 as dummy,  'text1'::varchar(1000) as my_column union all
        SELECT 1 as dummy,  'text1'::varchar(1000) as my_column union all
        SELECT 1 as dummy,  'text1'::varchar(1000) as my_column
    )
        SELECT string_agg(my_column,', ') as my_string_agg
        FROM my_data
        GROUP BY
            dummy;
SET default_null_order='nulls_first';
SELECT COUNT(1), MIN(1), FIRST(1), LAST(1),MAX(1), SUM(1), STRING_AGG('hello', ',');
SELECT COUNT(NULL), MIN(NULL), FIRST(NULL), LAST(NULL), MAX(NULL), SUM(NULL), STRING_AGG(NULL, NULL);
SELECT FIRST(NULL);
SELECT LAST(NULL);
SELECT NULL as a, NULL as b, 1 as id UNION SELECT CAST('00:00:00' AS TIME) as a, CAST('12:34:56' AS TIME) as b, 2 as id ORDER BY 1;
CREATE TABLE integers(i INTEGER);
INSERT INTO integers VALUES (1), (2), (NULL);
SELECT COUNT(1), MIN(1), FIRST(1), LAST(1), MAX(1), SUM(1), STRING_AGG('hello', ',') FROM integers;
SELECT COUNT(NULL), MIN(NULL), FIRST(NULL), LAST(NULL), MAX(NULL), SUM(NULL), STRING_AGG(NULL, NULL) FROM integers;
SET default_null_order='nulls_first';
SELECT NULL as a, NULL as b, NULL as c, NULL as d, 1 as id UNION SELECT 'Кирилл' as a, 'Müller' as b, '我是谁' as c, 'ASCII' as d, 2 as id ORDER BY 1;
CREATE TABLE test (a INTEGER, s VARCHAR);
INSERT INTO test VALUES (11, 'hello'), (12, 'world'), (11, NULL);
SELECT COUNT(*), COUNT(s) FROM test;
SELECT a, COUNT(*), COUNT(s) FROM test GROUP BY a ORDER BY a;
SELECT s, SUM(a) FROM test GROUP BY s ORDER BY s;
INSERT INTO test VALUES (11, 'hello'), (12, 'world');
SELECT COUNT(*), COUNT(s), COUNT(DISTINCT s) FROM test;
SELECT a, COUNT(*), COUNT(s), COUNT(DISTINCT s) FROM test GROUP BY a ORDER BY a;
SELECT a, COUNT(*), COUNT(s), COUNT(DISTINCT s) FROM test WHERE s IS NOT NULL GROUP BY a ORDER BY a;
CREATE TABLE test_strings(s VARCHAR);
INSERT INTO test_strings VALUES ('aaaaaaaahello'), ('bbbbbbbbbbbbbbbbbbbbhello'), ('ccccccccccccccchello'), ('aaaaaaaaaaaaaaaaaaaaaaaahello');;
SELECT MIN(s), MAX(s) FROM test_strings;
PRAGMA enable_verification;
PRAGMA verify_external;
select argmin();
select argmin(NULL,NULL);
select argmin(1,1);
select argmin(*);
select argmin(i,i) from range (100) tbl(i);
select argmin(i,i) from range (100) tbl(i) where 1 = 0;
select argmax();
select argmax(NULL,NULL);
select argmax(1,1);
select argmax(*);
select argmax(i,i) from range (100) tbl(i);
select argmax(i,i) from range (100) tbl(i) where 1 = 0;
create table args (a integer, b integer);
insert into args values (1,1), (2,2), (8,8), (10,10);
select argmin(a,b), argmax(a,b) from args;
select argmin(a,b), argmax(a,b) from args group by a%2 ORDER BY argmin(a,b);
CREATE TABLE hugeints (z HUGEINT);
insert into hugeints values
	(-168123123123200005565479978461862821890), 
	(-168123123123200005565479978461862821889),
	(-168123123123200005565479978461862821888),
	(-168123123123200005565479978461862821893);
SELECT min(z) - arg_min(z,z) FROM hugeints;
CREATE TABLE blobs (b BYTEA, a BIGINT);
INSERT INTO blobs VALUES('\xaa\xff\xaa',5), ('\xAA\xFF\xAA\xAA\xFF\xAA',30), ('\xAA\xFF\xAA\xAA\xFF\xAA\xAA\xFF\xAA',20);
select argmin(b,a), argmax(b,a)  from blobs ;
select argmin(a,b), argmax(a,b)  from blobs;
select argmin(a,b) over ( partition by a%2) from args;
select argmax(a,b) over ( partition by a%2) from args;
create table names (name string, salary integer);
insert into names values ('Pedro',10), ('Hannes',20), ('Mark',15), ('Hubert-Blaine-Wolfeschlegelsteinhausenbergerdorff',30);
select argmin(name,salary),argmax(name,salary)  from names;
select argmin(salary,name),argmax(salary,name)  from names;
select min_by(name,salary),max_by(name,salary)  from names;
select arg_min(name,salary),arg_max(name,salary)  from names;
CREATE TABLE integer(i INTEGER, j INTEGER);
INSERT INTO integer VALUES (3, 4), (3, 5), (3, 7);
SELECT j * 2 FROM integer GROUP BY j * 2 ORDER BY j * 2;
SELECT integer.j * 2 FROM integer GROUP BY j * 2 ORDER BY j * 2;
SELECT j * 2 FROM integer GROUP BY integer.j * 2 ORDER BY j * 2;
SELECT j * 2 FROM integer GROUP BY j * 2 ORDER BY integer.j * 2;
SELECT integer.j * 2 FROM integer GROUP BY j * 2 ORDER BY integer.j * 2;
SELECT j * 2 FROM integer GROUP BY integer.j * 2 ORDER BY integer.j * 2;
SELECT integer.j * 2 FROM integer GROUP BY integer.j * 2 ORDER BY j * 2;
SELECT integer.j * 2 FROM integer GROUP BY integer.j * 2 ORDER BY integer.j * 2;
SELECT j * 2 AS i FROM integer GROUP BY j * 2 ORDER BY i;
SELECT COVAR_POP();
SELECT COVAR_POP(1, 2, 3);
SELECT COVAR_POP(COVAR_POP(1));
SELECT COVAR_SAMP();
SELECT COVAR_SAMP(1, 2, 3);
SELECT COVAR_SAMP(COVAR_SAMP(1));
SELECT COVAR_POP(3,3), COVAR_POP(NULL,3), COVAR_POP(3,NULL), COVAR_POP(NULL,NULL);
SELECT COVAR_SAMP(3,3), COVAR_SAMP(NULL,3), COVAR_SAMP(3,NULL), COVAR_SAMP(NULL,NULL);
CREATE SEQUENCE seqx;
CREATE SEQUENCE seqy;
SELECT COVAR_POP(nextval('seqx'),nextval('seqy'));
SELECT COVAR_POP(nextval('seqx'),nextval('seqy'));
CREATE TABLE integers(x INTEGER, y INTEGER);
INSERT INTO integers VALUES (10,NULL), (10,11), (20,22), (25,NULL), (30,35);
SELECT COVAR_POP(x,y), COVAR_POP(x,1), COVAR_POP(1,y), COVAR_POP(x,NULL), COVAR_POP(NULL,y) FROM integers;
SELECT COVAR_SAMP(x,y), COVAR_SAMP(x,1), COVAR_SAMP(1,y), COVAR_SAMP(x,NULL), COVAR_SAMP(NULL,y) FROM integers;
SELECT COVAR_POP(x,y), COVAR_SAMP(x,y) FROM integers WHERE x > 100;
SELECT COVAR_POP(NULL, NULL), COVAR_SAMP(NULL, NULL) FROM integers;
PRAGMA enable_verification;
PRAGMA verify_external;
create table lists as select array[i] l from generate_series(0,5,1) tbl(i);
select min(l) from lists where l[1]>2;
select min(l) from lists where l[0]>2;
PRAGMA enable_verification;
PRAGMA verify_external;
select arg_min_null();
select arg_min_null(NULL,NULL);
select arg_min_null(1,1);
select arg_min_null(*);
select arg_min_null(i,i) from range (100) tbl(i);
select arg_min_null(i,i) from range (100) tbl(i) where 1 = 0;
select arg_max_null();
select arg_max_null(NULL,NULL);
select arg_max_null(1,1);
select arg_max_null(*);
select arg_max_null(i,i) from range (100) tbl(i);
select arg_max_null(i,i) from range (100) tbl(i) where 1 = 0;
create table args (a integer, b integer);
insert into args values (1,1), (2,2), (8,8), (10,10);
select arg_min_null(a,b), arg_max_null(a,b) from args;
select arg_min_null(a,b), arg_max_null(a,b) from args group by a%2 ORDER BY arg_min_null(a,b);
insert into args values (NULL, 0), (NULL, 12);
select arg_min_null(a,b), arg_max_null(a,b) from args;
select arg_min_null(a,b), arg_max_null(a,b) from args group by a%2 ORDER BY arg_min_null(a,b);
CREATE TABLE blobs (b BYTEA, a BIGINT);
INSERT INTO blobs VALUES('\xaa\xff\xaa',5), ('\xAA\xFF\xAA\xAA\xFF\xAA',30), ('\xAA\xFF\xAA\xAA\xFF\xAA\xAA\xFF\xAA',20);
select arg_min_null(b,a), arg_max_null(b,a)  from blobs ;
select arg_min_null(a,b), arg_max_null(a,b)  from blobs;
select arg_min_null(a,b) over ( partition by a%2) from args;
select arg_max_null(a,b) over ( partition by a%2) from args;
create table names (name string, salary integer);
insert into names values ('Pedro',10), ('Hannes',20), ('Mark',15), ('Hubert-Blaine-Wolfeschlegelsteinhausenbergerdorff',30);
select arg_min_null(name,salary),arg_max_null(name,salary)  from names;
select arg_min_null(salary,name),arg_max_null(salary,name)  from names;
PRAGMA enable_verification;
select skewness();
select skewness(NULL);
select skewness(1);
select skewness(*);
select skewness (10) from range (5);
select skewness (10) from range (5) where 1 == 0;
select skewness(i) from (values (-2e307), (0), (2e307)) tbl(i);
create table aggr(k int, v decimal(10,2), v2 decimal(10, 2));
insert into aggr values
    (1, 10, null),
    (2, 10, 11),
    (2, 10, 15),
    (2, 10, 18),
    (2, 20, 22),
    (2, 20, 25),
    (2, 25, null),
    (2, 30, 35),
    (2, 30, 40),
    (2, 30, 50),
    (2, 30, 51);
select skewness(k), skewness(v), skewness(v2) from aggr;
select skewness(v2) from aggr group by v ORDER BY ALL;
select skewness(v2) over (partition by v)
    from aggr order by v;
SELECT COUNT(1, 2, 3);
SELECT COUNT(COUNT(1));
SELECT STDDEV_SAMP();
SELECT STDDEV_SAMP(1, 2, 3);
SELECT STDDEV_SAMP(STDDEV_SAMP(1));
SELECT SUM();
SELECT SUM(1, 2, 3);
SELECT SUM(SUM(1));
SELECT FIRST();
SELECT FIRST(1, 2, 3);
SELECT FIRST(FIRST(1));
SELECT MAX();
SELECT MAX(1, 2, 3);
SELECT MAX(MAX(1));
SELECT MIN();
SELECT MIN(1, 2, 3);
SELECT MIN(MIN(1));
SET default_null_order='nulls_first';
PRAGMA enable_verification;
PRAGMA verify_external;
SELECT STRING_AGG();
SELECT STRING_AGG('a', 'b', 'c');
SELECT STRING_AGG(STRING_AGG('a',','));
SELECT STRING_AGG('a',',');
SELECT STRING_AGG('a',','), STRING_AGG(NULL,','), STRING_AGG('a', NULL), STRING_AGG(NULL,NULL);
CREATE TABLE strings(g INTEGER, x VARCHAR, y VARCHAR);
INSERT INTO strings VALUES (1,'a','/'), (1,'b','-'), (2,'i','/'), (2,NULL,'-'), (2,'j','+'), (3,'p','/'), (4,'x','/'), (4,'y','-'), (4,'z','+');
SELECT STRING_AGG(x,','), STRING_AGG(x,y) FROM strings;
SELECT g, STRING_AGG(x,'|') FROM strings GROUP BY g ORDER BY g;
SELECT STRING_AGG(x,',') FROM strings WHERE g > 100;
SELECT STRING_AGG(1, 2);
SELECT GROUP_CONCAT('a', ',');
SELECT GROUP_CONCAT('a');
SELECT g, GROUP_CONCAT(x) FROM strings GROUP BY g ORDER BY g;
PRAGMA verify_parallelism;
SELECT STRING_AGG(x ORDER BY x ASC), STRING_AGG(x, '|' ORDER BY x ASC) FROM strings;
SELECT STRING_AGG(x ORDER BY x DESC), STRING_AGG(x,'|' ORDER BY x DESC) FROM strings;
SELECT g, STRING_AGG(x ORDER BY x ASC), STRING_AGG(x, '|' ORDER BY x ASC) FROM strings GROUP BY g ORDER BY 1;
SELECT g, STRING_AGG(x ORDER BY x DESC), STRING_AGG(x, '|' ORDER BY x DESC) FROM strings GROUP BY g ORDER BY 1;
SELECT g, STRING_AGG(x, y ORDER BY x ASC) FROM strings GROUP BY g ORDER BY 1;
SELECT g, STRING_AGG(x, y ORDER BY x DESC) FROM strings GROUP BY g ORDER BY 1;
SELECT STRING_AGG(g::VARCHAR, ',' ORDER BY CONCAT(x, y) ASC) FROM strings ORDER BY 1;
SELECT STRING_AGG(g::VARCHAR, ',' ORDER BY x, y) FROM strings ORDER BY 1;
SELECT STRING_AGG(x, ',' ORDER BY x DESC), STRING_AGG(x, ',' ORDER BY x ASC) FROM strings;
SELECT y, STRING_AGG(x, ',' ORDER BY x DESC) FILTER (WHERE g < 3)
FROM strings
GROUP BY y
ORDER BY 1;
SELECT g, STRING_AGG(DISTINCT y, ',' ORDER BY x DESC) FILTER (WHERE g < 4)
FROM strings
GROUP BY g
ORDER BY 1;
CREATE TABLE integers(i INTEGER);
INSERT INTO integers (VALUES (1), (2), (3), (NULL));
SELECT i1.i, (SELECT STRING_AGG(i::VARCHAR, ',' ORDER BY i1.i+i) FROM integers WHERE i<=i1.i) c1
FROM integers i1
ORDER BY 1 NULLS LAST;
PRAGMA enable_verification;
select regr_avgx(NULL,NULL);
select regr_avgx(1,1);
select regr_avgx();
select regr_avgx(*);
select regr_avgy();
select regr_avgy(NULL,NULL);
select regr_avgy(1,1);
select regr_avgy(*);
select regr_count();
select regr_count(NULL,NULL);
select regr_count(1,1);
select regr_count(*);
select regr_slope();
select regr_slope(NULL,NULL);
select regr_slope(1,1);
select regr_slope(*);
select regr_r2();
select regr_r2(NULL,NULL);
select regr_r2(1,1);
select regr_r2(0, 1e230*i) from range(5) tbl(i);
select regr_r2(1e230*i, i) from range(5) tbl(i);
select regr_r2(1e230*i, 0) from range(5) tbl(i);
select regr_r2(0, i) from range(5) tbl(i);
select regr_r2(*);
select regr_sxx();
select regr_sxx(0, 2e230*i) from range(5) tbl(i);
select regr_sxx(2e230*i, 0) from range(5) tbl(i);
select regr_sxx(NULL,NULL);
select regr_sxx(1,1);
select regr_syy();
select regr_syy(NULL,NULL);
select regr_syy(1,1);
select regr_sxy(*);
select regr_sxy();
select regr_sxy(NULL,NULL);
select regr_sxy(1,1);
select regr_syy(*);
select regr_intercept();
select regr_intercept(NULL,NULL);
select regr_intercept(1,1);
select regr_intercept(*);
create  table aggr(k int, v decimal(10,2), v2 decimal(10, 2));
insert into aggr values(1, 10, null), (2, 10, 11), (2, 20, 22), (2, 25, null), (2, 30, 35);
select k, regr_avgx(v, v2) from aggr group by k ORDER BY ALL;
select k, regr_avgy(v, v2) from aggr group by k ORDER BY ALL;
select k, count(*), regr_count(v, v2) from aggr group by k ORDER BY ALL;
select k, regr_slope(v, v2) from aggr group by k ORDER BY ALL;
select k, regr_r2(v, v2) from aggr group by k ORDER BY ALL;
select k, regr_sxx(v, v2) from aggr group by k ORDER BY ALL;
select k, regr_syy(v, v2) from aggr group by k ORDER BY ALL;
select k, regr_sxy(v, v2) from aggr group by k ORDER BY ALL;
select k, regr_intercept(v, v2) from aggr group by k ORDER BY ALL;
select regr_avgx(v, v2) from aggr ;
select  regr_avgy(v, v2) from aggr ;
select  regr_count(v, v2) from aggr ;
select regr_slope(v, v2) from aggr ;
select regr_r2(v, v2) from aggr ;
select  regr_sxx(v, v2) from aggr ;
select regr_syy(v, v2) from aggr ;
select regr_sxy(v, v2) from aggr;
select regr_intercept(v, v2) from aggr;
select  regr_avgx(v, v2) over (partition by k)
    from aggr;
select  regr_avgy(v, v2) over (partition by k)
    from aggr;
select  regr_count(v, v2) over (partition by k)
    from aggr;
select  regr_slope(v, v2) over (partition by k)
    from aggr;
select  regr_r2(v, v2) over (partition by k)
    from aggr;
select  regr_sxx(v, v2) over (partition by k)
    from aggr;
select  regr_syy(v, v2) over (partition by k)
    from aggr;
select  regr_sxy(v, v2) over (partition by k)
    from aggr;
select  regr_intercept(v, v2) over (partition by k)
    from aggr;
CREATE TABLE integers(i INTEGER);
SELECT COUNT(*), COUNT(i), STDDEV_SAMP(i), SUM(i), SUM(DISTINCT i), FIRST(i), LAST(i), MAX(i), MIN(i) FROM integers WHERE i > 100;
CREATE TABLE emptyaggr(i INTEGER);
SELECT COUNT(*) FROM emptyaggr;
SELECT SUM(i), COUNT(i), COUNT(DISTINCT i), COUNT(*), AVG(i), COUNT(*)+1, COUNT(i)+1, MIN(i), MIN(i+1), MIN(i)+1 FROM emptyaggr;
CREATE TABLE strings(s STRING, g INTEGER);
INSERT INTO strings VALUES ('hello', 0), ('world', 1), (NULL, 0), ('r', 1);
SELECT COUNT(*), COUNT(s), MIN(s), MAX(s) FROM strings;
SELECT COUNT(*), COUNT(s), MIN(s), MAX(s) FROM strings WHERE s IS NULL;
SELECT STRING_AGG(s, ' '), STRING_AGG(s, ''), STRING_AGG('', ''), STRING_AGG('hello', ' ') FROM strings;
SELECT g, COUNT(*), COUNT(s), MIN(s), MAX(s), STRING_AGG(s, ' ') FROM strings GROUP BY g ORDER BY g;
SELECT g, COUNT(*), COUNT(s), MIN(s), MAX(s), STRING_AGG(DISTINCT g::VARCHAR ORDER BY g::VARCHAR DESC) FROM strings GROUP BY g ORDER BY g;
SELECT g, COUNT(*), COUNT(s), MIN(s), MAX(s), STRING_AGG(DISTINCT s ORDER BY s ASC) FROM strings GROUP BY g ORDER BY g;
SELECT g, COUNT(*), COUNT(s), MIN(s), MAX(s), STRING_AGG(s, ' ') FROM strings WHERE s IS NULL OR s <> 'hello' GROUP BY g ORDER BY g;
SELECT SUM(s) FROM strings GROUP BY g ORDER BY g;
SELECT AVG(s) FROM strings GROUP BY g ORDER BY g;
CREATE TABLE booleans(b BOOLEAN, g INTEGER);
INSERT INTO booleans VALUES (false, 0), (true, 1), (NULL, 0), (false, 1);
SELECT COUNT(*), COUNT(b), MIN(b), MAX(b) FROM booleans;
SELECT COUNT(*), COUNT(b), MIN(b), MAX(b) FROM booleans WHERE b IS NULL;
SELECT g, COUNT(*), COUNT(b), MIN(b), MAX(b) FROM booleans GROUP BY g ORDER BY g;
SELECT g, COUNT(*), COUNT(b), MIN(b), MAX(b) FROM booleans WHERE b IS NULL OR b=true GROUP BY g ORDER BY g;
SELECT SUM(b) FROM booleans GROUP BY g ORDER BY g;
SELECT AVG(b) FROM booleans GROUP BY g ORDER BY g;
CREATE TABLE integers(i INTEGER, g INTEGER);
INSERT INTO integers VALUES (12, 0), (22, 1), (NULL, 0), (14, 1);
SELECT COUNT(*), COUNT(i), MIN(i), MAX(i), SUM(i) FROM integers;
SELECT COUNT(*), COUNT(i), MIN(i), MAX(i), SUM(i) FROM INTEGERS WHERE i IS NULL;
SELECT g, COUNT(*), COUNT(i), MIN(i), MAX(i), SUM(i) FROM integers GROUP BY g ORDER BY g;
SELECT g, COUNT(*), COUNT(i), MIN(i), MAX(i), SUM(i) FROM integers WHERE i IS NULL OR i > 15 GROUP BY g ORDER BY g;
PRAGMA enable_verification;
select corr();
select corr(NULL,NULL);
select corr(1,1);
select corr(*);
create table aggr(k int, v decimal(10,2), v2 decimal(10, 2));
insert into aggr values(1, 10, null),(2, 10, 11), (2, 20, 22), (2, 25, null), (2, 30, 35);
select k, corr(v, v2) from aggr group by k ORDER BY ALL;
select  corr(v, v2) from aggr;
select  corr(v, v2) over (partition by k)
    from aggr;
SELECT corr(a,b) FROM (values (1e301, 0), (-1e301, 0)) tbl(a,b);
SELECT corr(b,a) FROM (values (1e301, 0), (-1e301, 0)) tbl(a,b);
CREATE TABLE bigints(n HUGEINT);
INSERT INTO bigints (n) VALUES ('9007199254740992'::HUGEINT), (1::HUGEINT), (0::HUGEINT);
SELECT COUNT(), COUNT(1), COUNT(*), COUNT(NULL), COUNT('hello'), COUNT(DATE '1992-02-02');
SELECT COUNT(1, 2);
SELECT SUM(1), SUM(NULL), SUM(33.3);
SELECT SUM(True);
SELECT SUM('hello');
SELECT SUM(DATE '1992-02-02');
SELECT SUM();
SELECT SUM(1, 2);
SELECT MIN(1), MIN(NULL), MIN(33.3), MIN('hello'), MIN(True), MIN(DATE '1992-02-02'), MIN(TIMESTAMP '2008-01-01 00:00:01');
SELECT MIN();
SELECT MIN(1, 2);
SELECT MAX(1), MAX(NULL), MAX(33.3), MAX('hello'), MAX(True), MAX(DATE '1992-02-02'), MAX(TIMESTAMP '2008-01-01 00:00:01');
SELECT MAX();
SELECT MAX(1, 2);
SELECT FIRST(1), FIRST(NULL), FIRST(33.3), FIRST('hello'), FIRST(True), FIRST(DATE '1992-02-02'), FIRST(TIMESTAMP '2008-01-01 00:00:01');
SELECT FIRST();
SELECT FIRST(1, 2);
SELECT LAST(1), LAST(NULL), LAST(33.3), LAST('hello'), LAST(True), LAST(DATE '1992-02-02'), LAST(TIMESTAMP '2008-01-01 00:00:01');
SELECT LAST();
SELECT LAST(1, 2);
SELECT AVG(1), AVG(NULL), AVG(33.3);
SELECT AVG(True);
SELECT AVG('hello');
SELECT AVG(DATE '1992-02-02');
SELECT AVG();
SELECT AVG(1, 2);
SELECT STRING_AGG('hello');
SELECT STRING_AGG('hello', ' '), STRING_AGG('hello', NULL), STRING_AGG(NULL, ' '), STRING_AGG(NULL, NULL), STRING_AGG('', '');
SELECT STRING_AGG();
SELECT STRING_AGG(1, 2, 3);
CREATE TABLE test_val(val INT);
INSERT INTO test_val VALUES(1), (2), (3), (3), (2);
SELECT STRING_AGG(DISTINCT val::VARCHAR ORDER BY val::VARCHAR DESC) from test_val;
SELECT COUNT(NULL), STRING_AGG(DISTINCT val::VARCHAR ORDER BY val::VARCHAR ASC) from test_val;
PRAGMA enable_Verification;
PRAGMA verify_parallelism;
CREATE TABLE strings AS SELECT g, 'hello' x FROM range(0, 10000, 1) t1(g);
SELECT g, STRING_AGG(x, ',') FROM strings GROUP BY g ORDER BY g;
SELECT 1, STRING_AGG(x, ',') FROM strings GROUP BY 1 ORDER BY 1;
SELECT STRING_AGG(k, ','), SUM(CAST(k AS BIGINT)) FROM (SELECT CAST(g AS VARCHAR) FROM strings UNION ALL SELECT CAST(x AS VARCHAR) FROM strings) tbl1(k);
SELECT 1, STRING_AGG(x, ',' ORDER BY g DESC) FROM strings GROUP BY 1 ORDER BY 1;
CREATE TABLE many_strings AS SELECT i id, i::VARCHAR s FROM range(1000000) tbl(i);
SELECT STRING_AGG(s, ',' ORDER BY id DESC)
FROM many_strings
WHERE id%100000=0;
PRAGMA enable_verification;
CREATE TABLE tbl(i INTEGER);
INSERT INTO tbl VALUES (NULL), (2), (3);
SELECT ANY_VALUE(i) AS a FROM tbl;
DROP TABLE tbl;
CREATE TABLE five AS SELECT i::tinyint AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::smallint AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::integer AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::bigint AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::hugeint AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::utinyint AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::usmallint AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::uinteger AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::ubigint AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::uhugeint AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::float AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::double AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::decimal(4,1) AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i::INTEGER % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::decimal(8,1) AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i::INTEGER % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::decimal(12,1) AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i::INTEGER % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::decimal(18,1) AS i FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(i ORDER BY 5-i) FROM five;
SELECT i::INTEGER % 3 AS g, ANY_VALUE(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five_dates AS
        SELECT 1 AS i,
               NULL::DATE AS d,
               NULL::TIMESTAMP AS dt,
               NULL::TIME AS t,
               NULL::INTERVAL AS s
        UNION ALL
	SELECT
		i::integer AS i,
		'2021-08-20'::DATE + i::INTEGER AS d,
		'2021-08-20'::TIMESTAMP + INTERVAL (i) HOUR AS dt,
		'14:59:37'::TIME + INTERVAL (i) MINUTE AS t,
		INTERVAL (i) SECOND AS s
	FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(d), ANY_VALUE(dt), ANY_VALUE(t), ANY_VALUE(s) FROM five_dates;
SELECT i % 3 AS g, ANY_VALUE(d), ANY_VALUE(dt), ANY_VALUE(t), ANY_VALUE(s)
FROM five_dates
GROUP BY 1
ORDER BY 1;
SELECT ANY_VALUE(d ORDER BY 5-i), ANY_VALUE(dt ORDER BY 5-i), ANY_VALUE(t ORDER BY 5-i), ANY_VALUE(s ORDER BY 5-i) FROM five_dates;
SELECT i % 3 AS g, ANY_VALUE(d ORDER BY 5-i), ANY_VALUE(dt ORDER BY 5-i), ANY_VALUE(t ORDER BY 5-i), ANY_VALUE(s ORDER BY 5-i)
FROM five_dates
GROUP BY 1
ORDER BY 1;
SELECT ANY_VALUE(dt::TIMESTAMPTZ), ANY_VALUE(t::TIMETZ) FROM five_dates;
SELECT i % 3 AS g, ANY_VALUE(dt::TIMESTAMPTZ), ANY_VALUE(t::TIMETZ)
FROM five_dates
GROUP BY 1
ORDER BY 1;
SELECT ANY_VALUE(dt::TIMESTAMPTZ ORDER BY 5-i), ANY_VALUE(t::TIMETZ ORDER BY 5-i) FROM five_dates;
SELECT i % 3 AS g, ANY_VALUE(dt::TIMESTAMPTZ ORDER BY 5-i), ANY_VALUE(t::TIMETZ ORDER BY 5-i)
FROM five_dates
GROUP BY 1
ORDER BY 1;
DROP TABLE five_dates;
CREATE TABLE five_complex AS
	SELECT
		1 AS i,
		NULL::VARCHAR AS s,
		NULL::BIGINT[] AS l,
		NULL AS r
        UNION ALL
	SELECT
		i::integer AS i,
		i::VARCHAR AS s,
		[i] AS l,
		{'a': i} AS r
	FROM range(1, 6, 1) t1(i);
SELECT ANY_VALUE(s), ANY_VALUE(l), ANY_VALUE(r)
FROM five_complex;
SELECT i % 3 AS g, ANY_VALUE(s), ANY_VALUE(l), ANY_VALUE(r)
FROM five_complex
GROUP BY 1
ORDER BY 1;
SELECT ANY_VALUE(s ORDER BY 5-i), ANY_VALUE(l ORDER BY 5-i), ANY_VALUE(r ORDER BY 5-i)
FROM five_complex;
SELECT i % 3 AS g, ANY_VALUE(s ORDER BY 5-i), ANY_VALUE(l ORDER BY 5-i), ANY_VALUE(r ORDER BY 5-i)
FROM five_complex
GROUP BY 1
ORDER BY 1;
DROP TABLE five_complex;
SELECT ANY_VALUE(i) OVER () AS a FROM generate_series(1, 5) t(i);
SET default_null_order='nulls_first';
PRAGMA enable_verification;
PRAGMA verify_external;
select mode();
select mode(NULL);
select mode(1);
select mode(*);
create table aggr(k int, v decimal(10,2));
insert into aggr (k, v) values (1, 10), (1, 10), (1, 20), (1, 21);
select mode(v) from aggr;
SELECT mode(2) FROM range(100);
insert into aggr (k, v) values (2, 20),(2, 20), (2, 25), (2, 30);
SELECT CASE
       WHEN ( value = 10 or value = 20)
            THEN TRUE
            ELSE FALSE
       END
       FROM (select mode(v) as value from aggr) AS T;
insert into aggr (k, v) values (3, null);
select k, mode(v)
    from aggr
    group by k
    order by k;
create table names (name string);
insert into names values ('pedro'), ('pedro'), ('pedro'),('hannes'),('hannes'),('mark'),(null);
select mode(name) from names;
select k, v, mode(v) over (partition by k)
    from aggr
    order by k, v;
SELECT mode(i) FROM range(100) tbl(i) WHERE 1=0;
create table dates (k int, v date);
insert into dates values
    (1, '2021-05-02'),
    (1, '2021-05-02'),
    (2, '2021-05-02'),
    (2, '2020-02-29'),
    (2, '2020-02-29'),
    (3, '2004-09-01'),
    (1, null);
select mode(v) from dates;
select k, mode(v) from dates group by k ORDER BY ALL;
select k, v, mode(v) over (partition by k)
    from dates
    order by k, v;
create table times (k int, v time);
insert into times values
    (1, '12:11:49.5'),
    (1, '12:11:49.5'),
    (2, '12:11:49.5'),
    (2, '06:30:00'),
    (2, '06:30:00'),
    (3, '21:15:22'),
    (1, null);
select mode(v) from times;
select k, mode(v) from times group by k ORDER BY ALL;
select k, v, mode(v) over (partition by k)
    from times
    order by k, v;
create table timestamps (k int, v timestamp);
insert into timestamps values
    (1, '2021-05-02 12:11:49.5'),
    (1, '2021-05-02 12:11:49.5'),
    (2, '2021-05-02 12:11:49.5'),
    (2,'2020-02-29 06:30:00'),
    (2,'2020-02-29 06:30:00'),
    (3,'2004-09-01 21:15:22'),
    (1, null);
select mode(v) from timestamps;
select k, mode(v) from timestamps group by k ORDER BY ALL;
select k, v, mode(v) over (partition by k)
    from timestamps
    order by k, v;
create table intervals (k int, v interval);
insert into intervals values
    (1, INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds'),
    (1, INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds'),
    (2, INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds'),
    (2, INTERVAL '2 months 29 days 6 hours 30 minutes'),
    (2, INTERVAL '2 months 29 days 6 hours 30 minutes'),
    (3, INTERVAL '9 months 1 day 21 hours 15 minutes 22 seconds'),
    (1, null);
select mode(v) from intervals;
select k, mode(v) from intervals group by k ORDER BY ALL;
select k, v, mode(v) over (partition by k)
    from intervals
    order by k, v;
create table hugeints (k int, v hugeint);
insert into hugeints values (1, 5), (1, 5), (2, 5), (2, 2), (2, 2), (3, 1), (1, null);
select mode(v) from hugeints;
select k, mode(v) from hugeints group by k ORDER BY ALL;
select k, v, mode(v) over (partition by k)
    from hugeints
    order by k, v;
SELECT MODE(order_occurrences ORDER BY order_occurrences DESC) FROM (
VALUES
	(500, 1),
	(1000, 2),
	(800, 3),
	(1000, 4),
	(500, 5),
	(550, 6),
	(400, 7),
	(200, 8),
	(10, 9)
)items_per_order(order_occurrences, item_count);
CREATE TABLE doubles(n DOUBLE);
INSERT INTO doubles (n) VALUES ('9007199254740992'::DOUBLE), (1::DOUBLE), (1::DOUBLE), (0::DOUBLE);
SELECT FSUM(n)::BIGINT FROM doubles;
SELECT sumKahan(n)::BIGINT FROM doubles;
SELECT kahan_sum(n)::BIGINT FROM doubles;
PRAGMA enable_verification;
CREATE TABLE tbl(a INTEGER, b VARCHAR);
INSERT INTO tbl VALUES (1, NULL), (2, 'thisisalongstring'), (3, 'thisisalsoalongstring');
SELECT ANY_VALUE(b) FROM tbl;
SELECT ANY_VALUE(b) FROM tbl WHERE a=2;
SELECT ANY_VALUE(b) FROM tbl WHERE a=1;
SELECT ANY_VALUE(b) FROM tbl WHERE a=1 GROUP BY a;
SELECT ANY_VALUE(b) FROM tbl WHERE a=0;
SELECT ANY_VALUE(b) FROM tbl WHERE a=0 GROUP BY b;
SELECT a, ANY_VALUE(b) FROM tbl GROUP BY a ORDER BY a;
SELECT ANY_VALUE(i) FROM (VALUES (NULL::INT32)) tbl(i);
SET default_null_order='nulls_first';
PRAGMA enable_verification;
PRAGMA verify_external;
CREATE TABLE quantile as
SELECT range r, random() AS q
FROM range(10000)
UNION ALL VALUES (NULL, 0.1), (NULL, 0.5), (NULL, 0.9)
ORDER BY 2;
SELECT quantile_disc(r, 0.5) FROM quantile;
SELECT quantile_disc(r::decimal(10,2), 0.5) FROM quantile;
SELECT quantile_disc(r, 1.0) FROM quantile;
SELECT quantile_disc(r, 0.0) FROM quantile;
SELECT quantile_disc(NULL, 0.5) FROM quantile;
SELECT quantile_disc(42, 0.5) FROM quantile;
SELECT quantile_disc(NULL, 0.5);
SELECT quantile_disc(42, 0.5);
SELECT quantile_disc(r, 0.1), quantile_disc(r, 0.5), quantile_disc(r, 0.9) from quantile;
SELECT quantile_disc(d::decimal(4,1), 0.1), quantile_disc(d::decimal(4,1), 0.5), quantile_disc(d::decimal(4,1), 0.9)
FROM range(0,100) tbl(d);
SELECT quantile_disc(d::decimal(8,1), 0.1), quantile_disc(d::decimal(8,1), 0.5), quantile_disc(d::decimal(8,1), 0.9)
FROM range(0,100) tbl(d);
SELECT quantile_disc(d::decimal(12,1), 0.1), quantile_disc(d::decimal(12,1), 0.5), quantile_disc(d::decimal(12,1), 0.9)
FROM range(0,100) tbl(d);
SELECT quantile_disc(d::decimal(18,1), 0.1), quantile_disc(d::decimal(18,1), 0.5), quantile_disc(d::decimal(18,1), 0.9)
FROM range(0,100) tbl(d);
SELECT quantile_disc(d::decimal(24,1), 0.1), quantile_disc(d::decimal(24,1), 0.5), quantile_disc(d::decimal(24,1), 0.9)
FROM range(0,100) tbl(d);
SELECT quantile_disc(col, -0.5)
FROM VALUES (11000), (3100), (2900), (2800), (2600), (2500) AS tab(col);
SELECT 
    percentile_disc(0.8) WITHIN GROUP (ORDER BY x DESC),
    quantile_disc(x, 0.8 ORDER BY x DESC),
FROM 
    (VALUES (2), (1)) _(x);
SELECT quantile_disc(d::VARCHAR, 0.1), quantile_disc(d::VARCHAR, 0.5), quantile_disc(d::VARCHAR, 0.9)
FROM range(0,100) tbl(d);
SELECT quantile_disc(NULL::VARCHAR, 0.1)
FROM range(0,100) tbl(d);
SELECT quantile_disc('prefix-' || d::VARCHAR || '-suffix', 0.1)
FROM range(0,100) tbl(d);
SELECT median(d::VARCHAR)
FROM range(0,100) tbl(d);
SELECT median(d::VARCHAR)
FROM range(0,100) tbl(d)
WHERE d > 100;
SELECT mod(r,10) as g, quantile_disc(r, 0.1) FROM quantile GROUP BY 1 ORDER BY 1;
SELECT quantile_disc('2021-01-01'::TIMESTAMP + interval (r) hour, 0.5) FROM quantile;
SELECT quantile_disc('1990-01-01'::DATE + interval (r) day, 0.5) FROM quantile;
SELECT quantile_disc('00:00:00'::TIME + interval (r) second, 0.5) FROM quantile;
SELECT quantile_disc(interval (r) second, 0.5) FROM quantile;
SELECT quantile_disc(('2021-01-01'::TIMESTAMP + interval (r) hour)::TIMESTAMPTZ, 0.5) FROM quantile;
SELECT quantile_disc(1, 0.1) FROM quantile;
SELECT quantile_disc(r, 0.1) FROM quantile WHERE 1=0;
SELECT quantile_disc(r, -1.1) FROM quantile;
SELECT quantile_disc(r, 1.1) FROM quantile;
SELECT quantile_disc(r, "string") FROM quantile;
SELECT quantile_disc(r, NULL) FROM quantile;
SELECT quantile_disc(r) FROM quantile;
SELECT quantile_disc(r, 0.1, 50) FROM quantile;
SELECT quantile_cont(r, q) FROM quantile;
pragma threads=4;
PRAGMA verify_parallelism;
SELECT quantile_disc(r, 0.1), quantile_disc(r, 0.5), quantile_disc(r, 0.9) from quantile;
SELECT mod(r,10) as g, quantile_disc(r, 0.1) FROM quantile GROUP BY 1 ORDER BY 1;
SELECT quantile_disc(1, 0.1) FROM quantile;
SELECT quantile_disc(r, 0.1) FROM quantile WHERE 1=0;
PRAGMA enable_verification;
create table tmp (c0 integer, c1 integer);
insert into tmp values
(0,	0),
(1,	1),
(2,	0),
(0,	1),
(1,	0),
(2,	1),
(0,	0),
(1,	1),
(2,	0),
(0,	1);
SELECT c0, histogram(c1) FROM tmp GROUP BY c0 ORDER BY ALL;
CREATE TABLE integers(i INTEGER);
INSERT INTO integers SELECT * FROM range(0, 1000, 1);
SELECT SUM(i) FROM integers;
INSERT INTO integers SELECT * FROM range(0, -1000, -1);
SELECT SUM(i) FROM integers;
INSERT INTO integers SELECT * FROM range(0, -1000, -1);
SELECT SUM(i) FROM integers;
SELECT SUM(1) FROM integers;
SELECT SUM(-1) FROM integers;
SELECT SUM(-1) FROM integers WHERE i=-1;
SELECT SUM(-1) FROM integers WHERE i>10000;
CREATE TABLE bigints(b BIGINT);
INSERT INTO bigints SELECT * FROM range(4611686018427387904, 4611686018427388904, 1);
SELECT SUM(b) FROM bigints;
SELECT SUM(b)::BIGINT FROM bigints;
CREATE TABLE doubles(n DOUBLE);
INSERT INTO doubles (n) VALUES ('9007199254740992'::DOUBLE), (1::DOUBLE), (1::DOUBLE), (0::DOUBLE);
SELECT sum(n ORDER BY ABS(n))::BIGINT FROM doubles;
SELECT (sum(n) WITHIN GROUP(ORDER BY ABS(n)))::BIGINT FROM doubles;
PRAGMA enable_verification;
PRAGMA verify_external;
CREATE TABLE tbl(
	"DATE" DATE,
	"TIMESTAMP" TIMESTAMP,
	"INTEGER" INTEGER,
	"BIGINT" BIGINT,
	"DOUBLE" DOUBLE,
	"VARCHAR" VARCHAR
	);
INSERT INTO tbl
	SELECT
		DATE '1992-01-02' + INTERVAL ((RANDOM() * 300)::INT) DAYS d,
		TIMESTAMP '1992-01-02 23:20:11' + INTERVAL ((RANDOM() * 300)::INT) DAYS + INTERVAL ((RANDOM() * 60 * 60)::INT) SECONDS ts,
		50 + (RANDOM() * 6000)::INT i,
		10 + (RANDOM() * 899999999)::BIGINT bi,
		1 + RANDOM() * 99 dbl,
		concat(chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), chr(98 + (RANDOM() * 24)::INT), repeat(chr(98 + (RANDOM() * 24)::INT), 29)) str
	FROM
		range(10000);
INSERT INTO tbl VALUES (
	DATE '1992-01-01',
	TIMESTAMP '1992-01-01 23:20:11',
	42,
	0,
	0.5,
	'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
);
INSERT INTO tbl VALUES (
	DATE '1993-01-01',
	TIMESTAMP '1993-01-01 23:20:11',
	8400,
	999999999,
	100.5,
	'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'
);
SELECT arg_min_null("VARCHAR", "DATE") FROM tbl;
SELECT arg_min_null("DATE", "VARCHAR") FROM tbl EXCEPT SELECT MIN("DATE") FROM tbl;
SELECT arg_max_null("VARCHAR", "DATE") FROM tbl;
SELECT arg_max_null("DATE", "VARCHAR") FROM tbl EXCEPT SELECT MAX("DATE") FROM tbl;
SELECT arg_min_null("VARCHAR", "TIMESTAMP") FROM tbl;
SELECT arg_min_null("TIMESTAMP", "VARCHAR") FROM tbl EXCEPT SELECT MIN("TIMESTAMP") FROM tbl;
SELECT arg_max_null("VARCHAR", "TIMESTAMP") FROM tbl;
SELECT arg_max_null("TIMESTAMP", "VARCHAR") FROM tbl EXCEPT SELECT MAX("TIMESTAMP") FROM tbl;
SELECT arg_min_null("VARCHAR", "INTEGER") FROM tbl;
SELECT arg_min_null("INTEGER", "VARCHAR") FROM tbl EXCEPT SELECT MIN("INTEGER") FROM tbl;
SELECT arg_max_null("VARCHAR", "INTEGER") FROM tbl;
SELECT arg_max_null("INTEGER", "VARCHAR") FROM tbl EXCEPT SELECT MAX("INTEGER") FROM tbl;
SELECT arg_min_null("VARCHAR", "BIGINT") FROM tbl;
SELECT arg_min_null("BIGINT", "VARCHAR") FROM tbl EXCEPT SELECT MIN("BIGINT") FROM tbl;
SELECT arg_max_null("VARCHAR", "BIGINT") FROM tbl;
SELECT arg_max_null("BIGINT", "VARCHAR") FROM tbl EXCEPT SELECT MAX("BIGINT") FROM tbl;
SELECT arg_min_null("VARCHAR", "VARCHAR") FROM tbl;
SELECT arg_min_null("VARCHAR", "VARCHAR") FROM tbl EXCEPT SELECT MIN("VARCHAR") FROM tbl;
SELECT arg_max_null("VARCHAR", "VARCHAR") FROM tbl;
SELECT arg_max_null("VARCHAR", "VARCHAR") FROM tbl EXCEPT SELECT MAX("VARCHAR") FROM tbl;
INSERT INTO tbl VALUES (
	DATE '1991-01-01',
	TIMESTAMP '1991-01-01 23:20:11',
	41,
	-1,
	0.25,
	NULL
);
SELECT arg_min_null("VARCHAR", "DATE") FROM tbl;
SELECT arg_max_null("VARCHAR", "DATE") FROM tbl;
SELECT arg_min_null("VARCHAR", "TIMESTAMP") FROM tbl;
SELECT arg_max_null("VARCHAR", "TIMESTAMP") FROM tbl;
SELECT arg_min_null("VARCHAR", "INTEGER") FROM tbl;
SELECT arg_max_null("VARCHAR", "INTEGER") FROM tbl;
SELECT arg_min_null("VARCHAR", "BIGINT") FROM tbl;
SELECT arg_max_null("VARCHAR", "BIGINT") FROM tbl;
INSERT INTO tbl VALUES (
	DATE '1994-01-01',
	TIMESTAMP '1994-01-01 23:20:11',
	9400,
	9999999999,
	101.5,
	NULL
);
SELECT arg_min_null("VARCHAR", "DATE") FROM tbl;
SELECT arg_max_null("VARCHAR", "DATE") FROM tbl;
SELECT arg_min_null("VARCHAR", "TIMESTAMP") FROM tbl;
SELECT arg_max_null("VARCHAR", "TIMESTAMP") FROM tbl;
SELECT arg_min_null("VARCHAR", "INTEGER") FROM tbl;
SELECT arg_max_null("VARCHAR", "INTEGER") FROM tbl;
SELECT arg_min_null("VARCHAR", "BIGINT") FROM tbl;
SELECT arg_max_null("VARCHAR", "BIGINT") FROM tbl;
SET default_null_order='nulls_first';
PRAGMA enable_verification;
CREATE TABLE t1(c0 BIGINT, c1 SMALLINT);
INSERT INTO t1 VALUES(NULL,NULL);
INSERT INTO t1 VALUES(NULL,NULL);
INSERT INTO t1 VALUES(NULL,NULL);
INSERT INTO t1 VALUES(NULL,NULL);
INSERT INTO t1 VALUES(NULL,NULL);
INSERT INTO t1 VALUES(NULL,NULL);
INSERT INTO t1 VALUES(NULL,NULL);
INSERT INTO t1 VALUES(NULL,NULL);
INSERT INTO t1 VALUES(-9121942514766415310,NULL);
INSERT INTO t1 VALUES(-9113483941634330359,NULL);
INSERT INTO t1 VALUES(-8718457747090493475,NULL);
INSERT INTO t1 VALUES(-7650527153348320600,NULL);
INSERT INTO t1 VALUES(-7511073704802549520,NULL);
INSERT INTO t1 VALUES(-7342137292157212364,NULL);
INSERT INTO t1 VALUES(-7003121677824953185,NULL);
INSERT INTO t1 VALUES(-6971852266038069200,NULL);
INSERT INTO t1 VALUES(-6873545755554765972,NULL);
INSERT INTO t1 VALUES(-6355311124878824053,NULL);
INSERT INTO t1 VALUES(-6350463272352412486,NULL);
INSERT INTO t1 VALUES(-5908442705000090253,NULL);
INSERT INTO t1 VALUES(-5897662788702027960,NULL);
INSERT INTO t1 VALUES(-5877879044803815845,NULL);
INSERT INTO t1 VALUES(-5732980609151508408,NULL);
INSERT INTO t1 VALUES(-5361272612100082873,NULL);
INSERT INTO t1 VALUES(-5336571579832669145,NULL);
INSERT INTO t1 VALUES(-4928993529687100359,NULL);
INSERT INTO t1 VALUES(-4468905900574568755,NULL);
INSERT INTO t1 VALUES(-4170492860397664351,NULL);
INSERT INTO t1 VALUES(-3684174996218175685,NULL);
INSERT INTO t1 VALUES(-3550425917959859111,NULL);
INSERT INTO t1 VALUES(-3538537641982313134,NULL);
INSERT INTO t1 VALUES(-3509778083052175642,NULL);
INSERT INTO t1 VALUES(-3297429447844697659,NULL);
INSERT INTO t1 VALUES(-3285304895013369375,NULL);
INSERT INTO t1 VALUES(-2783073089603195828,NULL);
INSERT INTO t1 VALUES(-2422155131602272083,NULL);
INSERT INTO t1 VALUES(-2411133157184452856,NULL);
INSERT INTO t1 VALUES(-2353272908390735004,NULL);
INSERT INTO t1 VALUES(-2242558770815087701,NULL);
INSERT INTO t1 VALUES(-1554405226393925625,NULL);
INSERT INTO t1 VALUES(-1337520990873830579,NULL);
INSERT INTO t1 VALUES(-1217288122333132479,NULL);
INSERT INTO t1 VALUES(-829779308050048379,NULL);
INSERT INTO t1 VALUES(-783860634233596188,NULL);
INSERT INTO t1 VALUES(-750940733896551510,NULL);
INSERT INTO t1 VALUES(-595923232719547231,NULL);
INSERT INTO t1 VALUES(-542467477806120649,NULL);
INSERT INTO t1 VALUES(-424237581585430344,NULL);
INSERT INTO t1 VALUES(-214362279664766533,NULL);
INSERT INTO t1 VALUES(-71301914094672848,NULL);
INSERT INTO t1 VALUES(85486376371946746,NULL);
INSERT INTO t1 VALUES(88239714065746993,NULL);
INSERT INTO t1 VALUES(587212336705139504,NULL);
INSERT INTO t1 VALUES(672222439154311688,NULL);
INSERT INTO t1 VALUES(831201880315087268,NULL);
INSERT INTO t1 VALUES(995204053540447006,NULL);
INSERT INTO t1 VALUES(1246914698489704287,NULL);
INSERT INTO t1 VALUES(1546231510864932275,NULL);
INSERT INTO t1 VALUES(1791765016181687769,NULL);
INSERT INTO t1 VALUES(1799302827895858725,NULL);
INSERT INTO t1 VALUES(2026591599286391832,NULL);
INSERT INTO t1 VALUES(2195119737828970803,NULL);
INSERT INTO t1 VALUES(2342493223442167775,NULL);
INSERT INTO t1 VALUES(2453343748991321803,NULL);
INSERT INTO t1 VALUES(2499109626526694126,NULL);
INSERT INTO t1 VALUES(2753988324592681474,NULL);
INSERT INTO t1 VALUES(2810878285747130284,NULL);
INSERT INTO t1 VALUES(2848885963459816804,NULL);
INSERT INTO t1 VALUES(2915647809434477614,NULL);
INSERT INTO t1 VALUES(3475034101394730335,NULL);
INSERT INTO t1 VALUES(3626542162137919338,NULL);
INSERT INTO t1 VALUES(3877673001272535186,NULL);
INSERT INTO t1 VALUES(4007330825134180665,NULL);
INSERT INTO t1 VALUES(4077358421272316858,NULL);
INSERT INTO t1 VALUES(4690678276679226532,NULL);
INSERT INTO t1 VALUES(4866304904348119643,NULL);
INSERT INTO t1 VALUES(5214401850561094529,NULL);
INSERT INTO t1 VALUES(5272799208960207736,NULL);
INSERT INTO t1 VALUES(5530918740051863299,NULL);
INSERT INTO t1 VALUES(5569314186296520615,NULL);
INSERT INTO t1 VALUES(5740904173463435848,NULL);
INSERT INTO t1 VALUES(5849452934504718062,NULL);
INSERT INTO t1 VALUES(6218815181136940951,NULL);
INSERT INTO t1 VALUES(6275945720557189700,NULL);
INSERT INTO t1 VALUES(6279008355318181000,NULL);
INSERT INTO t1 VALUES(7017987158241964732,NULL);
INSERT INTO t1 VALUES(7237035290160030660,NULL);
INSERT INTO t1 VALUES(7374688146326987272,NULL);
INSERT INTO t1 VALUES(7612353589185494102,NULL);
INSERT INTO t1 VALUES(7958180433948844465,NULL);
INSERT INTO t1 VALUES(8093404925372580611,NULL);
INSERT INTO t1 VALUES(8165972772169640480,NULL);
INSERT INTO t1 VALUES(8531143325322891078,NULL);
INSERT INTO t1 VALUES(8658728983219000078,NULL);
INSERT INTO t1 VALUES(8730638167239698291,NULL);
INSERT INTO t1 VALUES(8757751876611013998,NULL);
INSERT INTO t1 VALUES(8994059213096666367,NULL);
INSERT INTO t1 VALUES(9034558451786630908,NULL);
INSERT INTO t1 VALUES(9049770455330813268,NULL);
INSERT INTO t1 VALUES(9196517019233481682,NULL);
SELECT c0, sum(c1), min(c1), max(c1) FROM t1 GROUP BY c0 ORDER BY 1, 2, 3, 4;
create table stddev_test(val integer, grp integer);
insert into stddev_test values (42, 1), (43, 1), (42, 2), (1000, 2), (NULL, 1), (NULL, 3);
SELECT stddev_samp(1);
SELECT var_samp(1);
select round(stddev_samp(val), 1) from stddev_test;
select round(stddev_samp(val), 1) from stddev_test  where val is not null;
select grp, sum(val), round(stddev_samp(val), 1), min(val) from stddev_test group by grp order by grp;
select grp, sum(val), round(stddev_samp(val), 1), min(val) from stddev_test where val is not null group by grp order by grp;
select round(stddev_pop(val), 1) from stddev_test;
select round(stddev_pop(val), 1) from stddev_test  where val is not null;
select grp, sum(val), round(stddev_pop(val), 1), min(val) from stddev_test group by grp order by grp;
select grp, sum(val), round(stddev_pop(val), 1), min(val) from stddev_test where val is not null group by grp order by grp;
select round(var_samp(val), 1) from stddev_test;
select round(variance(val), 1) from stddev_test;
select round(var_samp(val), 1) from stddev_test  where val is not null;
select grp, sum(val), round(var_samp(val), 1), min(val) from stddev_test group by grp order by grp;
select grp, sum(val), round(var_samp(val), 1), min(val) from stddev_test where val is not null group by grp order by grp;
select round(var_pop(val), 1) from stddev_test;
select round(var_pop(val), 1) from stddev_test  where val is not null;
select grp, sum(val), round(var_pop(val), 2), min(val) from stddev_test group by grp order by grp;
select grp, sum(val), round(var_pop(val), 2), min(val) from stddev_test where val is not null group by grp order by grp;
create table stddev_test_alias(val integer, grp integer);
insert into stddev_test_alias values (42, 1), (43, 1), (42, 2), (1000, 2), (NULL, 1), (NULL, 3);
select round(stddev(val), 1) from stddev_test_alias;
select stddev(0) from range(10);
select stddev(a) from (values (1e301), (-1e301)) tbl(a);
select var_samp(a) from (values (1e301), (-1e301)) tbl(a);
select var_pop(a) from (values (1e301), (-1e301)) tbl(a);
PRAGMA enable_verification;
PRAGMA verify_external;
PRAGMA verify_parallelism;
CREATE TABLE strings AS SELECT c::VARCHAR g, (c*10+e)::VARCHAR x FROM range(0, 100, 1) t1(c), range(0, 100, 1) t2(e);
SELECT COUNT(*) FROM (SELECT g, STRING_AGG(x,',') FROM strings GROUP BY g) t1;
SELECT g, STRING_AGG(x ORDER BY x DESC) FROM strings GROUP BY g ORDER BY 1, 2;
SELECT g, STRING_AGG(x,',' ORDER BY x DESC) FROM strings GROUP BY g ORDER BY 1, 2;
SET default_null_order='nulls_first';
PRAGMA enable_verification;
PRAGMA verify_external;
create table quantile as select range r, random() from range(0,1000000,100) union all values (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) order by 2;
SELECT quantile_cont(r, NULL) FROM quantile;
SELECT quantile_cont(r, 0.5) FROM quantile;
SELECT quantile_cont(r::decimal(10,2), 0.5) FROM quantile;
SELECT quantile_cont(r, 1.0) FROM quantile;
SELECT quantile_cont(r, 0.0) FROM quantile;
SELECT quantile_cont(NULL, 0.5) FROM quantile;
SELECT quantile_cont(42, 0.5) FROM quantile;
SELECT quantile_cont(NULL, 0.5);
SELECT quantile_cont(42, 0.5);
SELECT quantile_cont(r, 0.25), quantile_cont(r, 0.5), quantile_cont(r, 0.75) from quantile;
SELECT quantile_cont(d::decimal(4,1), 0.25), quantile_cont(d::decimal(4,1), 0.5), quantile_cont(d::decimal(4,1), 0.75)
FROM range(0,100) tbl(d);
SELECT quantile_cont(d::decimal(8,1), 0.25), quantile_cont(d::decimal(8,1), 0.5), quantile_cont(d::decimal(8,1), 0.75)
FROM range(0,100) tbl(d);
SELECT quantile_cont(d::decimal(12,1), 0.25), quantile_cont(d::decimal(12,1), 0.5), quantile_cont(d::decimal(12,1), 0.75)
FROM range(0,100) tbl(d);
SELECT quantile_cont(d::decimal(18,1), 0.25), quantile_cont(d::decimal(18,1), 0.5), quantile_cont(d::decimal(18,1), 0.75)
FROM range(0,100) tbl(d);
SELECT quantile_cont(d::decimal(24,1), 0.25), quantile_cont(d::decimal(24,1), 0.5), quantile_cont(d::decimal(24,1), 0.75)
FROM range(0,100) tbl(d);
SELECT mod(r,1000) as g, quantile_cont(r, 0.25) FROM quantile GROUP BY 1 ORDER BY 1;
SELECT quantile_cont('2021-01-01'::TIMESTAMP + interval (r) second, 0.5) FROM quantile;
SELECT quantile_cont(('1990-01-01'::DATE + interval (r/100) day)::DATE, 0.5) FROM quantile;
SELECT quantile_cont('00:00:00'::TIME + interval (r/100) second, 0.5) FROM quantile;
SELECT quantile_cont(interval (r/100) second, 0.5) FROM quantile;
SELECT quantile_cont(('2021-01-01'::TIMESTAMP + interval (r) second)::TIMESTAMPTZ, 0.5) FROM quantile;
SELECT quantile_cont(1, 0.1) FROM quantile;
SELECT quantile_cont(r, -0.1) FROM quantile;
SELECT 
    percentile_cont(0.8) WITHIN GROUP (ORDER BY x DESC),
    quantile_cont(x, 0.8 ORDER BY x DESC),
FROM 
    (VALUES (2), (1)) _(x);
SELECT quantile_cont(r, 0.1) FROM quantile WHERE 1=0;
SELECT quantile_cont(r, -1.1) FROM quantile;
SELECT quantile_cont(r, 1.1) FROM quantile;
SELECT quantile_cont(r, "string") FROM quantile;
SELECT quantile_cont(r, NULL) FROM quantile;
SELECT quantile_cont(r::string, 0.5) FROM quantile;
SELECT quantile_cont(r) FROM quantile;
SELECT quantile_cont(r, 0.1, 50) FROM quantile;
pragma threads=4;
PRAGMA verify_parallelism;
SELECT quantile_cont(r, 0.25), quantile_cont(r, 0.5), quantile_cont(r, 0.75) from quantile;
SELECT mod(r,1000) as g, quantile_cont(r, 0.25) FROM quantile GROUP BY 1 ORDER BY 1;
SELECT quantile_cont(1, 0.1) FROM quantile;
SELECT quantile_cont(r, 0.1) FROM quantile WHERE 1=0;
SELECT quantile_cont(t, 0.5) FROM (VALUES (120::TINYINT), (122::TINYINT)) tbl(t);
CREATE TABLE tinyints(t TINYINT);
INSERT INTO tinyints VALUES (-127), (-127);
SELECT quantile_cont(t, 0.5) FROM tinyints;
UPDATE tinyints SET t=-t;
SELECT quantile_cont(t, 0.5) FROM tinyints;
SELECT quantile_cont(t, 0.5) FROM (VALUES (32764::SMALLINT), (32766::SMALLINT)) tbl(t);
CREATE TABLE smallints(t SMALLINT);
INSERT INTO smallints VALUES (-32767), (-32767);
SELECT quantile_cont(t, 0.5) FROM smallints;
UPDATE smallints SET t=-t;
SELECT quantile_cont(t, 0.5) FROM smallints;
SELECT quantile_cont(t, 0.5) FROM (VALUES (2147483642::INTEGER), (2147483644::INTEGER)) tbl(t);
CREATE TABLE integers(t INTEGER);
INSERT INTO integers VALUES (-2147483647), (-2147483647);
SELECT quantile_cont(t, 0.5) FROM integers;
UPDATE integers SET t=-t;
SELECT quantile_cont(t, 0.5) FROM integers;
SELECT quantile_cont(t, 0.5) FROM (VALUES (9223372036854775794::BIGINT), (9223372036854775796::BIGINT)) tbl(t);
CREATE TABLE bigints(t BIGINT);
INSERT INTO bigints VALUES (-9223372036854775800), (-9223372036854775800);
SELECT quantile_cont(t, 0.5) FROM bigints;
UPDATE bigints SET t=-t;
SELECT quantile_cont(t, 0.5) FROM bigints;
SELECT quantile_cont(r, random()) FROM quantile;
CREATE TABLE doubles(n DOUBLE);
INSERT INTO doubles (n) VALUES ('9007199254740992'::DOUBLE), (1::DOUBLE), (1::DOUBLE), (0::DOUBLE);
SELECT FAVG(n) - '2251799813685248.5'::DOUBLE FROM doubles;
select product();
select product(NULL);
select product(1);
select product(*);
CREATE TABLE integers(i INTEGER);
INSERT INTO integers VALUES (1), (2),(4), (NULL);
SELECT product(i)  FROM integers;
SELECT PRODUCT(2) FROM range(100);
SELECT PRODUCT(2) FROM range(100) tbl(i) WHERE i % 2 != 0;
select product(i) from integers group by i%2 order by all;
SELECT PRODUCT(i) FROM range(100) tbl(i) WHERE 1=0;
select product(i) over (partition by i%2)
    from integers;
PRAGMA enable_verification;
PRAGMA verify_external;
select histogram(NULL);
SELECT histogram(i) FROM range(100) tbl(i) WHERE 1=0;
select histogram(1);
SELECT histogram('、');
SELECT histogram(2) FROM range(100);
CREATE TABLE hist_data (g INTEGER, e INTEGER);
INSERT INTO hist_data VALUES (1, 1), (1, 2), (2, 3), (2, 4), (2, 5), (3, 6), (5, NULL);
SELECT histogram(g) from hist_data;
SELECT histogram(e) from hist_data;
select histogram(g)
    from hist_data
    group by g%2==0 ORDER BY g%2==0;
select histogram(g)
    from hist_data
    where g < 3;
create table names (name string);
insert into names values ('pedro'), ('pedro'), ('pedro'),('hannes'),('hannes'),('mark'),(null),('Hubert Blaine Wolfeschlegelsteinhausenbergerdorff Sr.');
select histogram(name) from names;
SELECT histogram(CAST('2021-08-20' AS TIMESTAMP_S));
SELECT histogram(CAST('2021-08-20' AS TIMESTAMP_MS));
SELECT histogram(CAST('2021-08-20' AS TIMESTAMP_NS));
SELECT histogram(CAST('15:05:42' AS TIME));
SELECT histogram(CAST('15:05:42+00' AS TIME WITH TIME ZONE));
SELECT histogram(CAST('2022-01-02' AS DATE));
select g,histogram(g) over (partition by g%2)
    from hist_data;
select histogram();
select histogram(*);
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');
CREATE TABLE enums (e mood);
INSERT INTO enums VALUES ('happy'), ('ok');
SELECT histogram(e) FROM enums;
PRAGMA enable_verification;
select kurtosis();
select kurtosis(NULL);
select kurtosis(1);
select kurtosis(*);
select kurtosis(i) from (values (0), (0), (0), (0), (0), (0)) tbl(i);
select kurtosis(i) from (values (2e304), (2e305), (2e306), (2e307)) tbl(i);
select kurtosis(10) from range (5);
select kurtosis(10) from range (5) where 1 == 0;
create table aggr(k int, v int, v2 int);
insert into aggr values
    (1, 10, null),
    (2, 10, 11),
    (2, 10, 15),
    (2, 10, 18),
    (2, 20, 22),
    (2, 20, 25),
    (2, 25, null),
    (2, 30, 35),
    (2, 30, 40),
    (2, 30, 50),
    (2, 30, 51);
select kurtosis(k), kurtosis(v), kurtosis(v2) from aggr;
select kurtosis_pop(k), kurtosis_pop(v), kurtosis_pop(v2) from aggr;
with onetwo as (select range::float as v from range(1,3)) select kurtosis_pop(v) from onetwo;
select  kurtosis(v2) from aggr group by v ORDER BY ALL;
select kurtosis(v2) over (partition by v)
    from aggr;
PRAGMA enable_verification;
create table dummy as select range % 10 g, range d from range(100);
SELECT count(*), count(d), sum(d), avg(d)::integer, min(d), max(d) FROM dummy;
SELECT finalize(count(*) EXPORT_STATE), finalize(count(d) EXPORT_STATE), finalize(sum(d) EXPORT_STATE), finalize(avg(d) EXPORT_STATE)::integer, finalize(min(d) EXPORT_STATE), finalize(max(d) EXPORT_STATE)  FROM dummy;
SELECT g, count(*), count(d), sum(d), avg(d)::integer, min(d), max(d) FROM dummy GROUP BY g ORDER BY g;
SELECT g, finalize(count(*) EXPORT_STATE), finalize(count(d) EXPORT_STATE), finalize(sum(d) EXPORT_STATE), finalize(avg(d) EXPORT_STATE)::integer, finalize(min(d) EXPORT_STATE), finalize(max(d) EXPORT_STATE)  FROM dummy GROUP BY g ORDER BY g;
CREATE TABLE state AS SELECT g, count(*) EXPORT_STATE count_star_state, count(d) EXPORT_STATE count_state, sum(d) EXPORT_STATE sum_state, avg(d) EXPORT_STATE avg_state, min(d) EXPORT_STATE min_state, max(d) EXPORT_STATE max_state FROM dummy GROUP BY g ORDER BY g;
SELECT g, finalize(count_star_state),finalize(count_state), finalize(sum_state), finalize(avg_state)::integer, finalize(min_state), finalize(max_state) FROM state ORDER BY g;
SELECT sum(d)*2 FROM dummy;
SELECT FINALIZE(COMBINE(SUM(d) EXPORT_STATE, SUM(d) EXPORT_STATE)) FROM dummy;
SELECT g, sum(d)*2 combined_sum FROM dummy GROUP BY g ORDER BY g;
select g, finalize(combine(sum(d) EXPORT_STATE, sum_state)) combined_sum from dummy join state using (g) group by g, sum_state ORDER BY g;
CREATE TABLE state2 AS SELECT g, sum(d) EXPORT_STATE sum_state FROM dummy WHERE g < 5 GROUP BY g ORDER BY g;
select g, finalize(sum_state) * 2 combined_sum from (select g, sum(d) EXPORT_STATE sum_state from dummy where g >= 5 GROUP BY g union all SELECT * FROM state2) ORDER BY g;
with groups as (select distinct g from dummy)
select g, FINALIZE(COMBINE(sum_state, sum_state2)) * 2 from groups left join state2 using(g) left join (select g, sum(d) EXPORT_STATE sum_state2 from dummy where g >= 5 GROUP BY g) using (g);
with groups as (select distinct g from dummy)
select g, FINALIZE(sum_state), FINALIZE(sum_state2), FINALIZE(COMBINE(sum_state, sum_state2))  from groups left join state2 using(g) left join (select g, sum(d) EXPORT_STATE sum_state2 from dummy where g >= 3 GROUP BY g) using (g) order by g;
SELECT count(*), count(d), sum(d), avg(d)::integer, min(d), max(d) FROM dummy WHERE FALSE;
SELECT finalize(count(*) EXPORT_STATE), finalize(count(d) EXPORT_STATE), finalize(sum(d) EXPORT_STATE), finalize(avg(d) EXPORT_STATE)::integer, finalize(min(d) EXPORT_STATE), finalize(max(d) EXPORT_STATE) FROM dummy WHERE FALSE;
SELECT count(*), count(d), sum(d), avg(d)::integer, min(d), max(d) FROM (SELECT NULL::integer d);
SELECT finalize(count(*) EXPORT_STATE), finalize(count(d) EXPORT_STATE), finalize(sum(d) EXPORT_STATE), finalize(avg(d) EXPORT_STATE)::integer, finalize(min(d) EXPORT_STATE), finalize(max(d) EXPORT_STATE) FROM (SELECT NULL::integer d);
SELECT count(*), count(d), sum(d), avg(d)::integer, min(d), max(d) FROM (SELECT NULL::integer d, g FROM dummy);
SELECT finalize(count(*) EXPORT_STATE), finalize(count(d) EXPORT_STATE), finalize(sum(d) EXPORT_STATE), finalize(avg(d) EXPORT_STATE)::integer, finalize(min(d) EXPORT_STATE), finalize(max(d) EXPORT_STATE) FROM (SELECT NULL::integer d, g FROM dummy);
select argmin(a,b), argmax(a,b) from (values (1,1), (2,2), (8,8), (10,10)) s(a,b);
select FINALIZE(argmin(a,b) EXPORT_STATE), FINALIZE(argmax(a,b) EXPORT_STATE) from (values (1,1), (2,2), (8,8), (10,10)) s(a,b);
SELECT g, first(d), last(d), fsum(d), favg(d), product(d), bit_xor(d), bool_and(d > 5) FROM dummy GROUP BY g ORDER BY g;
SELECT g, FINALIZE(first(d) EXPORT_STATE), FINALIZE(last(d) EXPORT_STATE), FINALIZE(fsum(d) EXPORT_STATE), FINALIZE(favg(d) EXPORT_STATE), FINALIZE(product(d) EXPORT_STATE), FINALIZE(bit_xor(d) EXPORT_STATE), FINALIZE(bool_and(d > 5) EXPORT_STATE) FROM dummy GROUP BY g ORDER BY g;
SELECT corr(d, d+1), covar_pop(d, d+1)FROM dummy;
SELECT FINALIZE(corr(d, d+1) EXPORT_STATE), FINALIZE(covar_pop(d, d+1) EXPORT_STATE) from dummy;
SELECT list(d) EXPORT_STATE from dummy;
SELECT string_agg(d, ',') EXPORT_STATE from dummy;
SELECT string_agg(d) EXPORT_STATE from dummy;
SELECT FINALIZE(COMBINE(SUM(d) EXPORT_STATE, AVG(d) EXPORT_STATE)) FROM dummy;
SELECT combine(NULL, NULL);
SELECT combine(42, 42);
SELECT finalize(NULL);
SELECT finalize(42);
SELECT finalize(sum(d)) from dummy;
SELECT finalize(sum(d)) from dummy group by g;
SELECT finalize(finalize(sum(d) EXPORT_STATE)) from dummy;
select sum(42) EXPORT_STATE over ();
create table dummy as select range % 10 g, range d from range(100);
CREATE TABLE state AS SELECT g, count(*) EXPORT_STATE count_star_state, count(d) EXPORT_STATE count_state, sum(d) EXPORT_STATE sum_state, avg(d) EXPORT_STATE avg_state, min(d) EXPORT_STATE min_state, max(d) EXPORT_STATE max_state FROM dummy GROUP BY g ORDER BY g;
CREATE VIEW state_view AS SELECT g, count(*) EXPORT_STATE count_star_state, count(d) EXPORT_STATE count_state, sum(d) EXPORT_STATE sum_state, avg(d) EXPORT_STATE avg_state, min(d) EXPORT_STATE min_state, max(d) EXPORT_STATE max_state FROM dummy GROUP BY g ORDER BY g;
SELECT g, count(*), count(d), sum(d), avg(d)::integer, min(d), max(d) FROM dummy GROUP BY g ORDER BY g;
SELECT g, finalize(count_star_state),finalize(count_state), finalize(sum_state), finalize(avg_state)::integer, finalize(min_state), finalize(max_state) FROM state ORDER BY g;
SELECT g, finalize(count_star_state),finalize(count_state), finalize(sum_state), finalize(avg_state)::integer, finalize(min_state), finalize(max_state) FROM state_view ORDER BY g;
SELECT (SUM(42) EXPORT_STATE)::BLOB;
SELECT FINALIZE(COMBINE(SUM(42) EXPORT_STATE, (SUM(42) EXPORT_STATE)::BLOB));
SELECT (SUM(42) EXPORT_STATE)::INTEGER;
SELECT COMBINE(SUM(42) EXPORT_STATE, 42);
SELECT COMBINE(SUM(42) EXPORT_STATE, 'ASDF'::BLOB);
SELECT COMBINE((SUM(42) EXPORT_STATE)::BLOB, SUM(42) EXPORT_STATE);
COPY (SELECT g, (SUM(d) EXPORT_STATE)::BLOB s1 FROM dummy GROUP BY g) TO 'duckdb_unittest_tempdir/72533/state.parquet' (FORMAT PARQUET);
SELECT g, FINALIZE(COMBINE(s2, s1)) FROM (SELECT g, SUM(d) EXPORT_STATE s2 FROM dummy GROUP BY g) q1 JOIN 'duckdb_unittest_tempdir/72533/state.parquet' USING(g) ORDER BY g;
PRAGMA enable_verification;
SELECT COUNT(n) FROM test_vector_types(NULL::INT, all_flat=false) t(n);
SELECT list_aggr(n, 'count') FROM test_vector_types(NULL::INT[], all_flat=false) t(n);
SELECT COUNT(n) FROM test_vector_types(NULL::VARCHAR, all_flat=false) t(n);
SELECT COUNT(DISTINCT n) FROM test_vector_types(NULL::INT, all_flat=false) t(n);
SELECT COUNT(DISTINCT n) FROM test_vector_types(NULL::VARCHAR, all_flat=false) t(n);
SELECT n, COUNT(n) FROM test_vector_types(NULL::INT, all_flat=false) t(n) GROUP BY n ORDER BY ALL;
SELECT COUNT(n) FROM test_vector_types(NULL::INT, all_flat=true) t(n);
SELECT list_aggr(n, 'count') FROM test_vector_types(NULL::INT[], all_flat=true) t(n);
SELECT COUNT(n) FROM test_vector_types(NULL::VARCHAR, all_flat=true) t(n);
SELECT COUNT(DISTINCT n) FROM test_vector_types(NULL::INT, all_flat=true) t(n);
SELECT COUNT(DISTINCT n) FROM test_vector_types(NULL::VARCHAR, all_flat=true) t(n);
SELECT n, COUNT(n) FROM test_vector_types(NULL::INT, all_flat=true) t(n) GROUP BY n ORDER BY ALL;
CREATE TABLE int(i INT);
INSERT INTO int FROM range(128);
INSERT INTO int SELECT NULL FROM range(128);
INSERT INTO int FROM range(77);
INSERT INTO int SELECT NULL FROM range(61);
INSERT INTO int FROM range(88);
INSERT INTO int SELECT NULL FROM range(33);
INSERT INTO int FROM range(44);
INSERT INTO int SELECT NULL FROM range(11);
INSERT INTO int FROM range(13);
INSERT INTO int SELECT NULL FROM range(27);
SELECT COUNT(i), COUNT(rowid) FROM int;
SELECT rowid // 200 AS g, COUNT(i), COUNT(rowid) FROM int GROUP BY g;
PRAGMA enable_verification;
PRAGMA verify_external;
select entropy();
select entropy(NULL);
select entropy(1);
select entropy(*);
create table aggr(k int);
insert into aggr values (0),(1),(1),(1),(4),(0),(3),(3),(2),(2),(4),(4),(2),(4),(0),(0),(0),(1),(2),(3),(4),(2),(3),(3),(1);
select entropy(k) from aggr ;
SELECT entropy(2) FROM range(100);
select entropy(k) from aggr group by k%2 order by all;
create table names (name string);
insert into names values ('pedro'), ('pedro'), ('pedro'),('hannes'),('hannes'),('mark'),(null);
select entropy(name) from names;
select entropy(k) over (partition by k%2)
    from aggr;
SELECT entropy(i) FROM range(100) tbl(i) WHERE 1=0;
PRAGMA enable_verification;
CREATE TABLE flights(
	"year" INTEGER,
	"month" INTEGER,
	"day" INTEGER,
	dep_time INTEGER,
	sched_dep_time INTEGER,
	dep_delay DOUBLE,
	arr_time INTEGER,
	sched_arr_time INTEGER,
	arr_delay DOUBLE,
	carrier VARCHAR,
	flight INTEGER,
	tailnum VARCHAR,
	origin VARCHAR,
	dest VARCHAR,
	air_time DOUBLE,
	distance DOUBLE,
	"hour" DOUBLE,
	"minute" DOUBLE,
	time_hour TIMESTAMP);
SELECT "dest", mode() WITHIN GROUP (ORDER BY "arr_delay") AS "median_delay"
FROM "flights"
GROUP BY "dest";
SELECT "dest", percentile_cont(0.5) WITHIN GROUP (ORDER BY "arr_delay") AS "median_delay"
FROM "flights"
GROUP BY "dest";
SELECT "dest", percentile_cont([0.25, 0.5, 0.75]) WITHIN GROUP (ORDER BY "arr_delay") AS "iqr_delay"
FROM "flights"
GROUP BY "dest";
SELECT "dest", percentile_disc(0.5) WITHIN GROUP (ORDER BY "arr_delay") AS "median_delay"
FROM "flights"
GROUP BY "dest";
SELECT "dest", percentile_disc([0.25, 0.5, 0.75]) WITHIN GROUP (ORDER BY "arr_delay") AS "iqr_delay"
FROM "flights"
GROUP BY "dest";
select percentile_disc(0.25) within group(order by i desc) from generate_series(0,100) tbl(i);
select percentile_disc([0.25, 0.5, 0.75]) within group(order by i desc) from generate_series(0,100) tbl(i);
select percentile_cont(0.25) within group(order by i desc) from generate_series(0,100) tbl(i);
select percentile_cont([0.25, 0.5, 0.75]) within group(order by i desc) from generate_series(0,100) tbl(i);
SELECT percentile_disc(.5) WITHIN GROUP (order by col desc) 
FROM VALUES (11000), (3100), (2900), (2800), (2600), (2500) AS tab(col);
SELECT percentile_disc([.25, .5, .75]) WITHIN GROUP (order by col desc) 
FROM VALUES (11000), (3100), (2900), (2800), (2600), (2500) AS tab(col);
SELECT MODE() WITHIN GROUP (ORDER BY order_occurrences DESC) FROM (
VALUES
	(500, 1),
	(1000, 2),
	(800, 3),
	(1000, 4),
	(500, 5),
	(550, 6),
	(400, 7),
	(200, 8),
	(10, 9)
) items_per_order(order_occurrences, item_count);
SELECT "dest", mode() WITHIN GROUP (ORDER BY "arr_delay", "arr_time") AS "median_delay"
FROM "flights"
GROUP BY "dest";
SELECT "dest", duck(0.5) WITHIN GROUP (ORDER BY "arr_delay") AS "duck_delay"
FROM "flights"
GROUP BY "dest";
select percentile_disc() within group(order by i) from generate_series(0,100) tbl(i);
select percentile_disc(0.25, 0.5) within group(order by i) from generate_series(0,100) tbl(i);
select percentile_cont() within group(order by i) from generate_series(0,100) tbl(i);
select percentile_cont(0.25, 0.5) within group(order by i) from generate_series(0,100) tbl(i);
SELECT percentile_disc(CAST('NaN' AS REAL)) WITHIN GROUP (ORDER BY 1);
SELECT percentile_disc([]) WITHIN GROUP (ORDER BY LAST);
select mode(0.25) within group(order by i) from generate_series(0,100) tbl(i);
select percentile_disc('duck') within group(order by i) from generate_series(0,100) tbl(i);
select percentile_cont('duck') within group(order by i) from generate_series(0,100) tbl(i);
SELECT percentile_disc(sum(1)) WITHIN GROUP (ORDER BY 1 DESC);
SELECT percentile_disc(strftime(DATE '1-11-25',NULL)) WITHIN GROUP (ORDER BY 1 DESC);
SELECT percentile_cont(CASE 1 WHEN 2 THEN 3 END) WITHIN GROUP (ORDER BY 1 DESC);
SELECT percentile_disc(-.5) WITHIN GROUP (order by col ASC) 
FROM VALUES (11000), (3100), (2900), (2800), (2600), (2500) AS tab(col);
SELECT percentile_disc([-.25, .5, .75]) WITHIN GROUP (order by col ASC) 
FROM VALUES (11000), (3100), (2900), (2800), (2600), (2500) AS tab(col);
SELECT percentile_disc(-.5) WITHIN GROUP (order by col DESC) 
FROM VALUES (11000), (3100), (2900), (2800), (2600), (2500) AS tab(col);
SELECT percentile_disc([-.25, .5, .75]) WITHIN GROUP (order by col DESC) 
FROM VALUES (11000), (3100), (2900), (2800), (2600), (2500) AS tab(col);
SET default_null_order='nulls_first';
PRAGMA enable_verification;
PRAGMA verify_external;
create table quantiles as select range r, random() FROM range(10000) union all values (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) order by 2;
SELECT quantile_disc(r, [0.1, 0.5, 0.9]) FROM quantiles;
SELECT quantile_disc(d::decimal(4,1), [0.1, 0.5, 0.9])
FROM range(0,100) tbl(d);
SELECT quantile_disc(d::decimal(8,1), [0.1, 0.5, 0.9])
FROM range(0,100) tbl(d);
SELECT quantile_disc(d::decimal(12,1), [0.1, 0.5, 0.9])
FROM range(0,100) tbl(d);
SELECT quantile_disc(d::decimal(18,1), [0.1, 0.5, 0.9])
FROM range(0,100) tbl(d);
SELECT quantile_disc(d::decimal(24,1), [0.1, 0.5, 0.9])
FROM range(0,100) tbl(d);
SELECT quantile_disc(col, [-.25, -.5, -.75])
FROM VALUES (11000), (3100), (2900), (2800), (2600), (2500) AS tab(col);
SELECT quantile_disc(d::VARCHAR, [0.1, 0.5, 0.9])
FROM range(0,100) tbl(d);
SELECT mod(r,10) as g, quantile_disc(r, [0.1, 0.5, 0.9]) FROM quantiles GROUP BY 1 ORDER BY 1;
SELECT quantile_disc(1, [0.1, 0.5, 0.9]) FROM quantiles;
SELECT quantile_disc(r, [0.1, 0.5, 0.9]) FROM quantiles WHERE 1=0;
SELECT quantile_disc(r, []) FROM quantiles;
SELECT quantile_disc('2021-01-01'::TIMESTAMP + interval (r) hour, [0.1, 0.5, 0.9]) FROM quantiles;
SELECT quantile_disc('1990-01-01'::DATE + interval (r) day, [0.1, 0.5, 0.9]) FROM quantiles;
SELECT quantile_disc('00:00:00'::TIME + interval (r) second, [0.1, 0.5, 0.9]) FROM quantiles;
SELECT quantile_disc(interval (r) second, [0.1, 0.5, 0.9]) FROM quantiles;
SELECT quantile_disc(('2021-01-01'::TIMESTAMP + interval (r) hour)::TIMESTAMPTZ, [0.1, 0.5, 0.9]) FROM quantiles;
pragma threads=4;
PRAGMA verify_parallelism;
SELECT quantile_disc(r, [0.1, 0.5, 0.9]) FROM quantiles;
SELECT mod(r,10) as g, quantile_disc(r, [0.1, 0.5, 0.9]) FROM quantiles GROUP BY 1 ORDER BY 1;
SELECT quantile_disc(1, [0.1, 0.5, 0.9]) FROM quantiles;
SELECT quantile_disc(r, [0.1, 0.5, 0.9]) FROM quantiles WHERE 1=0;
SELECT quantile_disc(r, []) FROM quantiles;
SELECT quantile_disc(col, [0.1, 0.32, 0.33, 0.34, 0.49, .5, .51, 0.75, 0.9, 0.999, 1])
FROM VALUES (0), (1), (2), (10) AS tab(col);
SELECT quantile_disc(42::UTINYINT, 0.5);
SELECT quantile_disc(r, [-0.1, 0.5, 0.9]) FROM quantiles;
SELECT quantile_disc(r, (0.1, 0.5, 1.1)) FROM quantiles;
SELECT quantile_disc(r, [0.1, 0.5, NULL]) FROM quantiles;
SELECT quantile_disc(r, ["0.1", "0.5", "0.9"]) FROM quantiles;
SELECT quantile_disc(r, [0.1, 0.5, 0.9], 50) FROM quantiles;
PRAGMA enable_verification;
CREATE TABLE integers(i INTEGER, grp INTEGER);
INSERT INTO integers VALUES (1, NULL), (2, 3), (3, 2), (NULL, 1);
SELECT FIRST(i ORDER BY grp NULLS LAST) FROM integers;
SELECT FIRST(i ORDER BY grp NULLS FIRST) FROM integers;
SELECT ANY_VALUE(i ORDER BY grp NULLS FIRST) FROM integers;
SELECT ANY_VALUE(i ORDER BY grp NULLS LAST) FROM integers;
SELECT ARG_MIN(i, grp) FROM integers;
SELECT FIRST(i ORDER BY grp DESC NULLS LAST) FROM integers;
SELECT ANY_VALUE(i ORDER BY grp DESC NULLS FIRST) FROM integers;
SELECT ANY_VALUE(i ORDER BY grp DESC NULLS LAST) FROM integers;
SELECT ARG_MAX(i, grp) FROM integers;
SELECT LAST(i ORDER BY grp NULLS FIRST) FROM integers;
SELECT ARG_MAX(i, grp) FROM integers;
SELECT LAST(i ORDER BY grp DESC NULLS FIRST) FROM integers;
SELECT ARG_MIN(i, grp) FROM integers;
CREATE TABLE integers(i INTEGER, j INTEGER);
INSERT INTO integers VALUES (3, 4), (3, 4), (2, 4);
SELECT i, COUNT(*) FROM integers GROUP BY i ORDER BY i;
SELECT i, COUNT() FROM integers GROUP BY i ORDER BY i;
PRAGMA enable_verification;
CREATE TABLE integers(grp INTEGER, i INTEGER);
INSERT INTO integers VALUES (1, 10), (2, 15), (1, 30), (2, 20);
SELECT FIRST(i ORDER BY i) FROM integers;
SELECT FIRST(i ORDER BY i, i, i) FROM integers;
SELECT FIRST(i ORDER BY i, i DESC, i) FROM integers;
SELECT FIRST(i ORDER BY i DESC) FROM integers;
SELECT FIRST(i ORDER BY i DESC, i ASC) FROM integers;
SELECT FIRST(i ORDER BY i), FIRST(i ORDER BY i DESC) FROM integers;
SELECT grp, FIRST(i ORDER BY i) FROM integers GROUP BY grp ORDER BY ALL;
SELECT grp, FIRST(i ORDER BY grp, i, grp DESC, i DESC) FROM integers GROUP BY grp ORDER BY ALL;
SELECT grp, FIRST(i ORDER BY i DESC) FROM integers GROUP BY grp ORDER BY ALL;
CREATE TABLE user_causes (
    user_id INT,
    cause VARCHAR,
    "date" DATE
);
INSERT INTO user_causes (user_id, cause, "date") VALUES
(1, 'Environmental', '2024-03-18'),
(1, 'Environmental', '2024-02-18'),
(1, 'Health', '2024-01-18'),
(1, 'Social', '2023-12-18'),
(1, NULL, '2023-11-19');
SELECT 
    user_id, 
    list(DISTINCT cause ORDER BY "date" DESC) FILTER(cause IS NOT NULL) AS causes
FROM user_causes 
GROUP BY user_id;
SELECT 
    user_id, 
    list(DISTINCT cause ORDER BY cause DESC) FILTER(cause IS NOT NULL) AS causes
FROM user_causes 
GROUP BY user_id;
PRAGMA enable_verification;
CREATE TABLE tbl(a INTEGER, b VARCHAR);
INSERT INTO tbl VALUES (1, NULL), (2, 'thisisalongstring'), (3, 'thisisalsoalongstring');
SELECT LAST(b) FROM tbl WHERE a=2;
SELECT LAST(b) FROM tbl WHERE a=1;
SELECT LAST(b) FROM tbl WHERE a=1 GROUP BY a;
SELECT LAST(b) FROM tbl WHERE a=0;
SELECT LAST(b) FROM tbl WHERE a=0 GROUP BY b;
SELECT a, LAST(b) FROM tbl GROUP BY a ORDER BY a;
SELECT LAST(i) FROM (VALUES (NULL::INT32)) tbl(i);
PRAGMA verify_external;
CREATE TABLE tinyints(i TINYINT);
INSERT INTO tinyints VALUES(1), (8), (3), (12), (7), (1), (2), (8);
SELECT BITSTRING_AGG(i) FROM tinyints;
SELECT bit_count(BITSTRING_AGG(i)) FROM tinyints WHERE i <= 7;
CREATE TABLE smallints(i SMALLINT);
INSERT INTO smallints VALUES(1), (8), (-3), (12), (7), (1), (-1), (-9), (NULL), (-2), (8);
SELECT BITSTRING_AGG(i) FROM smallints;
SELECT bit_count(BITSTRING_AGG(i)) FROM smallints WHERE i = 8;
CREATE TABLE ints(i INTEGER);
INSERT INTO ints VALUES(10), (-5), (11), (NULL), (30), (11), (23), (17), (27), (15), (5), (14);
SELECT BITSTRING_AGG(i) FROM ints;
SELECT bit_count(BITSTRING_AGG(i)) FROM ints WHERE i > 20 AND i < 28;
CREATE TABLE bigints(i BIGINT);
INSERT INTO bigints VALUES(2378097), (2378100), (2378095), (2378104), (NULL), (2378113), (2378100), (2378095), (2378105), (2378097);
SELECT BITSTRING_AGG(i) FROM bigints;
SELECT bit_count(BITSTRING_AGG(i)) FROM bigints WHERE i = 100;
CREATE TABLE hugeints(i HUGEINT);
INSERT INTO hugeints VALUES(12243372036854775807), (12243372036854778191), (12243372036854730332), (12243372036854773737), (12243372036854737711), (12243372036854722124), (12243372036854778191);
SELECT bit_length(BITSTRING_AGG(i)) FROM hugeints;
CREATE TABLE uhugeints(i UHUGEINT);
INSERT INTO uhugeints VALUES(12243372036854775807), (12243372036854778191), (12243372036854730332), (12243372036854773737), (12243372036854737711), (12243372036854722124), (12243372036854778191);
SELECT bit_length(BITSTRING_AGG(i)) FROM uhugeints;
SELECT bit_count(BITSTRING_AGG(i)) FROM smallints;
SELECT COUNT(DISTINCT i) FROM smallints;
SELECT bit_count(BITSTRING_AGG(i)) FROM ints;
SELECT COUNT(DISTINCT i) FROM ints;
SELECT bit_count(BITSTRING_AGG(i)) FROM bigints;
SELECT COUNT(DISTINCT i) FROM bigints;
SELECT bit_count(BITSTRING_AGG(i)) FROM hugeints;
SELECT COUNT(DISTINCT i) FROM hugeints;
SELECT BITSTRING_AGG(i, -5, 30) FROM ints;
SELECT BITSTRING_AGG(i, -10, 40) FROM ints;
SELECT BITSTRING_AGG(i, -10, 20) FROM ints;
SELECT BITSTRING_AGG(i, 0, 15) FROM tinyints;
SELECT BITSTRING_AGG(i, 2, 15) FROM tinyints;
SELECT BITSTRING_AGG(i, 2378080, 2378150) FROM bigints;
SELECT BITSTRING_AGG(3);
SELECT BITSTRING_AGG(2, 0, 5);
CREATE TABLE null_table(i INT);
INSERT INTO null_table VALUES(NULL);
SELECT BITSTRING_AGG(i) FROM null_table;
INSERT INTO null_table VALUES(6), (NULL), (NULL), (NULL), (NULL);
SELECT BITSTRING_AGG(i) FROM null_table;
COPY (SELECT i FROM ints) TO 'duckdb_unittest_tempdir/72533/bitstring_agg.csv' (HEADER 0);
SELECT BITSTRING_AGG(column0) FROM 'duckdb_unittest_tempdir/72533/bitstring_agg.csv';
SELECT BITSTRING_AGG(column0, -10, 40) FROM 'duckdb_unittest_tempdir/72533/bitstring_agg.csv';
SELECT BITSTRING_AGG();
SELECT BITSTRING_AGG(1, 3, 4, 8, 0);
CREATE TABLE groups(i INT, g VARCHAR);
INSERT INTO groups VALUES(10, 'a'), (13, 'b'), (9, 'a'), (16, 'c'), (NULL, 'd'), (2, 'a'), (6, 'c'), (9, 'b');
SELECT g, BITSTRING_AGG(i) FROM groups GROUP BY g ORDER BY g;
PRAGMA disable_optimizer;
SELECT BITSTRING_AGG(i) FROM ints;
SELECT BITSTRING_AGG(i, -5, 32) FROM ints;
PRAGMA enable_verification;
PRAGMA verify_external;
select approx_count_distinct(*);
select approx_count_distinct(1);
select approx_count_distinct(NULL);
select approx_count_distinct('hello');
select approx_count_distinct(10), approx_count_distinct('hello') from range(100);
select approx_count_distinct(i) from range (100) tbl(i) WHERE 1 == 0;
CREATE TABLE IF NOT EXISTS dates (t date);
INSERT INTO dates VALUES ('2008-01-01'), (NULL), ('2007-01-01'), ('2008-02-01'), ('2008-01-02'), ('2008-01-01'), ('2008-01-01'), ('2008-01-01');
CREATE TABLE IF NOT EXISTS timestamp (t TIMESTAMP);
INSERT INTO timestamp VALUES ('2008-01-01 00:00:01'), (NULL), ('2007-01-01 00:00:01'), ('2008-02-01 00:00:01'), ('2008-01-02 00:00:01'), ('2008-01-01 10:00:00'), ('2008-01-01 00:10:00'), ('2008-01-01 00:00:10');
CREATE TABLE IF NOT EXISTS names (t string);
INSERT INTO names VALUES ('Pedro'), (NULL), ('Pedro'), ('Pedro'), ('Mark'), ('Mark'),('Mark'),('Hannes-Muehleisen'),('Hannes-Muehleisen');
create  table t as select range a, mod(range,10) b from range(2000);
SELECT COUNT( a),approx_count_distinct(a),approx_count_distinct(b) from t;
SELECT approx_count_distinct(a) from t group by a %2 order by all;
SELECT count(*) from t where a < 10;
SELECT approx_count_distinct(a) over (partition by a%2) from t where a < 10;
SELECT COUNT( t),approx_count_distinct(t) from timestamp;
SELECT COUNT( t),approx_count_distinct(t) from dates;
SELECT COUNT(t),approx_count_distinct(t) from names;
create table customers (cname varchar);
insert into customers values ('Customer#000000001'), ('Customer#000000002'), ('Customer#000000003'), ('Customer#000000004');
select approx_count_distinct(cname) from customers;
create table issue5259(c0 int);
insert into issue5259 values (1),(2),(3);
SELECT approx_count_distinct(c0 ORDER BY (c0, 1)) FROM issue5259;
CREATE TABLE integers AS SELECT i, 1 AS j FROM range(0, 10000, 1) t1(i) UNION ALL SELECT i, 2 j FROM range(0, 10000, 1) t1(i);
SELECT SUM(i), SUM(sums) FROM (SELECT i, SUM(j) AS sums FROM integers GROUP BY i) tbl1;
SELECT SUM(a0 + a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10), SUM(sums)
FROM (
    SELECT
        i+0 as a0,
        i+1 as a1,
        i+2 as a2,
        i+3 as a3,
        i+4 as a4,
        i+5 as a5,
        i+6 as a6,
        i+7 as a7,
        i+8 as a8,
        i+9 as a9,
        i+10 as a10,
        sum(j) as sums
    FROM integers
    GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11
    ) s;
PRAGMA enable_verification;
SELECT mad(NULL), mad(1);
SELECT mad(NULL), mad(1) FROM range(2000);
create table tinys as
	select range r, random()
	from range(100)
	union all values (NULL, 0.1), (NULL, 0.5), (NULL, 0.9)
	order by 2;
SELECT mad(r::tinyint) FROM tinys;
SELECT mad(NULL::tinyint) FROM tinys;
SELECT mad(42::tinyint) FROM tinys;
SELECT mad(r::decimal(4,1)) FROM tinys;
SELECT mad(NULL::decimal(4,1)) FROM tinys;
SELECT mad(42::decimal(4,1)) FROM tinys;
create table numerics as
	select range r, random()
	from range(10000)
	union all values (NULL, 0.1), (NULL, 0.5), (NULL, 0.9)
	order by 2;
SELECT mad(r::smallint) FROM numerics;
SELECT mad(NULL::smallint) FROM numerics;
SELECT mad(42::smallint) FROM numerics;
SELECT mad(r::integer) FROM numerics;
SELECT mad(NULL::integer) FROM numerics;
SELECT mad(42::integer) FROM numerics;
SELECT mad(r::bigint) FROM numerics;
SELECT mad(NULL::bigint) FROM numerics;
SELECT mad(42::bigint) FROM numerics;
SELECT mad(r::hugeint) FROM numerics;
SELECT mad(NULL::hugeint) FROM numerics;
SELECT mad(42::hugeint) FROM numerics;
SELECT mad(r::uhugeint) FROM numerics;
SELECT mad(NULL::uhugeint) FROM numerics;
SELECT mad(42::uhugeint) FROM numerics;
SELECT mad(r::float) FROM numerics;
SELECT mad(NULL::float) FROM numerics;
SELECT mad(42::float) FROM numerics;
SELECT mad(r::double) FROM numerics;
SELECT mad(NULL::double) FROM numerics;
SELECT mad(42::double) FROM numerics;
SELECT mad(r::decimal(8,1)) FROM numerics;
SELECT mad(NULL::decimal(8,1)) FROM numerics;
SELECT mad(42::decimal(8,1)) FROM numerics;
SELECT mad(r::decimal(12,1)) FROM numerics;
SELECT mad(NULL::decimal(12,1)) FROM numerics;
SELECT mad(42::decimal(12,1)) FROM numerics;
SELECT mad(r::decimal(18,1)) FROM numerics;
SELECT mad(NULL::decimal(18,1)) FROM numerics;
SELECT mad(42::decimal(18,1)) FROM numerics;
SELECT mad(r::decimal(24,1)) FROM numerics;
SELECT mad(NULL::decimal(24,1)) FROM numerics;
SELECT mad(42::decimal(24,1)) FROM numerics;
SELECT mad(('2018-01-01'::DATE + INTERVAL (r) DAY)::DATE) FROM numerics;
SELECT mad('2018-01-01'::TIMESTAMP + INTERVAL (r) HOUR) FROM numerics;
SELECT mad('00:00:00'::TIME + INTERVAL (r) SECOND) FROM numerics;
select mad(x) from (values ('127'::DECIMAL(3,0)), ('-128'::DECIMAL(3,0))) tbl(x);
select mad(x) from (values ('32767'::DECIMAL(5,0)), ('-32768'::DECIMAL(5,0))) tbl(x);
select mad(x) from (values ('2147483647'::DECIMAL(10,0)), ('-2147483648'::DECIMAL(10,0))) tbl(x);
select mad(x) from (values (-1e308), (1e308)) tbl(x);
select mad(x) from (values ('294247-01-10'::date), ('290309-12-22 (BC)'::date)) tbl(x);
select mad(x) from (values
	('294247-01-10 04:00:54.775806'::timestamp),
	('290309-12-22 (BC) 00:00:00'::timestamp)
	) tbl(x);
select mad(x) from (values ('23:59:59.999999'::time), ('00:00:00'::time)) tbl(x);
PRAGMA enable_verification;
PRAGMA verify_external;
SELECT median(NULL), median(1);
SELECT median(NULL), median(1) FROM range(2000);
create table quantile as select range r, random() from range(10000) union all values (NULL, 0.1), (NULL, 0.5), (NULL, 0.9) order by 2;
SELECT median(r) FROM quantile;
SELECT median(r) FROM quantile;
SELECT median(r::float) FROM quantile;
SELECT median(r::double) FROM quantile;
SELECT median(r::tinyint) FROM quantile where r < 100;
SELECT median(r::smallint) FROM quantile;
SELECT median(r::integer) FROM quantile;
SELECT median(r::bigint) FROM quantile;
SELECT median(r::hugeint) FROM quantile;
SELECT median(r::decimal(10,2)) FROM quantile;
SELECT median(NULL) FROM quantile;
SELECT median(42) FROM quantile;
PRAGMA verify_external;
CREATE TABLE tbl(a INTEGER, b VARCHAR);
INSERT INTO tbl VALUES (1, NULL), (2, 'thisisalongstring'), (3, 'thisisalsoalongstring');
SELECT FIRST(b) FROM tbl WHERE a=2;
SELECT ARBITRARY(b) FROM tbl WHERE a=2;
SELECT FIRST(b) FROM tbl WHERE a=1;
SELECT FIRST(b) FROM tbl WHERE a=1 GROUP BY a;
SELECT FIRST(b) FROM tbl WHERE a=0;
SELECT FIRST(b) FROM tbl WHERE a=0 GROUP BY b;
SELECT a, FIRST(b) FROM tbl GROUP BY a ORDER BY a;
SELECT FIRST(i) FROM (VALUES (NULL::INT32)) tbl(i);
SELECT BIT_OR(3), BIT_OR(NULL);
CREATE SEQUENCE seq;
SELECT BIT_OR(nextval('seq'));
SELECT BIT_OR(nextval('seq'));
CREATE TABLE integers(i INTEGER);
INSERT INTO integers VALUES (3), (7), (15), (31), (3), (15);
SELECT BIT_OR(i), BIT_OR(1), BIT_OR(DISTINCT i), BIT_OR(NULL) FROM integers;
SELECT BIT_OR(i) FROM integers WHERE i > 100;
SELECT BIT_OR();
SELECT BIT_OR(1, 2, 3);
SELECT BIT_OR(BIT_AND(1));
CREATE TABLE bits(b BIT);
INSERT INTO bits VALUES ('1010101001'), ('0011010101'), ('0001011101'), ('1011111101'), ('0000010001'), ('1000110001');
SELECT BIT_OR(b) FROM bits;
SELECT BIT_OR(b) FROM bits WHERE get_bit(b, 3) = 0;
SELECT BIT_OR('111010'::BIT);
PRAGMA enable_verification;
CREATE TABLE five AS SELECT i::tinyint AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::smallint AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::integer AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::bigint AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::hugeint AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::utinyint AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::usmallint AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::uinteger AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::ubigint AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::uhugeint AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::float AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::double AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i) FROM five;
SELECT i % 3 AS g, LAST(i) FROM five GROUP BY 1 ORDER BY 1;
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::decimal(4,1) AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i::INTEGER % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::decimal(8,1) AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i::INTEGER % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::decimal(12,1) AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i::INTEGER % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five AS SELECT i::decimal(18,1) AS i FROM range(1, 6, 1) t1(i);
SELECT LAST(i ORDER BY 5-i) FROM five;
SELECT i::INTEGER % 3 AS g, LAST(i ORDER BY 5-i) FROM five GROUP BY 1 ORDER BY 1;
DROP TABLE five;
CREATE TABLE five_dates AS
	SELECT
		i::integer AS i,
		'2021-08-20'::DATE + i::INTEGER AS d,
		'2021-08-20'::TIMESTAMP + INTERVAL (i) HOUR AS dt,
		'14:59:37'::TIME + INTERVAL (i) MINUTE AS t,
		INTERVAL (i) SECOND AS s
	FROM range(1, 6, 1) t1(i);
SELECT LAST(d), LAST(dt), LAST(t), LAST(s) FROM five_dates;
SELECT i % 3 AS g, LAST(d), LAST(dt), LAST(t), LAST(s)
FROM five_dates
GROUP BY 1
ORDER BY 1;
SELECT LAST(d ORDER BY 5-i), LAST(dt ORDER BY 5-i), LAST(t ORDER BY 5-i), LAST(s ORDER BY 5-i) FROM five_dates;
SELECT i % 3 AS g, LAST(d ORDER BY 5-i), LAST(dt ORDER BY 5-i), LAST(t ORDER BY 5-i), LAST(s ORDER BY 5-i)
FROM five_dates
GROUP BY 1
ORDER BY 1;
SELECT LAST(dt::TIMESTAMPTZ), LAST(t::TIMETZ) FROM five_dates;
SELECT i % 3 AS g, LAST(dt::TIMESTAMPTZ), LAST(t::TIMETZ)
FROM five_dates
GROUP BY 1
ORDER BY 1;
SELECT LAST(dt::TIMESTAMPTZ ORDER BY 5-i), LAST(t::TIMETZ ORDER BY 5-i) FROM five_dates;
SELECT i % 3 AS g, LAST(dt::TIMESTAMPTZ ORDER BY 5-i), LAST(t::TIMETZ ORDER BY 5-i)
FROM five_dates
GROUP BY 1
ORDER BY 1;
DROP TABLE five_dates;
CREATE TABLE five_complex AS
	SELECT
		i::integer AS i,
		i::VARCHAR AS s,
		[i] AS l,
		{'a': i} AS r
	FROM range(1, 6, 1) t1(i);
SELECT LAST(s), LAST(l), LAST(r)
FROM five_complex;
SELECT i % 3 AS g, LAST(s), LAST(l), LAST(r)
FROM five_complex
GROUP BY 1
ORDER BY 1;
SELECT LAST(s ORDER BY 5-i), LAST(l ORDER BY 5-i), LAST(r ORDER BY 5-i)
FROM five_complex;
SELECT i % 3 AS g, LAST(s ORDER BY 5-i), LAST(l ORDER BY 5-i), LAST(r ORDER BY 5-i)
FROM five_complex
GROUP BY 1
ORDER BY 1;
DROP TABLE five_complex;
SET default_null_order='nulls_first';
PRAGMA enable_verification;
PRAGMA verify_external;
create table quantiles as select range r, random() FROM range(0,1000000,100) union all values (NULL, 0.25), (NULL, 0.5), (NULL, 0.75) order by 2;
SELECT quantile_cont('2021-01-01'::TIMESTAMP + interval (r/100) hour, [0.25, 0.5, 0.75]) FROM quantiles;
SELECT quantile_cont('1990-01-01'::DATE + interval (r/100) day, [0.25, 0.5, 0.75]) FROM quantiles;
SELECT quantile_cont('00:00:00'::TIME + interval (r/100) second, [0.25, 0.5, 0.75]) FROM quantiles;
SELECT quantile_cont(('2021-01-01'::TIMESTAMP + interval (r/100) hour)::TIMESTAMPTZ, [0.25, 0.5, 0.75])
FROM quantiles;
SELECT quantile_cont(interval (r/100) second, [0.25, 0.5, 0.75]) FROM quantiles;
SELECT quantile_cont(r, [0.25, 0.5, 0.75]) FROM quantiles;
SELECT quantile_cont(d::decimal(4,1), [0.25, 0.5, 0.75])
FROM range(0,100) tbl(d);
SELECT quantile_cont(d::decimal(8,1), [0.25, 0.5, 0.75])
FROM range(0,100) tbl(d);
SELECT quantile_cont(d::decimal(12,1), [0.25, 0.5, 0.75])
FROM range(0,100) tbl(d);
SELECT quantile_cont(d::decimal(18,1), [0.25, 0.5, 0.75])
FROM range(0,100) tbl(d);
SELECT quantile_cont(d::decimal(24,1), [0.25, 0.5, 0.75])
FROM range(0,100) tbl(d);
SELECT mod(r,1000) as g, quantile_cont(r, [0.25, 0.5, 0.75]) FROM quantiles GROUP BY 1 ORDER BY 1;
SELECT quantile_cont(1, [0.25, 0.5, 0.75]) FROM quantiles;
SELECT quantile_cont(r, [0.25, 0.5, 0.75]) FROM quantiles WHERE 1=0;
SELECT quantile_cont(r, []) FROM quantiles;
pragma threads=4;
PRAGMA verify_parallelism;
SELECT quantile_cont(r, [0.25, 0.5, 0.75]) FROM quantiles;
SELECT mod(r,1000) as g, quantile_cont(r, [0.25, 0.5, 0.75]) FROM quantiles GROUP BY 1 ORDER BY 1;
SELECT quantile_cont(1, [0.25, 0.5, 0.75]) FROM quantiles;
SELECT quantile_cont(r, [0.25, 0.5, 0.75]) FROM quantiles WHERE 1=0;
SELECT quantile_cont(r, []) FROM quantiles;
SELECT quantile_cont(r, [-0.25, 0.5, 0.75]) FROM quantiles;
SELECT quantile_cont(r, (0.25, 0.5, 1.1)) FROM quantiles;
SELECT quantile_cont(r, [0.25, 0.5, NULL]) FROM quantiles;
SELECT quantile_cont(r, ["0.25", "0.5", "0.75"]) FROM quantiles;
SELECT quantile_cont(r::string, [0.25, 0.5, 0.75]) FROM quantiles;
SELECT quantile_cont(r, [0.25, 0.5, 0.75], 50) FROM quantiles;
SELECT AVG(3), AVG(NULL);
SELECT AVG(3::SMALLINT), AVG(NULL::SMALLINT);
SELECT AVG(3::DOUBLE), AVG(NULL::DOUBLE);
CREATE SEQUENCE seq;
SELECT AVG(nextval('seq'));
SELECT AVG(nextval('seq'));
CREATE TABLE integers(i INTEGER);
INSERT INTO integers VALUES (1), (2), (3);
SELECT AVG(i), AVG(1), AVG(DISTINCT i), AVG(NULL) FROM integers;
SELECT AVG(i) FROM integers WHERE i > 100;
SELECT AVG();
SELECT AVG(1, 2, 3);
SELECT AVG(AVG(1));
CREATE TABLE vals(i INTEGER, j DOUBLE, k HUGEINT);
INSERT INTO vals VALUES (NULL, NULL, NULL);
SELECT AVG(i), AVG(j), AVG(k) FROM vals;
CREATE TABLE bigints (i BIGINT[]);
INSERT INTO bigints VALUES ([1, 2, 3]);
SELECT list_sum(i) FROM bigints;
SELECT list_avg(i) FROM bigints;
DELETE FROM bigints;
INSERT INTO bigints VALUES ([1, 2, 3, 9223372036854775806]);
SELECT list_sum(i) FROM bigints;
SELECT list_avg(i) FROM bigints;
DELETE FROM bigints;
INSERT INTO bigints VALUES ([-1, -2, -3]);
SELECT list_sum(i) FROM bigints;
SELECT list_avg(i) FROM bigints;
DELETE FROM bigints;
INSERT INTO bigints VALUES ([-1, -2, -3, -9223372036854775806]);
SELECT list_sum(i) FROM bigints;
SELECT list_avg(i) FROM bigints;
CREATE TABLE decimals (i DECIMAL(18,1)[]);
INSERT INTO decimals VALUES ([1, 2, 3]);
SELECT list_sum(i) FROM decimals;
SELECT list_avg(i) FROM decimals;
DELETE FROM decimals;
INSERT INTO decimals VALUES ([99999999999999999.9, 99999999999999999.9, 99999999999999999.9,
    99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 99999999999999999.9,
    99999999999999999.9, 99999999999999999.9, 99999999999999999.9, 1.0, 2.0, 3.0]);
SELECT list_sum(i) FROM decimals;
SELECT list_avg(i) FROM decimals;
CREATE TABLE uhugeints(h UHUGEINT[]);
INSERT INTO uhugeints VALUES ([NULL, 1, 2]), (NULL), ([]), ([NULL]), ([1, 2, 3]);
SELECT list_first(h), list_last(h), list_sum(h) FROM uhugeints;
DELETE FROM uhugeints;
INSERT INTO uhugeints VALUES ([42.0, 1267650600228229401496703205376, 0, '1']);
SELECT list_min(h), list_max(h), list_sum(h), list_first(h), list_last(h) FROM uhugeints;
select list_mode();
CREATE TABLE range AS SELECT LIST(2) AS i FROM range(100) t1(i);
SELECT list_mode(i) FROM range;
create table names (name string[]);
insert into names values (['pedro', 'pedro', 'pedro', 'hannes', 'hannes', 'mark', NULL]);
select list_mode(name) from names;
create table dates (v date[]);
insert into dates values (['2021-05-02', '2021-05-02', '2021-05-02', '2020-02-29', '2020-02-29', '2004-09-01', NULL]);
select list_mode(v) from dates;
create table times (v time[]);
insert into times values (['12:11:49.5', '12:11:49.5', '12:11:49.5', '06:30:00', '06:30:00', '21:15:22', NULL]);
select list_mode(v) from times;
create table timestamps (v timestamp[]);
insert into timestamps values (['2021-05-02 12:11:49.5', '2021-05-02 12:11:49.5', '2021-05-02 12:11:49.5',
    '2020-02-29 06:30:00', '2020-02-29 06:30:00', '2004-09-01 21:15:22', NULL]);
select list_mode(v) from timestamps;
create table intervals (v interval[]);
insert into intervals values
    ([INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds',
    INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds',
    INTERVAL '5 months 2 days 12 hours 11 minutes 49 seconds',
    INTERVAL '2 months 29 days 6 hours 30 minutes',
    INTERVAL '2 months 29 days 6 hours 30 minutes',
    INTERVAL '9 months 1 day 21 hours 15 minutes 22 seconds',
    NULL]);
select list_mode(v) from intervals;
create table hugeints (v hugeint[]);
insert into hugeints values ([5, 5, 5, 2, 2, 1, NULL]);
select list_mode(v) from hugeints;
create table aggr (v decimal(10,2)[]);
insert into aggr values ([10, 10, 20, 21]), ([20, 20, 25, 30]), ([NULL]), ([]), (NULL);
select list_mode(v) from aggr;
select list_kurtosis([1]);
select list_kurtosis([0, 0, 0, 0, 0, 0]);
select list_kurtosis([2e304, 2e305, 2e306, 2e307]);
create table aggr(k int[]);
insert into aggr values ([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 
	([10, 10, 10, 10, 20, 20, 25, 30, 30, 30, 30]),
	([NULL, 11, 15, 18, 22, 25, NULL, 35, 40, 50, 51]), 
	(NULL), ([]), ([NULL]);
select list_kurtosis(k) from aggr;
select list_kurtosis_pop(k) from aggr;
select list_kurtosis();
SELECT list_sum([2, 2]);
CREATE TABLE integers(i INTEGER[]);
INSERT INTO integers SELECT LIST(i) FROM range(0, 1000, 1) tbl(i);
INSERT INTO integers SELECT LIST(i) FROM range(-999, 1000, 1) tbl(i);
INSERT INTO integers SELECT LIST(i) FROM range(0, -1000, -1) tbl(i);
INSERT INTO integers VALUES (NULL), ([NULL]), ([]);
SELECT list_sum(i) FROM integers;
CREATE TABLE doubles(n DOUBLE[]);
INSERT INTO doubles (n) VALUES (['9007199254740992'::DOUBLE, 1::DOUBLE, 1::DOUBLE, 0::DOUBLE]);
SELECT list_aggr(n, 'fsum') FROM doubles;
SELECT list_aggr(n, 'sumKahan') FROM doubles;
SELECT list_aggr(n, 'kahan_sum') FROM doubles;
CREATE TABLE bigints(i BIGINT[]);
INSERT INTO bigints SELECT LIST(i) FROM range(4611686018427387904, 4611686018427388904, 1) tbl(i);
SELECT list_sum(i) FROM bigints;
SELECT list_count([1, 2, 3]);
SELECT list_count([1]) FROM range(3);
CREATE TABLE lists (l INTEGER[]);
INSERT INTO lists VALUES ([1, 2]), ([NULL]), (NULL), ([]), ([3, 4, 5, 6, 7]), ([1, 2, NULL, 1, NULL]);
SELECT list_count(l) FROM lists;
select list_count();
CREATE TABLE list_ints (l INTEGER[]);
INSERT INTO list_ints SELECT LIST(i) FROM range(100) tbl(i);
select list_approx_count_distinct([10]), list_approx_count_distinct(['hello']) from list_ints;
select list_approx_count_distinct(l), list_approx_count_distinct(['hello']) from list_ints;
select list_approx_count_distinct([]) from list_ints;
INSERT INTO list_ints VALUES ([]), (NULL), ([NULL]);
select list_approx_count_distinct(l) from list_ints;
CREATE TABLE IF NOT EXISTS dates (t date[]);
INSERT INTO dates VALUES (['2008-01-01', NULL, '2007-01-01', '2008-02-01', '2008-01-02', '2008-01-01', '2008-01-01', '2008-01-01']);
SELECT list_count(t), list_approx_count_distinct(t) from dates;
CREATE TABLE IF NOT EXISTS timestamp (t TIMESTAMP[]);
INSERT INTO timestamp VALUES (['2008-01-01 00:00:01', NULL, '2007-01-01 00:00:01', '2008-02-01 00:00:01', '2008-01-02 00:00:01', '2008-01-01 10:00:00', '2008-01-01 00:10:00', '2008-01-01 00:00:10']);
SELECT list_count(t), list_approx_count_distinct(t) from timestamp;
CREATE TABLE IF NOT EXISTS names (t string[]);
INSERT INTO names VALUES (['Pedro', NULL, 'Pedro', 'Pedro', 'Mark', 'Mark', 'Mark', 'Hannes-Muehleisen', 'Hannes-Muehleisen']);
SELECT list_count(t), list_approx_count_distinct(t) from names;
CREATE TABLE list_ints_2 (a INTEGER[], b INTEGER[]);
INSERT INTO list_ints_2 SELECT LIST(a), LIST(mod(a, 10)) FROM range(2000) tbl(a);
SELECT list_count(a), list_approx_count_distinct(a), list_approx_count_distinct(b) from list_ints_2;
DELETE FROM list_ints_2;
INSERT INTO list_ints_2 SELECT LIST(a), NULL FROM range(2000) tbl(a, b) WHERE a % 2 = 0;
INSERT INTO list_ints_2 SELECT LIST(a), NULL FROM range(2000) tbl(a, b) WHERE a % 2 = 1;
SELECT list_approx_count_distinct(a) from list_ints_2;
SELECT list_aggr([1], 2);
SELECT list_aggr([1], True);
SELECT list_aggr([1], NULL);
SELECT list_aggr('approx_count_distinct');
SELECT list_aggr(*, 'approx_count_distinct');
SELECT list_aggr('hello', 'approx_count_distinct');
SELECT list_aggr(1, 2, 'approx_count_distinct');
SELECT list_aggr(NULL::boolean, 'approx_count_distinct');
SELECT list_aggr(NULL::varchar, 'approx_count_distinct');
SELECT list_aggr(NULL::tinyint, 'approx_count_distinct');
SELECT list_aggr(NULL::smallint, 'approx_count_distinct');
SELECT list_aggr(NULL::integer, 'approx_count_distinct');
SELECT list_aggr(NULL::bigint, 'approx_count_distinct');
SELECT list_aggr(NULL::hugeint, 'approx_count_distinct');
SELECT list_aggr(NULL::utinyint, 'approx_count_distinct');
SELECT list_aggr(NULL::usmallint, 'approx_count_distinct');
SELECT list_aggr(NULL::uinteger, 'approx_count_distinct');
SELECT list_aggr(NULL::ubigint, 'approx_count_distinct');
SELECT list_aggr(NULL::uhugeint, 'approx_count_distinct');
SELECT list_aggr(NULL::float, 'approx_count_distinct');
SELECT list_aggr(NULL::double, 'approx_count_distinct');
SELECT list_aggr(NULL::decimal(4,1), 'approx_count_distinct');
SELECT list_aggr(NULL::decimal(9,4), 'approx_count_distinct');
SELECT list_aggr(NULL::decimal(18,6), 'approx_count_distinct');
SELECT list_aggr(NULL::decimal(38,10), 'approx_count_distinct');
SELECT list_aggr(NULL::date, 'approx_count_distinct');
SELECT list_aggr(NULL::time, 'approx_count_distinct');
SELECT list_aggr(NULL::timestamp, 'approx_count_distinct');
SELECT list_aggr(NULL::timestamp_s, 'approx_count_distinct');
SELECT list_aggr(NULL::timestamp_ms, 'approx_count_distinct');
SELECT list_aggr(NULL::timestamp_ns, 'approx_count_distinct');
SELECT list_aggr(NULL::timetz, 'approx_count_distinct');
SELECT list_aggr(NULL::timestamptz, 'approx_count_distinct');
SELECT list_aggr(NULL::interval, 'approx_count_distinct');
SELECT list_aggr(NULL::blob, 'approx_count_distinct');
SELECT list_aggr('avg');
SELECT list_aggr(*, 'avg');
SELECT list_aggr('hello', 'avg');
SELECT list_aggr(1, 2, 'avg');
SELECT list_aggr(NULL::boolean, 'avg');
SELECT list_aggr(NULL::varchar, 'avg');
SELECT list_aggr(NULL::tinyint, 'avg');
SELECT list_aggr(NULL::smallint, 'avg');
SELECT list_aggr(NULL::integer, 'avg');
SELECT list_aggr(NULL::bigint, 'avg');
SELECT list_aggr(NULL::hugeint, 'avg');
SELECT list_aggr(NULL::utinyint, 'avg');
SELECT list_aggr(NULL::usmallint, 'avg');
SELECT list_aggr(NULL::uinteger, 'avg');
SELECT list_aggr(NULL::ubigint, 'avg');
SELECT list_aggr(NULL::uhugeint, 'avg');
SELECT list_aggr(NULL::float, 'avg');
SELECT list_aggr(NULL::double, 'avg');
SELECT list_aggr(NULL::decimal(4,1), 'avg');
SELECT list_aggr(NULL::decimal(9,4), 'avg');
SELECT list_aggr(NULL::decimal(18,6), 'avg');
SELECT list_aggr(NULL::decimal(38,10), 'avg');
SELECT list_aggr(NULL::date, 'avg');
SELECT list_aggr(NULL::time, 'avg');
SELECT list_aggr(NULL::timestamp, 'avg');
SELECT list_aggr(NULL::timestamp_s, 'avg');
SELECT list_aggr(NULL::timestamp_ms, 'avg');
SELECT list_aggr(NULL::timestamp_ns, 'avg');
SELECT list_aggr(NULL::timetz, 'avg');
SELECT list_aggr(NULL::timestamptz, 'avg');
SELECT list_aggr(NULL::interval, 'avg');
SELECT list_aggr(NULL::blob, 'avg');
SELECT list_aggr('favg');
SELECT list_aggr(*, 'favg');
SELECT list_aggr('hello', 'favg');
SELECT list_aggr(1, 2, 'favg');
SELECT list_aggr(NULL::boolean, 'favg');
SELECT list_aggr(NULL::varchar, 'favg');
SELECT list_aggr(NULL::tinyint, 'favg');
SELECT list_aggr(NULL::smallint, 'favg');
SELECT list_aggr(NULL::integer, 'favg');
SELECT list_aggr(NULL::bigint, 'favg');
SELECT list_aggr(NULL::hugeint, 'favg');
SELECT list_aggr(NULL::utinyint, 'favg');
SELECT list_aggr(NULL::usmallint, 'favg');
SELECT list_aggr(NULL::uinteger, 'favg');
SELECT list_aggr(NULL::ubigint, 'favg');
SELECT list_aggr(NULL::uhugeint, 'favg');
SELECT list_aggr(NULL::float, 'favg');
SELECT list_aggr(NULL::double, 'favg');
SELECT list_aggr(NULL::decimal(4,1), 'favg');
SELECT list_aggr(NULL::decimal(9,4), 'favg');
SELECT list_aggr(NULL::decimal(18,6), 'favg');
SELECT list_aggr(NULL::decimal(38,10), 'favg');
SELECT list_aggr(NULL::date, 'favg');
SELECT list_aggr(NULL::time, 'favg');
SELECT list_aggr(NULL::timestamp, 'favg');
SELECT list_aggr(NULL::timestamp_s, 'favg');
SELECT list_aggr(NULL::timestamp_ms, 'favg');
SELECT list_aggr(NULL::timestamp_ns, 'favg');
SELECT list_aggr(NULL::timetz, 'favg');
SELECT list_aggr(NULL::timestamptz, 'favg');
SELECT list_aggr(NULL::interval, 'favg');
SELECT list_aggr(NULL::blob, 'favg');
SELECT list_aggr('bit_and');
SELECT list_aggr(*, 'bit_and');
SELECT list_aggr('hello', 'bit_and');
SELECT list_aggr(1, 2, 'bit_and');
SELECT list_aggr(NULL::boolean, 'bit_and');
SELECT list_aggr(NULL::varchar, 'bit_and');
SELECT list_aggr(NULL::tinyint, 'bit_and');
SELECT list_aggr(NULL::smallint, 'bit_and');
SELECT list_aggr(NULL::integer, 'bit_and');
SELECT list_aggr(NULL::bigint, 'bit_and');
SELECT list_aggr(NULL::hugeint, 'bit_and');
SELECT list_aggr(NULL::utinyint, 'bit_and');
SELECT list_aggr(NULL::usmallint, 'bit_and');
SELECT list_aggr(NULL::uinteger, 'bit_and');
SELECT list_aggr(NULL::ubigint, 'bit_and');
SELECT list_aggr(NULL::uhugeint, 'bit_and');
SELECT list_aggr(NULL::float, 'bit_and');
SELECT list_aggr(NULL::double, 'bit_and');
SELECT list_aggr(NULL::decimal(4,1), 'bit_and');
SELECT list_aggr(NULL::decimal(9,4), 'bit_and');
SELECT list_aggr(NULL::decimal(18,6), 'bit_and');
SELECT list_aggr(NULL::decimal(38,10), 'bit_and');
SELECT list_aggr(NULL::date, 'bit_and');
SELECT list_aggr(NULL::time, 'bit_and');
SELECT list_aggr(NULL::timestamp, 'bit_and');
SELECT list_aggr(NULL::timestamp_s, 'bit_and');
SELECT list_aggr(NULL::timestamp_ms, 'bit_and');
SELECT list_aggr(NULL::timestamp_ns, 'bit_and');
SELECT list_aggr(NULL::timetz, 'bit_and');
SELECT list_aggr(NULL::timestamptz, 'bit_and');
SELECT list_aggr(NULL::interval, 'bit_and');
SELECT list_aggr(NULL::blob, 'bit_and');
SELECT list_aggr('bit_or');
SELECT list_aggr(*, 'bit_or');
SELECT list_aggr('hello', 'bit_or');
SELECT list_aggr(1, 2, 'bit_or');
SELECT list_aggr(NULL::boolean, 'bit_or');
SELECT list_aggr(NULL::varchar, 'bit_or');
SELECT list_aggr(NULL::tinyint, 'bit_or');
SELECT list_aggr(NULL::smallint, 'bit_or');
SELECT list_aggr(NULL::integer, 'bit_or');
SELECT list_aggr(NULL::bigint, 'bit_or');
SELECT list_aggr(NULL::hugeint, 'bit_or');
SELECT list_aggr(NULL::utinyint, 'bit_or');
SELECT list_aggr(NULL::usmallint, 'bit_or');
SELECT list_aggr(NULL::uinteger, 'bit_or');
SELECT list_aggr(NULL::ubigint, 'bit_or');
SELECT list_aggr(NULL::uhugeint, 'bit_or');
SELECT list_aggr(NULL::float, 'bit_or');
SELECT list_aggr(NULL::double, 'bit_or');
SELECT list_aggr(NULL::decimal(4,1), 'bit_or');
SELECT list_aggr(NULL::decimal(9,4), 'bit_or');
SELECT list_aggr(NULL::decimal(18,6), 'bit_or');
SELECT list_aggr(NULL::decimal(38,10), 'bit_or');
SELECT list_aggr(NULL::date, 'bit_or');
SELECT list_aggr(NULL::time, 'bit_or');
SELECT list_aggr(NULL::timestamp, 'bit_or');
SELECT list_aggr(NULL::timestamp_s, 'bit_or');
SELECT list_aggr(NULL::timestamp_ms, 'bit_or');
SELECT list_aggr(NULL::timestamp_ns, 'bit_or');
SELECT list_aggr(NULL::timetz, 'bit_or');
SELECT list_aggr(NULL::timestamptz, 'bit_or');
SELECT list_aggr(NULL::interval, 'bit_or');
SELECT list_aggr(NULL::blob, 'bit_or');
SELECT list_aggr('bit_xor');
SELECT list_aggr(*, 'bit_xor');
SELECT list_aggr('hello', 'bit_xor');
SELECT list_aggr(1, 2, 'bit_xor');
SELECT list_aggr(NULL::boolean, 'bit_xor');
SELECT list_aggr(NULL::varchar, 'bit_xor');
SELECT list_aggr(NULL::tinyint, 'bit_xor');
SELECT list_aggr(NULL::smallint, 'bit_xor');
SELECT list_aggr(NULL::integer, 'bit_xor');
SELECT list_aggr(NULL::bigint, 'bit_xor');
SELECT list_aggr(NULL::hugeint, 'bit_xor');
SELECT list_aggr(NULL::utinyint, 'bit_xor');
SELECT list_aggr(NULL::usmallint, 'bit_xor');
SELECT list_aggr(NULL::uinteger, 'bit_xor');
SELECT list_aggr(NULL::ubigint, 'bit_xor');
SELECT list_aggr(NULL::uhugeint, 'bit_xor');
SELECT list_aggr(NULL::float, 'bit_xor');
SELECT list_aggr(NULL::double, 'bit_xor');
SELECT list_aggr(NULL::decimal(4,1), 'bit_xor');
SELECT list_aggr(NULL::decimal(9,4), 'bit_xor');
SELECT list_aggr(NULL::decimal(18,6), 'bit_xor');
SELECT list_aggr(NULL::decimal(38,10), 'bit_xor');
SELECT list_aggr(NULL::date, 'bit_xor');
SELECT list_aggr(NULL::time, 'bit_xor');
SELECT list_aggr(NULL::timestamp, 'bit_xor');
SELECT list_aggr(NULL::timestamp_s, 'bit_xor');
SELECT list_aggr(NULL::timestamp_ms, 'bit_xor');
SELECT list_aggr(NULL::timestamp_ns, 'bit_xor');
SELECT list_aggr(NULL::timetz, 'bit_xor');
SELECT list_aggr(NULL::timestamptz, 'bit_xor');
SELECT list_aggr(NULL::interval, 'bit_xor');
SELECT list_aggr(NULL::blob, 'bit_xor');
SELECT list_aggr('bool_and');
SELECT list_aggr(*, 'bool_and');
SELECT list_aggr('hello', 'bool_and');
SELECT list_aggr(1, 2, 'bool_and');
SELECT list_aggr(NULL::boolean, 'bool_and');
SELECT list_aggr(NULL::varchar, 'bool_and');
SELECT list_aggr(NULL::tinyint, 'bool_and');
SELECT list_aggr(NULL::smallint, 'bool_and');
SELECT list_aggr(NULL::integer, 'bool_and');
SELECT list_aggr(NULL::bigint, 'bool_and');
SELECT list_aggr(NULL::hugeint, 'bool_and');
SELECT list_aggr(NULL::utinyint, 'bool_and');
SELECT list_aggr(NULL::usmallint, 'bool_and');
SELECT list_aggr(NULL::uinteger, 'bool_and');
SELECT list_aggr(NULL::ubigint, 'bool_and');
SELECT list_aggr(NULL::uhugeint, 'bool_and');
SELECT list_aggr(NULL::float, 'bool_and');
SELECT list_aggr(NULL::double, 'bool_and');
SELECT list_aggr(NULL::decimal(4,1), 'bool_and');
SELECT list_aggr(NULL::decimal(9,4), 'bool_and');
SELECT list_aggr(NULL::decimal(18,6), 'bool_and');
SELECT list_aggr(NULL::decimal(38,10), 'bool_and');
SELECT list_aggr(NULL::date, 'bool_and');
SELECT list_aggr(NULL::time, 'bool_and');
SELECT list_aggr(NULL::timestamp, 'bool_and');
SELECT list_aggr(NULL::timestamp_s, 'bool_and');
SELECT list_aggr(NULL::timestamp_ms, 'bool_and');
SELECT list_aggr(NULL::timestamp_ns, 'bool_and');
SELECT list_aggr(NULL::timetz, 'bool_and');
SELECT list_aggr(NULL::timestamptz, 'bool_and');
SELECT list_aggr(NULL::interval, 'bool_and');
SELECT list_aggr(NULL::blob, 'bool_and');
SELECT list_aggr('bool_or');
SELECT list_aggr(*, 'bool_or');
SELECT list_aggr('hello', 'bool_or');
SELECT list_aggr(1, 2, 'bool_or');
SELECT list_aggr(NULL::boolean, 'bool_or');
SELECT list_aggr(NULL::varchar, 'bool_or');
SELECT list_aggr(NULL::tinyint, 'bool_or');
SELECT list_aggr(NULL::smallint, 'bool_or');
SELECT list_aggr(NULL::integer, 'bool_or');
SELECT list_aggr(NULL::bigint, 'bool_or');
SELECT list_aggr(NULL::hugeint, 'bool_or');
SELECT list_aggr(NULL::utinyint, 'bool_or');
SELECT list_aggr(NULL::usmallint, 'bool_or');
SELECT list_aggr(NULL::uinteger, 'bool_or');
SELECT list_aggr(NULL::ubigint, 'bool_or');
SELECT list_aggr(NULL::uhugeint, 'bool_or');
SELECT list_aggr(NULL::float, 'bool_or');
SELECT list_aggr(NULL::double, 'bool_or');
SELECT list_aggr(NULL::decimal(4,1), 'bool_or');
SELECT list_aggr(NULL::decimal(9,4), 'bool_or');
SELECT list_aggr(NULL::decimal(18,6), 'bool_or');
SELECT list_aggr(NULL::decimal(38,10), 'bool_or');
SELECT list_aggr(NULL::date, 'bool_or');
SELECT list_aggr(NULL::time, 'bool_or');
SELECT list_aggr(NULL::timestamp, 'bool_or');
SELECT list_aggr(NULL::timestamp_s, 'bool_or');
SELECT list_aggr(NULL::timestamp_ms, 'bool_or');
SELECT list_aggr(NULL::timestamp_ns, 'bool_or');
SELECT list_aggr(NULL::timetz, 'bool_or');
SELECT list_aggr(NULL::timestamptz, 'bool_or');
SELECT list_aggr(NULL::interval, 'bool_or');
SELECT list_aggr(NULL::blob, 'bool_or');
SELECT list_aggr('count');
SELECT list_aggr(*, 'count');
SELECT list_aggr('hello', 'count');
SELECT list_aggr(1, 2, 'count');
SELECT list_aggr(NULL::boolean, 'count');
SELECT list_aggr(NULL::varchar, 'count');
SELECT list_aggr(NULL::tinyint, 'count');
SELECT list_aggr(NULL::smallint, 'count');
SELECT list_aggr(NULL::integer, 'count');
SELECT list_aggr(NULL::bigint, 'count');
SELECT list_aggr(NULL::hugeint, 'count');
SELECT list_aggr(NULL::utinyint, 'count');
SELECT list_aggr(NULL::usmallint, 'count');
SELECT list_aggr(NULL::uinteger, 'count');
SELECT list_aggr(NULL::ubigint, 'count');
SELECT list_aggr(NULL::uhugeint, 'count');
SELECT list_aggr(NULL::float, 'count');
SELECT list_aggr(NULL::double, 'count');
SELECT list_aggr(NULL::decimal(4,1), 'count');
SELECT list_aggr(NULL::decimal(9,4), 'count');
SELECT list_aggr(NULL::decimal(18,6), 'count');
SELECT list_aggr(NULL::decimal(38,10), 'count');
SELECT list_aggr(NULL::date, 'count');
SELECT list_aggr(NULL::time, 'count');
SELECT list_aggr(NULL::timestamp, 'count');
SELECT list_aggr(NULL::timestamp_s, 'count');
SELECT list_aggr(NULL::timestamp_ms, 'count');
SELECT list_aggr(NULL::timestamp_ns, 'count');
SELECT list_aggr(NULL::timetz, 'count');
SELECT list_aggr(NULL::timestamptz, 'count');
SELECT list_aggr(NULL::interval, 'count');
SELECT list_aggr(NULL::blob, 'count');
SELECT list_aggr('entropy');
SELECT list_aggr(*, 'entropy');
SELECT list_aggr('hello', 'entropy');
SELECT list_aggr(1, 2, 'entropy');
SELECT list_aggr(NULL::boolean, 'entropy');
SELECT list_aggr(NULL::varchar, 'entropy');
SELECT list_aggr(NULL::tinyint, 'entropy');
SELECT list_aggr(NULL::smallint, 'entropy');
SELECT list_aggr(NULL::integer, 'entropy');
SELECT list_aggr(NULL::bigint, 'entropy');
SELECT list_aggr(NULL::hugeint, 'entropy');
SELECT list_aggr(NULL::utinyint, 'entropy');
SELECT list_aggr(NULL::usmallint, 'entropy');
SELECT list_aggr(NULL::uinteger, 'entropy');
SELECT list_aggr(NULL::ubigint, 'entropy');
SELECT list_aggr(NULL::uhugeint, 'entropy');
SELECT list_aggr(NULL::float, 'entropy');
SELECT list_aggr(NULL::double, 'entropy');
SELECT list_aggr(NULL::decimal(4,1), 'entropy');
SELECT list_aggr(NULL::decimal(9,4), 'entropy');
SELECT list_aggr(NULL::decimal(18,6), 'entropy');
SELECT list_aggr(NULL::decimal(38,10), 'entropy');
SELECT list_aggr(NULL::date, 'entropy');
SELECT list_aggr(NULL::time, 'entropy');
SELECT list_aggr(NULL::timestamp, 'entropy');
SELECT list_aggr(NULL::timestamp_s, 'entropy');
SELECT list_aggr(NULL::timestamp_ms, 'entropy');
SELECT list_aggr(NULL::timestamp_ns, 'entropy');
SELECT list_aggr(NULL::timetz, 'entropy');
SELECT list_aggr(NULL::timestamptz, 'entropy');
SELECT list_aggr(NULL::interval, 'entropy');
SELECT list_aggr(NULL::blob, 'entropy');
SELECT list_aggr('first');
SELECT list_aggr(*, 'first');
SELECT list_aggr('hello', 'first');
SELECT list_aggr(1, 2, 'first');
SELECT list_aggr(NULL::boolean, 'first');
SELECT list_aggr(NULL::varchar, 'first');
SELECT list_aggr(NULL::tinyint, 'first');
SELECT list_aggr(NULL::smallint, 'first');
SELECT list_aggr(NULL::integer, 'first');
SELECT list_aggr(NULL::bigint, 'first');
SELECT list_aggr(NULL::hugeint, 'first');
SELECT list_aggr(NULL::utinyint, 'first');
SELECT list_aggr(NULL::usmallint, 'first');
SELECT list_aggr(NULL::uinteger, 'first');
SELECT list_aggr(NULL::ubigint, 'first');
SELECT list_aggr(NULL::uhugeint, 'first');
SELECT list_aggr(NULL::float, 'first');
SELECT list_aggr(NULL::double, 'first');
SELECT list_aggr(NULL::decimal(4,1), 'first');
SELECT list_aggr(NULL::decimal(9,4), 'first');
SELECT list_aggr(NULL::decimal(18,6), 'first');
SELECT list_aggr(NULL::decimal(38,10), 'first');
SELECT list_aggr(NULL::date, 'first');
SELECT list_aggr(NULL::time, 'first');
SELECT list_aggr(NULL::timestamp, 'first');
SELECT list_aggr(NULL::timestamp_s, 'first');
SELECT list_aggr(NULL::timestamp_ms, 'first');
SELECT list_aggr(NULL::timestamp_ns, 'first');
SELECT list_aggr(NULL::timetz, 'first');
SELECT list_aggr(NULL::timestamptz, 'first');
SELECT list_aggr(NULL::interval, 'first');
SELECT list_aggr(NULL::blob, 'first');
SELECT list_aggr('arbitrary');
SELECT list_aggr(*, 'arbitrary');
SELECT list_aggr('hello', 'arbitrary');
SELECT list_aggr(1, 2, 'arbitrary');
SELECT list_aggr(NULL::boolean, 'arbitrary');
SELECT list_aggr(NULL::varchar, 'arbitrary');
SELECT list_aggr(NULL::tinyint, 'arbitrary');
SELECT list_aggr(NULL::smallint, 'arbitrary');
SELECT list_aggr(NULL::integer, 'arbitrary');
SELECT list_aggr(NULL::bigint, 'arbitrary');
SELECT list_aggr(NULL::hugeint, 'arbitrary');
SELECT list_aggr(NULL::utinyint, 'arbitrary');
SELECT list_aggr(NULL::usmallint, 'arbitrary');
SELECT list_aggr(NULL::uinteger, 'arbitrary');
SELECT list_aggr(NULL::ubigint, 'arbitrary');
SELECT list_aggr(NULL::uhugeint, 'arbitrary');
SELECT list_aggr(NULL::float, 'arbitrary');
SELECT list_aggr(NULL::double, 'arbitrary');
SELECT list_aggr(NULL::decimal(4,1), 'arbitrary');
SELECT list_aggr(NULL::decimal(9,4), 'arbitrary');
SELECT list_aggr(NULL::decimal(18,6), 'arbitrary');
SELECT list_aggr(NULL::decimal(38,10), 'arbitrary');
SELECT list_aggr(NULL::date, 'arbitrary');
SELECT list_aggr(NULL::time, 'arbitrary');
SELECT list_aggr(NULL::timestamp, 'arbitrary');
SELECT list_aggr(NULL::timestamp_s, 'arbitrary');
SELECT list_aggr(NULL::timestamp_ms, 'arbitrary');
SELECT list_aggr(NULL::timestamp_ns, 'arbitrary');
SELECT list_aggr(NULL::timetz, 'arbitrary');
SELECT list_aggr(NULL::timestamptz, 'arbitrary');
SELECT list_aggr(NULL::interval, 'arbitrary');
SELECT list_aggr(NULL::blob, 'arbitrary');
SELECT list_aggr('histogram');
SELECT list_aggr(*, 'histogram');
SELECT list_aggr('hello', 'histogram');
SELECT list_aggr(1, 2, 'histogram');
SELECT list_aggr(NULL::boolean, 'histogram');
SELECT list_aggr(NULL::varchar, 'histogram');
SELECT list_aggr(NULL::tinyint, 'histogram');
SELECT list_aggr(NULL::smallint, 'histogram');
SELECT list_aggr(NULL::integer, 'histogram');
SELECT list_aggr(NULL::bigint, 'histogram');
SELECT list_aggr(NULL::hugeint, 'histogram');
SELECT list_aggr(NULL::utinyint, 'histogram');
SELECT list_aggr(NULL::usmallint, 'histogram');
SELECT list_aggr(NULL::uinteger, 'histogram');
SELECT list_aggr(NULL::ubigint, 'histogram');
SELECT list_aggr(NULL::uhugeint, 'histogram');
SELECT list_aggr(NULL::float, 'histogram');
SELECT list_aggr(NULL::double, 'histogram');
SELECT list_aggr(NULL::decimal(4,1), 'histogram');
SELECT list_aggr(NULL::decimal(9,4), 'histogram');
SELECT list_aggr(NULL::decimal(18,6), 'histogram');
SELECT list_aggr(NULL::decimal(38,10), 'histogram');
SELECT list_aggr(NULL::date, 'histogram');
SELECT list_aggr(NULL::time, 'histogram');
SELECT list_aggr(NULL::timestamp, 'histogram');
SELECT list_aggr(NULL::timestamp_s, 'histogram');
SELECT list_aggr(NULL::timestamp_ms, 'histogram');
SELECT list_aggr(NULL::timestamp_ns, 'histogram');
SELECT list_aggr(NULL::timetz, 'histogram');
SELECT list_aggr(NULL::timestamptz, 'histogram');
SELECT list_aggr(NULL::interval, 'histogram');
SELECT list_aggr(NULL::blob, 'histogram');
SELECT list_aggr('kurtosis');
SELECT list_aggr(*, 'kurtosis');
SELECT list_aggr('hello', 'kurtosis');
SELECT list_aggr(1, 2, 'kurtosis');
SELECT list_aggr(NULL::boolean, 'kurtosis');
SELECT list_aggr(NULL::varchar, 'kurtosis');
SELECT list_aggr(NULL::tinyint, 'kurtosis');
SELECT list_aggr(NULL::smallint, 'kurtosis');
SELECT list_aggr(NULL::integer, 'kurtosis');
SELECT list_aggr(NULL::bigint, 'kurtosis');
SELECT list_aggr(NULL::hugeint, 'kurtosis');
SELECT list_aggr(NULL::utinyint, 'kurtosis');
SELECT list_aggr(NULL::usmallint, 'kurtosis');
SELECT list_aggr(NULL::uinteger, 'kurtosis');
SELECT list_aggr(NULL::ubigint, 'kurtosis');
SELECT list_aggr(NULL::uhugeint, 'kurtosis');
SELECT list_aggr(NULL::float, 'kurtosis');
SELECT list_aggr(NULL::double, 'kurtosis');
SELECT list_aggr(NULL::decimal(4,1), 'kurtosis');
SELECT list_aggr(NULL::decimal(9,4), 'kurtosis');
SELECT list_aggr(NULL::decimal(18,6), 'kurtosis');
SELECT list_aggr(NULL::decimal(38,10), 'kurtosis');
SELECT list_aggr(NULL::date, 'kurtosis');
SELECT list_aggr(NULL::time, 'kurtosis');
SELECT list_aggr(NULL::timestamp, 'kurtosis');
SELECT list_aggr(NULL::timestamp_s, 'kurtosis');
SELECT list_aggr(NULL::timestamp_ms, 'kurtosis');
SELECT list_aggr(NULL::timestamp_ns, 'kurtosis');
SELECT list_aggr(NULL::timetz, 'kurtosis');
SELECT list_aggr(NULL::timestamptz, 'kurtosis');
SELECT list_aggr(NULL::interval, 'kurtosis');
SELECT list_aggr(NULL::blob, 'kurtosis');
SELECT list_aggr('last');
SELECT list_aggr(*, 'last');
SELECT list_aggr('hello', 'last');
SELECT list_aggr(1, 2, 'last');
SELECT list_aggr(NULL::boolean, 'last');
SELECT list_aggr(NULL::varchar, 'last');
SELECT list_aggr(NULL::tinyint, 'last');
SELECT list_aggr(NULL::smallint, 'last');
SELECT list_aggr(NULL::integer, 'last');
SELECT list_aggr(NULL::bigint, 'last');
SELECT list_aggr(NULL::hugeint, 'last');
SELECT list_aggr(NULL::utinyint, 'last');
SELECT list_aggr(NULL::usmallint, 'last');
SELECT list_aggr(NULL::uinteger, 'last');
SELECT list_aggr(NULL::ubigint, 'last');
SELECT list_aggr(NULL::uhugeint, 'last');
SELECT list_aggr(NULL::float, 'last');
SELECT list_aggr(NULL::double, 'last');
SELECT list_aggr(NULL::decimal(4,1), 'last');
SELECT list_aggr(NULL::decimal(9,4), 'last');
SELECT list_aggr(NULL::decimal(18,6), 'last');
SELECT list_aggr(NULL::decimal(38,10), 'last');
SELECT list_aggr(NULL::date, 'last');
SELECT list_aggr(NULL::time, 'last');
SELECT list_aggr(NULL::timestamp, 'last');
SELECT list_aggr(NULL::timestamp_s, 'last');
SELECT list_aggr(NULL::timestamp_ms, 'last');
SELECT list_aggr(NULL::timestamp_ns, 'last');
SELECT list_aggr(NULL::timetz, 'last');
SELECT list_aggr(NULL::timestamptz, 'last');
SELECT list_aggr(NULL::interval, 'last');
SELECT list_aggr(NULL::blob, 'last');
SELECT list_aggr('mad');
SELECT list_aggr(*, 'mad');
SELECT list_aggr('hello', 'mad');
SELECT list_aggr(1, 2, 'mad');
SELECT list_aggr(NULL::boolean, 'mad');
SELECT list_aggr(NULL::varchar, 'mad');
SELECT list_aggr(NULL::tinyint, 'mad');
SELECT list_aggr(NULL::smallint, 'mad');
SELECT list_aggr(NULL::integer, 'mad');
SELECT list_aggr(NULL::bigint, 'mad');
SELECT list_aggr(NULL::hugeint, 'mad');
SELECT list_aggr(NULL::utinyint, 'mad');
SELECT list_aggr(NULL::usmallint, 'mad');
SELECT list_aggr(NULL::uinteger, 'mad');
SELECT list_aggr(NULL::ubigint, 'mad');
SELECT list_aggr(NULL::uhugeint, 'mad');
SELECT list_aggr(NULL::float, 'mad');
SELECT list_aggr(NULL::double, 'mad');
SELECT list_aggr(NULL::decimal(4,1), 'mad');
SELECT list_aggr(NULL::decimal(9,4), 'mad');
SELECT list_aggr(NULL::decimal(18,6), 'mad');
SELECT list_aggr(NULL::decimal(38,10), 'mad');
SELECT list_aggr(NULL::date, 'mad');
SELECT list_aggr(NULL::time, 'mad');
SELECT list_aggr(NULL::timestamp, 'mad');
SELECT list_aggr(NULL::timestamp_s, 'mad');
SELECT list_aggr(NULL::timestamp_ms, 'mad');
SELECT list_aggr(NULL::timestamp_ns, 'mad');
SELECT list_aggr(NULL::timetz, 'mad');
SELECT list_aggr(NULL::timestamptz, 'mad');
SELECT list_aggr(NULL::interval, 'mad');
SELECT list_aggr(NULL::blob, 'mad');
SELECT list_aggr('max');
SELECT list_aggr(*, 'max');
SELECT list_aggr('hello', 'max');
SELECT list_aggr(1, 2, 'max');
SELECT list_aggr(NULL::boolean, 'max');
SELECT list_aggr(NULL::varchar, 'max');
SELECT list_aggr(NULL::tinyint, 'max');
SELECT list_aggr(NULL::smallint, 'max');
SELECT list_aggr(NULL::integer, 'max');
SELECT list_aggr(NULL::bigint, 'max');
SELECT list_aggr(NULL::hugeint, 'max');
SELECT list_aggr(NULL::utinyint, 'max');
SELECT list_aggr(NULL::usmallint, 'max');
SELECT list_aggr(NULL::uinteger, 'max');
SELECT list_aggr(NULL::ubigint, 'max');
SELECT list_aggr(NULL::uhugeint, 'max');
SELECT list_aggr(NULL::float, 'max');
SELECT list_aggr(NULL::double, 'max');
SELECT list_aggr(NULL::decimal(4,1), 'max');
SELECT list_aggr(NULL::decimal(9,4), 'max');
SELECT list_aggr(NULL::decimal(18,6), 'max');
SELECT list_aggr(NULL::decimal(38,10), 'max');
SELECT list_aggr(NULL::date, 'max');
SELECT list_aggr(NULL::time, 'max');
SELECT list_aggr(NULL::timestamp, 'max');
SELECT list_aggr(NULL::timestamp_s, 'max');
SELECT list_aggr(NULL::timestamp_ms, 'max');
SELECT list_aggr(NULL::timestamp_ns, 'max');
SELECT list_aggr(NULL::timetz, 'max');
SELECT list_aggr(NULL::timestamptz, 'max');
SELECT list_aggr(NULL::interval, 'max');
SELECT list_aggr(NULL::blob, 'max');
SELECT list_aggr('median');
SELECT list_aggr(*, 'median');
SELECT list_aggr('hello', 'median');
SELECT list_aggr(1, 2, 'median');
SELECT list_aggr(NULL::boolean, 'median');
SELECT list_aggr(NULL::varchar, 'median');
SELECT list_aggr(NULL::tinyint, 'median');
SELECT list_aggr(NULL::smallint, 'median');
SELECT list_aggr(NULL::integer, 'median');
SELECT list_aggr(NULL::bigint, 'median');
SELECT list_aggr(NULL::hugeint, 'median');
SELECT list_aggr(NULL::utinyint, 'median');
SELECT list_aggr(NULL::usmallint, 'median');
SELECT list_aggr(NULL::uinteger, 'median');
SELECT list_aggr(NULL::ubigint, 'median');
SELECT list_aggr(NULL::uhugeint, 'median');
SELECT list_aggr(NULL::float, 'median');
SELECT list_aggr(NULL::double, 'median');
SELECT list_aggr(NULL::decimal(4,1), 'median');
SELECT list_aggr(NULL::decimal(9,4), 'median');
SELECT list_aggr(NULL::decimal(18,6), 'median');
SELECT list_aggr(NULL::decimal(38,10), 'median');
SELECT list_aggr(NULL::date, 'median');
SELECT list_aggr(NULL::time, 'median');
SELECT list_aggr(NULL::timestamp, 'median');
SELECT list_aggr(NULL::timestamp_s, 'median');
SELECT list_aggr(NULL::timestamp_ms, 'median');
SELECT list_aggr(NULL::timestamp_ns, 'median');
SELECT list_aggr(NULL::timetz, 'median');
SELECT list_aggr(NULL::timestamptz, 'median');
SELECT list_aggr(NULL::interval, 'median');
SELECT list_aggr(NULL::blob, 'median');
SELECT list_aggr('min');
SELECT list_aggr(*, 'min');
SELECT list_aggr('hello', 'min');
SELECT list_aggr(1, 2, 'min');
SELECT list_aggr(NULL::boolean, 'min');
SELECT list_aggr(NULL::varchar, 'min');
SELECT list_aggr(NULL::tinyint, 'min');
SELECT list_aggr(NULL::smallint, 'min');
SELECT list_aggr(NULL::integer, 'min');
SELECT list_aggr(NULL::bigint, 'min');
SELECT list_aggr(NULL::hugeint, 'min');
SELECT list_aggr(NULL::utinyint, 'min');
SELECT list_aggr(NULL::usmallint, 'min');
SELECT list_aggr(NULL::uinteger, 'min');
SELECT list_aggr(NULL::ubigint, 'min');
SELECT list_aggr(NULL::uhugeint, 'min');
SELECT list_aggr(NULL::float, 'min');
SELECT list_aggr(NULL::double, 'min');
SELECT list_aggr(NULL::decimal(4,1), 'min');
SELECT list_aggr(NULL::decimal(9,4), 'min');
SELECT list_aggr(NULL::decimal(18,6), 'min');
SELECT list_aggr(NULL::decimal(38,10), 'min');
SELECT list_aggr(NULL::date, 'min');
SELECT list_aggr(NULL::time, 'min');
SELECT list_aggr(NULL::timestamp, 'min');
SELECT list_aggr(NULL::timestamp_s, 'min');
SELECT list_aggr(NULL::timestamp_ms, 'min');
SELECT list_aggr(NULL::timestamp_ns, 'min');
SELECT list_aggr(NULL::timetz, 'min');
SELECT list_aggr(NULL::timestamptz, 'min');
SELECT list_aggr(NULL::interval, 'min');
SELECT list_aggr(NULL::blob, 'min');
SELECT list_aggr('mode');
SELECT list_aggr(*, 'mode');
SELECT list_aggr('hello', 'mode');
SELECT list_aggr(1, 2, 'mode');
SELECT list_aggr(NULL::boolean, 'mode');
SELECT list_aggr(NULL::varchar, 'mode');
SELECT list_aggr(NULL::tinyint, 'mode');
SELECT list_aggr(NULL::smallint, 'mode');
SELECT list_aggr(NULL::integer, 'mode');
SELECT list_aggr(NULL::bigint, 'mode');
SELECT list_aggr(NULL::hugeint, 'mode');
SELECT list_aggr(NULL::utinyint, 'mode');
SELECT list_aggr(NULL::usmallint, 'mode');
SELECT list_aggr(NULL::uinteger, 'mode');
SELECT list_aggr(NULL::ubigint, 'mode');
SELECT list_aggr(NULL::uhugeint, 'mode');
SELECT list_aggr(NULL::float, 'mode');
SELECT list_aggr(NULL::double, 'mode');
SELECT list_aggr(NULL::decimal(4,1), 'mode');
SELECT list_aggr(NULL::decimal(9,4), 'mode');
SELECT list_aggr(NULL::decimal(18,6), 'mode');
SELECT list_aggr(NULL::decimal(38,10), 'mode');
SELECT list_aggr(NULL::date, 'mode');
SELECT list_aggr(NULL::time, 'mode');
SELECT list_aggr(NULL::timestamp, 'mode');
SELECT list_aggr(NULL::timestamp_s, 'mode');
SELECT list_aggr(NULL::timestamp_ms, 'mode');
SELECT list_aggr(NULL::timestamp_ns, 'mode');
SELECT list_aggr(NULL::timetz, 'mode');
SELECT list_aggr(NULL::timestamptz, 'mode');
SELECT list_aggr(NULL::interval, 'mode');
SELECT list_aggr(NULL::blob, 'mode');
SELECT list_aggr('array_agg');
SELECT list_aggr(*, 'array_agg');
SELECT list_aggr('hello', 'array_agg');
SELECT list_aggr(1, 2, 'array_agg');
SELECT list_aggr(NULL::boolean, 'array_agg');
SELECT list_aggr(NULL::varchar, 'array_agg');
SELECT list_aggr(NULL::tinyint, 'array_agg');
SELECT list_aggr(NULL::smallint, 'array_agg');
SELECT list_aggr(NULL::integer, 'array_agg');
SELECT list_aggr(NULL::bigint, 'array_agg');
SELECT list_aggr(NULL::hugeint, 'array_agg');
SELECT list_aggr(NULL::utinyint, 'array_agg');
SELECT list_aggr(NULL::usmallint, 'array_agg');
SELECT list_aggr(NULL::uinteger, 'array_agg');
SELECT list_aggr(NULL::ubigint, 'array_agg');
SELECT list_aggr(NULL::uhugeint, 'array_agg');
SELECT list_aggr(NULL::float, 'array_agg');
SELECT list_aggr(NULL::double, 'array_agg');
SELECT list_aggr(NULL::decimal(4,1), 'array_agg');
SELECT list_aggr(NULL::decimal(9,4), 'array_agg');
SELECT list_aggr(NULL::decimal(18,6), 'array_agg');
SELECT list_aggr(NULL::decimal(38,10), 'array_agg');
SELECT list_aggr(NULL::date, 'array_agg');
SELECT list_aggr(NULL::time, 'array_agg');
SELECT list_aggr(NULL::timestamp, 'array_agg');
SELECT list_aggr(NULL::timestamp_s, 'array_agg');
SELECT list_aggr(NULL::timestamp_ms, 'array_agg');
SELECT list_aggr(NULL::timestamp_ns, 'array_agg');
SELECT list_aggr(NULL::timetz, 'array_agg');
SELECT list_aggr(NULL::timestamptz, 'array_agg');
SELECT list_aggr(NULL::interval, 'array_agg');
SELECT list_aggr(NULL::blob, 'array_agg');
SELECT list_aggr('list');
SELECT list_aggr(*, 'list');
SELECT list_aggr('hello', 'list');
SELECT list_aggr(1, 2, 'list');
SELECT list_aggr(NULL::boolean, 'list');
SELECT list_aggr(NULL::varchar, 'list');
SELECT list_aggr(NULL::tinyint, 'list');
SELECT list_aggr(NULL::smallint, 'list');
SELECT list_aggr(NULL::integer, 'list');
SELECT list_aggr(NULL::bigint, 'list');
SELECT list_aggr(NULL::hugeint, 'list');
SELECT list_aggr(NULL::utinyint, 'list');
SELECT list_aggr(NULL::usmallint, 'list');
SELECT list_aggr(NULL::uinteger, 'list');
SELECT list_aggr(NULL::ubigint, 'list');
SELECT list_aggr(NULL::uhugeint, 'list');
SELECT list_aggr(NULL::float, 'list');
SELECT list_aggr(NULL::double, 'list');
SELECT list_aggr(NULL::decimal(4,1), 'list');
SELECT list_aggr(NULL::decimal(9,4), 'list');
SELECT list_aggr(NULL::decimal(18,6), 'list');
SELECT list_aggr(NULL::decimal(38,10), 'list');
SELECT list_aggr(NULL::date, 'list');
SELECT list_aggr(NULL::time, 'list');
SELECT list_aggr(NULL::timestamp, 'list');
SELECT list_aggr(NULL::timestamp_s, 'list');
SELECT list_aggr(NULL::timestamp_ms, 'list');
SELECT list_aggr(NULL::timestamp_ns, 'list');
SELECT list_aggr(NULL::timetz, 'list');
SELECT list_aggr(NULL::timestamptz, 'list');
SELECT list_aggr(NULL::interval, 'list');
SELECT list_aggr(NULL::blob, 'list');
SELECT list_aggr('product');
SELECT list_aggr(*, 'product');
SELECT list_aggr('hello', 'product');
SELECT list_aggr(1, 2, 'product');
SELECT list_aggr(NULL::boolean, 'product');
SELECT list_aggr(NULL::varchar, 'product');
SELECT list_aggr(NULL::tinyint, 'product');
SELECT list_aggr(NULL::smallint, 'product');
SELECT list_aggr(NULL::integer, 'product');
SELECT list_aggr(NULL::bigint, 'product');
SELECT list_aggr(NULL::hugeint, 'product');
SELECT list_aggr(NULL::utinyint, 'product');
SELECT list_aggr(NULL::usmallint, 'product');
SELECT list_aggr(NULL::uinteger, 'product');
SELECT list_aggr(NULL::ubigint, 'product');
SELECT list_aggr(NULL::uhugeint, 'product');
SELECT list_aggr(NULL::float, 'product');
SELECT list_aggr(NULL::double, 'product');
SELECT list_aggr(NULL::decimal(4,1), 'product');
SELECT list_aggr(NULL::decimal(9,4), 'product');
SELECT list_aggr(NULL::decimal(18,6), 'product');
SELECT list_aggr(NULL::decimal(38,10), 'product');
SELECT list_aggr(NULL::date, 'product');
SELECT list_aggr(NULL::time, 'product');
SELECT list_aggr(NULL::timestamp, 'product');
SELECT list_aggr(NULL::timestamp_s, 'product');
SELECT list_aggr(NULL::timestamp_ms, 'product');
SELECT list_aggr(NULL::timestamp_ns, 'product');
SELECT list_aggr(NULL::timetz, 'product');
SELECT list_aggr(NULL::timestamptz, 'product');
SELECT list_aggr(NULL::interval, 'product');
SELECT list_aggr(NULL::blob, 'product');
SELECT list_aggr('sem');
SELECT list_aggr(*, 'sem');
SELECT list_aggr('hello', 'sem');
SELECT list_aggr(1, 2, 'sem');
SELECT list_aggr(NULL::boolean, 'sem');
SELECT list_aggr(NULL::varchar, 'sem');
SELECT list_aggr(NULL::tinyint, 'sem');
SELECT list_aggr(NULL::smallint, 'sem');
SELECT list_aggr(NULL::integer, 'sem');
SELECT list_aggr(NULL::bigint, 'sem');
SELECT list_aggr(NULL::hugeint, 'sem');
SELECT list_aggr(NULL::utinyint, 'sem');
SELECT list_aggr(NULL::usmallint, 'sem');
SELECT list_aggr(NULL::uinteger, 'sem');
SELECT list_aggr(NULL::ubigint, 'sem');
SELECT list_aggr(NULL::uhugeint, 'sem');
SELECT list_aggr(NULL::float, 'sem');
SELECT list_aggr(NULL::double, 'sem');
SELECT list_aggr(NULL::decimal(4,1), 'sem');
SELECT list_aggr(NULL::decimal(9,4), 'sem');
SELECT list_aggr(NULL::decimal(18,6), 'sem');
SELECT list_aggr(NULL::decimal(38,10), 'sem');
SELECT list_aggr(NULL::date, 'sem');
SELECT list_aggr(NULL::time, 'sem');
SELECT list_aggr(NULL::timestamp, 'sem');
SELECT list_aggr(NULL::timestamp_s, 'sem');
SELECT list_aggr(NULL::timestamp_ms, 'sem');
SELECT list_aggr(NULL::timestamp_ns, 'sem');
SELECT list_aggr(NULL::timetz, 'sem');
SELECT list_aggr(NULL::timestamptz, 'sem');
SELECT list_aggr(NULL::interval, 'sem');
SELECT list_aggr(NULL::blob, 'sem');
SELECT list_aggr('skewness');
SELECT list_aggr(*, 'skewness');
SELECT list_aggr('hello', 'skewness');
SELECT list_aggr(1, 2, 'skewness');
SELECT list_aggr(NULL::boolean, 'skewness');
SELECT list_aggr(NULL::varchar, 'skewness');
SELECT list_aggr(NULL::tinyint, 'skewness');
SELECT list_aggr(NULL::smallint, 'skewness');
SELECT list_aggr(NULL::integer, 'skewness');
SELECT list_aggr(NULL::bigint, 'skewness');
SELECT list_aggr(NULL::hugeint, 'skewness');
SELECT list_aggr(NULL::utinyint, 'skewness');
SELECT list_aggr(NULL::usmallint, 'skewness');
SELECT list_aggr(NULL::uinteger, 'skewness');
SELECT list_aggr(NULL::ubigint, 'skewness');
SELECT list_aggr(NULL::uhugeint, 'skewness');
SELECT list_aggr(NULL::float, 'skewness');
SELECT list_aggr(NULL::double, 'skewness');
SELECT list_aggr(NULL::decimal(4,1), 'skewness');
SELECT list_aggr(NULL::decimal(9,4), 'skewness');
SELECT list_aggr(NULL::decimal(18,6), 'skewness');
SELECT list_aggr(NULL::decimal(38,10), 'skewness');
SELECT list_aggr(NULL::date, 'skewness');
SELECT list_aggr(NULL::time, 'skewness');
SELECT list_aggr(NULL::timestamp, 'skewness');
SELECT list_aggr(NULL::timestamp_s, 'skewness');
SELECT list_aggr(NULL::timestamp_ms, 'skewness');
SELECT list_aggr(NULL::timestamp_ns, 'skewness');
SELECT list_aggr(NULL::timetz, 'skewness');
SELECT list_aggr(NULL::timestamptz, 'skewness');
SELECT list_aggr(NULL::interval, 'skewness');
SELECT list_aggr(NULL::blob, 'skewness');
SELECT list_aggr('string_agg');
SELECT list_aggr(*, 'string_agg');
SELECT list_aggr('hello', 'string_agg');
SELECT list_aggr(1, 2, 'string_agg');
SELECT list_aggr(NULL::boolean, 'string_agg');
SELECT list_aggr(NULL::varchar, 'string_agg');
SELECT list_aggr(NULL::tinyint, 'string_agg');
SELECT list_aggr(NULL::smallint, 'string_agg');
SELECT list_aggr(NULL::integer, 'string_agg');
SELECT list_aggr(NULL::bigint, 'string_agg');
SELECT list_aggr(NULL::hugeint, 'string_agg');
SELECT list_aggr(NULL::utinyint, 'string_agg');
SELECT list_aggr(NULL::usmallint, 'string_agg');
SELECT list_aggr(NULL::uinteger, 'string_agg');
SELECT list_aggr(NULL::ubigint, 'string_agg');
SELECT list_aggr(NULL::uhugeint, 'string_agg');
SELECT list_aggr(NULL::float, 'string_agg');
SELECT list_aggr(NULL::double, 'string_agg');
SELECT list_aggr(NULL::decimal(4,1), 'string_agg');
SELECT list_aggr(NULL::decimal(9,4), 'string_agg');
SELECT list_aggr(NULL::decimal(18,6), 'string_agg');
SELECT list_aggr(NULL::decimal(38,10), 'string_agg');
SELECT list_aggr(NULL::date, 'string_agg');
SELECT list_aggr(NULL::time, 'string_agg');
SELECT list_aggr(NULL::timestamp, 'string_agg');
SELECT list_aggr(NULL::timestamp_s, 'string_agg');
SELECT list_aggr(NULL::timestamp_ms, 'string_agg');
SELECT list_aggr(NULL::timestamp_ns, 'string_agg');
SELECT list_aggr(NULL::timetz, 'string_agg');
SELECT list_aggr(NULL::timestamptz, 'string_agg');
SELECT list_aggr(NULL::interval, 'string_agg');
SELECT list_aggr(NULL::blob, 'string_agg');
SELECT list_aggr('group_concat');
SELECT list_aggr(*, 'group_concat');
SELECT list_aggr('hello', 'group_concat');
SELECT list_aggr(1, 2, 'group_concat');
SELECT list_aggr(NULL::boolean, 'group_concat');
SELECT list_aggr(NULL::varchar, 'group_concat');
SELECT list_aggr(NULL::tinyint, 'group_concat');
SELECT list_aggr(NULL::smallint, 'group_concat');
SELECT list_aggr(NULL::integer, 'group_concat');
SELECT list_aggr(NULL::bigint, 'group_concat');
SELECT list_aggr(NULL::hugeint, 'group_concat');
SELECT list_aggr(NULL::utinyint, 'group_concat');
SELECT list_aggr(NULL::usmallint, 'group_concat');
SELECT list_aggr(NULL::uinteger, 'group_concat');
SELECT list_aggr(NULL::ubigint, 'group_concat');
SELECT list_aggr(NULL::uhugeint, 'group_concat');
SELECT list_aggr(NULL::float, 'group_concat');
SELECT list_aggr(NULL::double, 'group_concat');
SELECT list_aggr(NULL::decimal(4,1), 'group_concat');
SELECT list_aggr(NULL::decimal(9,4), 'group_concat');
SELECT list_aggr(NULL::decimal(18,6), 'group_concat');
SELECT list_aggr(NULL::decimal(38,10), 'group_concat');
SELECT list_aggr(NULL::date, 'group_concat');
SELECT list_aggr(NULL::time, 'group_concat');
SELECT list_aggr(NULL::timestamp, 'group_concat');
SELECT list_aggr(NULL::timestamp_s, 'group_concat');
SELECT list_aggr(NULL::timestamp_ms, 'group_concat');
SELECT list_aggr(NULL::timestamp_ns, 'group_concat');
SELECT list_aggr(NULL::timetz, 'group_concat');
SELECT list_aggr(NULL::timestamptz, 'group_concat');
SELECT list_aggr(NULL::interval, 'group_concat');
SELECT list_aggr(NULL::blob, 'group_concat');
SELECT list_aggr('sum');
SELECT list_aggr(*, 'sum');
SELECT list_aggr('hello', 'sum');
SELECT list_aggr(1, 2, 'sum');
SELECT list_aggr(NULL::boolean, 'sum');
SELECT list_aggr(NULL::varchar, 'sum');
SELECT list_aggr(NULL::tinyint, 'sum');
SELECT list_aggr(NULL::smallint, 'sum');
SELECT list_aggr(NULL::integer, 'sum');
SELECT list_aggr(NULL::bigint, 'sum');
SELECT list_aggr(NULL::hugeint, 'sum');
SELECT list_aggr(NULL::utinyint, 'sum');
SELECT list_aggr(NULL::usmallint, 'sum');
SELECT list_aggr(NULL::uinteger, 'sum');
SELECT list_aggr(NULL::ubigint, 'sum');
SELECT list_aggr(NULL::uhugeint, 'sum');
SELECT list_aggr(NULL::float, 'sum');
SELECT list_aggr(NULL::double, 'sum');
SELECT list_aggr(NULL::decimal(4,1), 'sum');
SELECT list_aggr(NULL::decimal(9,4), 'sum');
SELECT list_aggr(NULL::decimal(18,6), 'sum');
SELECT list_aggr(NULL::decimal(38,10), 'sum');
SELECT list_aggr(NULL::date, 'sum');
SELECT list_aggr(NULL::time, 'sum');
SELECT list_aggr(NULL::timestamp, 'sum');
SELECT list_aggr(NULL::timestamp_s, 'sum');
SELECT list_aggr(NULL::timestamp_ms, 'sum');
SELECT list_aggr(NULL::timestamp_ns, 'sum');
SELECT list_aggr(NULL::timetz, 'sum');
SELECT list_aggr(NULL::timestamptz, 'sum');
SELECT list_aggr(NULL::interval, 'sum');
SELECT list_aggr(NULL::blob, 'sum');
SELECT list_aggr('fsum');
SELECT list_aggr(*, 'fsum');
SELECT list_aggr('hello', 'fsum');
SELECT list_aggr(1, 2, 'fsum');
SELECT list_aggr(NULL::boolean, 'fsum');
SELECT list_aggr(NULL::varchar, 'fsum');
SELECT list_aggr(NULL::tinyint, 'fsum');
SELECT list_aggr(NULL::smallint, 'fsum');
SELECT list_aggr(NULL::integer, 'fsum');
SELECT list_aggr(NULL::bigint, 'fsum');
SELECT list_aggr(NULL::hugeint, 'fsum');
SELECT list_aggr(NULL::utinyint, 'fsum');
SELECT list_aggr(NULL::usmallint, 'fsum');
SELECT list_aggr(NULL::uinteger, 'fsum');
SELECT list_aggr(NULL::ubigint, 'fsum');
SELECT list_aggr(NULL::uhugeint, 'fsum');
SELECT list_aggr(NULL::float, 'fsum');
SELECT list_aggr(NULL::double, 'fsum');
SELECT list_aggr(NULL::decimal(4,1), 'fsum');
SELECT list_aggr(NULL::decimal(9,4), 'fsum');
SELECT list_aggr(NULL::decimal(18,6), 'fsum');
SELECT list_aggr(NULL::decimal(38,10), 'fsum');
SELECT list_aggr(NULL::date, 'fsum');
SELECT list_aggr(NULL::time, 'fsum');
SELECT list_aggr(NULL::timestamp, 'fsum');
SELECT list_aggr(NULL::timestamp_s, 'fsum');
SELECT list_aggr(NULL::timestamp_ms, 'fsum');
SELECT list_aggr(NULL::timestamp_ns, 'fsum');
SELECT list_aggr(NULL::timetz, 'fsum');
SELECT list_aggr(NULL::timestamptz, 'fsum');
SELECT list_aggr(NULL::interval, 'fsum');
SELECT list_aggr(NULL::blob, 'fsum');
SELECT list_aggr('sumKahan');
SELECT list_aggr(*, 'sumKahan');
SELECT list_aggr('hello', 'sumKahan');
SELECT list_aggr(1, 2, 'sumKahan');
SELECT list_aggr(NULL::boolean, 'sumKahan');
SELECT list_aggr(NULL::varchar, 'sumKahan');
SELECT list_aggr(NULL::tinyint, 'sumKahan');
SELECT list_aggr(NULL::smallint, 'sumKahan');
SELECT list_aggr(NULL::integer, 'sumKahan');
SELECT list_aggr(NULL::bigint, 'sumKahan');
SELECT list_aggr(NULL::hugeint, 'sumKahan');
SELECT list_aggr(NULL::utinyint, 'sumKahan');
SELECT list_aggr(NULL::usmallint, 'sumKahan');
SELECT list_aggr(NULL::uinteger, 'sumKahan');
SELECT list_aggr(NULL::ubigint, 'sumKahan');
SELECT list_aggr(NULL::uhugeint, 'sumKahan');
SELECT list_aggr(NULL::float, 'sumKahan');
SELECT list_aggr(NULL::double, 'sumKahan');
SELECT list_aggr(NULL::decimal(4,1), 'sumKahan');
SELECT list_aggr(NULL::decimal(9,4), 'sumKahan');
SELECT list_aggr(NULL::decimal(18,6), 'sumKahan');
SELECT list_aggr(NULL::decimal(38,10), 'sumKahan');
SELECT list_aggr(NULL::date, 'sumKahan');
SELECT list_aggr(NULL::time, 'sumKahan');
SELECT list_aggr(NULL::timestamp, 'sumKahan');
SELECT list_aggr(NULL::timestamp_s, 'sumKahan');
SELECT list_aggr(NULL::timestamp_ms, 'sumKahan');
SELECT list_aggr(NULL::timestamp_ns, 'sumKahan');
SELECT list_aggr(NULL::timetz, 'sumKahan');
SELECT list_aggr(NULL::timestamptz, 'sumKahan');
SELECT list_aggr(NULL::interval, 'sumKahan');
SELECT list_aggr(NULL::blob, 'sumKahan');
SELECT list_aggr('kahan_sum');
SELECT list_aggr(*, 'kahan_sum');
SELECT list_aggr('hello', 'kahan_sum');
SELECT list_aggr(1, 2, 'kahan_sum');
SELECT list_aggr(NULL::boolean, 'kahan_sum');
SELECT list_aggr(NULL::varchar, 'kahan_sum');
SELECT list_aggr(NULL::tinyint, 'kahan_sum');
SELECT list_aggr(NULL::smallint, 'kahan_sum');
SELECT list_aggr(NULL::integer, 'kahan_sum');
SELECT list_aggr(NULL::bigint, 'kahan_sum');
SELECT list_aggr(NULL::hugeint, 'kahan_sum');
SELECT list_aggr(NULL::utinyint, 'kahan_sum');
SELECT list_aggr(NULL::usmallint, 'kahan_sum');
SELECT list_aggr(NULL::uinteger, 'kahan_sum');
SELECT list_aggr(NULL::ubigint, 'kahan_sum');
SELECT list_aggr(NULL::uhugeint, 'kahan_sum');
SELECT list_aggr(NULL::float, 'kahan_sum');
SELECT list_aggr(NULL::double, 'kahan_sum');
SELECT list_aggr(NULL::decimal(4,1), 'kahan_sum');
SELECT list_aggr(NULL::decimal(9,4), 'kahan_sum');
SELECT list_aggr(NULL::decimal(18,6), 'kahan_sum');
SELECT list_aggr(NULL::decimal(38,10), 'kahan_sum');
SELECT list_aggr(NULL::date, 'kahan_sum');
SELECT list_aggr(NULL::time, 'kahan_sum');
SELECT list_aggr(NULL::timestamp, 'kahan_sum');
SELECT list_aggr(NULL::timestamp_s, 'kahan_sum');
SELECT list_aggr(NULL::timestamp_ms, 'kahan_sum');
SELECT list_aggr(NULL::timestamp_ns, 'kahan_sum');
SELECT list_aggr(NULL::timetz, 'kahan_sum');
SELECT list_aggr(NULL::timestamptz, 'kahan_sum');
SELECT list_aggr(NULL::interval, 'kahan_sum');
SELECT list_aggr(NULL::blob, 'kahan_sum');
SELECT list_aggr('var_samp');
SELECT list_aggr(*, 'var_samp');
SELECT list_aggr('hello', 'var_samp');
SELECT list_aggr(1, 2, 'var_samp');
SELECT list_aggr(NULL::boolean, 'var_samp');
SELECT list_aggr(NULL::varchar, 'var_samp');
SELECT list_aggr(NULL::tinyint, 'var_samp');
SELECT list_aggr(NULL::smallint, 'var_samp');
SELECT list_aggr(NULL::integer, 'var_samp');
SELECT list_aggr(NULL::bigint, 'var_samp');
SELECT list_aggr(NULL::hugeint, 'var_samp');
SELECT list_aggr(NULL::utinyint, 'var_samp');
SELECT list_aggr(NULL::usmallint, 'var_samp');
SELECT list_aggr(NULL::uinteger, 'var_samp');
SELECT list_aggr(NULL::ubigint, 'var_samp');
SELECT list_aggr(NULL::uhugeint, 'var_samp');
SELECT list_aggr(NULL::float, 'var_samp');
SELECT list_aggr(NULL::double, 'var_samp');
SELECT list_aggr(NULL::decimal(4,1), 'var_samp');
SELECT list_aggr(NULL::decimal(9,4), 'var_samp');
SELECT list_aggr(NULL::decimal(18,6), 'var_samp');
SELECT list_aggr(NULL::decimal(38,10), 'var_samp');
SELECT list_aggr(NULL::date, 'var_samp');
SELECT list_aggr(NULL::time, 'var_samp');
SELECT list_aggr(NULL::timestamp, 'var_samp');
SELECT list_aggr(NULL::timestamp_s, 'var_samp');
SELECT list_aggr(NULL::timestamp_ms, 'var_samp');
SELECT list_aggr(NULL::timestamp_ns, 'var_samp');
SELECT list_aggr(NULL::timetz, 'var_samp');
SELECT list_aggr(NULL::timestamptz, 'var_samp');
SELECT list_aggr(NULL::interval, 'var_samp');
SELECT list_aggr(NULL::blob, 'var_samp');
SELECT list_aggr('var_pop');
SELECT list_aggr(*, 'var_pop');
SELECT list_aggr('hello', 'var_pop');
SELECT list_aggr(1, 2, 'var_pop');
SELECT list_aggr(NULL::boolean, 'var_pop');
SELECT list_aggr(NULL::varchar, 'var_pop');
SELECT list_aggr(NULL::tinyint, 'var_pop');
SELECT list_aggr(NULL::smallint, 'var_pop');
SELECT list_aggr(NULL::integer, 'var_pop');
SELECT list_aggr(NULL::bigint, 'var_pop');
SELECT list_aggr(NULL::hugeint, 'var_pop');
SELECT list_aggr(NULL::utinyint, 'var_pop');
SELECT list_aggr(NULL::usmallint, 'var_pop');
SELECT list_aggr(NULL::uinteger, 'var_pop');
SELECT list_aggr(NULL::ubigint, 'var_pop');
SELECT list_aggr(NULL::uhugeint, 'var_pop');
SELECT list_aggr(NULL::float, 'var_pop');
SELECT list_aggr(NULL::double, 'var_pop');
SELECT list_aggr(NULL::decimal(4,1), 'var_pop');
SELECT list_aggr(NULL::decimal(9,4), 'var_pop');
SELECT list_aggr(NULL::decimal(18,6), 'var_pop');
SELECT list_aggr(NULL::decimal(38,10), 'var_pop');
SELECT list_aggr(NULL::date, 'var_pop');
SELECT list_aggr(NULL::time, 'var_pop');
SELECT list_aggr(NULL::timestamp, 'var_pop');
SELECT list_aggr(NULL::timestamp_s, 'var_pop');
SELECT list_aggr(NULL::timestamp_ms, 'var_pop');
SELECT list_aggr(NULL::timestamp_ns, 'var_pop');
SELECT list_aggr(NULL::timetz, 'var_pop');
SELECT list_aggr(NULL::timestamptz, 'var_pop');
SELECT list_aggr(NULL::interval, 'var_pop');
SELECT list_aggr(NULL::blob, 'var_pop');
SELECT list_aggr('stddev');
SELECT list_aggr(*, 'stddev');
SELECT list_aggr('hello', 'stddev');
SELECT list_aggr(1, 2, 'stddev');
SELECT list_aggr(NULL::boolean, 'stddev');
SELECT list_aggr(NULL::varchar, 'stddev');
SELECT list_aggr(NULL::tinyint, 'stddev');
SELECT list_aggr(NULL::smallint, 'stddev');
SELECT list_aggr(NULL::integer, 'stddev');
SELECT list_aggr(NULL::bigint, 'stddev');
SELECT list_aggr(NULL::hugeint, 'stddev');
SELECT list_aggr(NULL::utinyint, 'stddev');
SELECT list_aggr(NULL::usmallint, 'stddev');
SELECT list_aggr(NULL::uinteger, 'stddev');
SELECT list_aggr(NULL::ubigint, 'stddev');
SELECT list_aggr(NULL::uhugeint, 'stddev');
SELECT list_aggr(NULL::float, 'stddev');
SELECT list_aggr(NULL::double, 'stddev');
SELECT list_aggr(NULL::decimal(4,1), 'stddev');
SELECT list_aggr(NULL::decimal(9,4), 'stddev');
SELECT list_aggr(NULL::decimal(18,6), 'stddev');
SELECT list_aggr(NULL::decimal(38,10), 'stddev');
SELECT list_aggr(NULL::date, 'stddev');
SELECT list_aggr(NULL::time, 'stddev');
SELECT list_aggr(NULL::timestamp, 'stddev');
SELECT list_aggr(NULL::timestamp_s, 'stddev');
SELECT list_aggr(NULL::timestamp_ms, 'stddev');
SELECT list_aggr(NULL::timestamp_ns, 'stddev');
SELECT list_aggr(NULL::timetz, 'stddev');
SELECT list_aggr(NULL::timestamptz, 'stddev');
SELECT list_aggr(NULL::interval, 'stddev');
SELECT list_aggr(NULL::blob, 'stddev');
SELECT list_aggr('stddev_pop');
SELECT list_aggr(*, 'stddev_pop');
SELECT list_aggr('hello', 'stddev_pop');
SELECT list_aggr(1, 2, 'stddev_pop');
SELECT list_aggr(NULL::boolean, 'stddev_pop');
SELECT list_aggr(NULL::varchar, 'stddev_pop');
SELECT list_aggr(NULL::tinyint, 'stddev_pop');
SELECT list_aggr(NULL::smallint, 'stddev_pop');
SELECT list_aggr(NULL::integer, 'stddev_pop');
SELECT list_aggr(NULL::bigint, 'stddev_pop');
SELECT list_aggr(NULL::hugeint, 'stddev_pop');
SELECT list_aggr(NULL::utinyint, 'stddev_pop');
SELECT list_aggr(NULL::usmallint, 'stddev_pop');
SELECT list_aggr(NULL::uinteger, 'stddev_pop');
SELECT list_aggr(NULL::ubigint, 'stddev_pop');
SELECT list_aggr(NULL::uhugeint, 'stddev_pop');
SELECT list_aggr(NULL::float, 'stddev_pop');
SELECT list_aggr(NULL::double, 'stddev_pop');
SELECT list_aggr(NULL::decimal(4,1), 'stddev_pop');
SELECT list_aggr(NULL::decimal(9,4), 'stddev_pop');
SELECT list_aggr(NULL::decimal(18,6), 'stddev_pop');
SELECT list_aggr(NULL::decimal(38,10), 'stddev_pop');
SELECT list_aggr(NULL::date, 'stddev_pop');
SELECT list_aggr(NULL::time, 'stddev_pop');
SELECT list_aggr(NULL::timestamp, 'stddev_pop');
SELECT list_aggr(NULL::timestamp_s, 'stddev_pop');
SELECT list_aggr(NULL::timestamp_ms, 'stddev_pop');
SELECT list_aggr(NULL::timestamp_ns, 'stddev_pop');
SELECT list_aggr(NULL::timetz, 'stddev_pop');
SELECT list_aggr(NULL::timestamptz, 'stddev_pop');
SELECT list_aggr(NULL::interval, 'stddev_pop');
SELECT list_aggr(NULL::blob, 'stddev_pop');
SELECT list_aggr('variance');
SELECT list_aggr(*, 'variance');
SELECT list_aggr('hello', 'variance');
SELECT list_aggr(1, 2, 'variance');
SELECT list_aggr(NULL::boolean, 'variance');
SELECT list_aggr(NULL::varchar, 'variance');
SELECT list_aggr(NULL::tinyint, 'variance');
SELECT list_aggr(NULL::smallint, 'variance');
SELECT list_aggr(NULL::integer, 'variance');
SELECT list_aggr(NULL::bigint, 'variance');
SELECT list_aggr(NULL::hugeint, 'variance');
SELECT list_aggr(NULL::utinyint, 'variance');
SELECT list_aggr(NULL::usmallint, 'variance');
SELECT list_aggr(NULL::uinteger, 'variance');
SELECT list_aggr(NULL::ubigint, 'variance');
SELECT list_aggr(NULL::uhugeint, 'variance');
SELECT list_aggr(NULL::float, 'variance');
SELECT list_aggr(NULL::double, 'variance');
SELECT list_aggr(NULL::decimal(4,1), 'variance');
SELECT list_aggr(NULL::decimal(9,4), 'variance');
SELECT list_aggr(NULL::decimal(18,6), 'variance');
SELECT list_aggr(NULL::decimal(38,10), 'variance');
SELECT list_aggr(NULL::date, 'variance');
SELECT list_aggr(NULL::time, 'variance');
SELECT list_aggr(NULL::timestamp, 'variance');
SELECT list_aggr(NULL::timestamp_s, 'variance');
SELECT list_aggr(NULL::timestamp_ms, 'variance');
SELECT list_aggr(NULL::timestamp_ns, 'variance');
SELECT list_aggr(NULL::timetz, 'variance');
SELECT list_aggr(NULL::timestamptz, 'variance');
SELECT list_aggr(NULL::interval, 'variance');
SELECT list_aggr(NULL::blob, 'variance');
SELECT list_aggr('stddev_samp');
SELECT list_aggr(*, 'stddev_samp');
SELECT list_aggr('hello', 'stddev_samp');
SELECT list_aggr(1, 2, 'stddev_samp');
SELECT list_aggr(NULL::boolean, 'stddev_samp');
SELECT list_aggr(NULL::varchar, 'stddev_samp');
SELECT list_aggr(NULL::tinyint, 'stddev_samp');
SELECT list_aggr(NULL::smallint, 'stddev_samp');
SELECT list_aggr(NULL::integer, 'stddev_samp');
SELECT list_aggr(NULL::bigint, 'stddev_samp');
SELECT list_aggr(NULL::hugeint, 'stddev_samp');
SELECT list_aggr(NULL::utinyint, 'stddev_samp');
SELECT list_aggr(NULL::usmallint, 'stddev_samp');
SELECT list_aggr(NULL::uinteger, 'stddev_samp');
SELECT list_aggr(NULL::ubigint, 'stddev_samp');
SELECT list_aggr(NULL::uhugeint, 'stddev_samp');
SELECT list_aggr(NULL::float, 'stddev_samp');
SELECT list_aggr(NULL::double, 'stddev_samp');
SELECT list_aggr(NULL::decimal(4,1), 'stddev_samp');
SELECT list_aggr(NULL::decimal(9,4), 'stddev_samp');
SELECT list_aggr(NULL::decimal(18,6), 'stddev_samp');
SELECT list_aggr(NULL::decimal(38,10), 'stddev_samp');
SELECT list_aggr(NULL::date, 'stddev_samp');
SELECT list_aggr(NULL::time, 'stddev_samp');
SELECT list_aggr(NULL::timestamp, 'stddev_samp');
SELECT list_aggr(NULL::timestamp_s, 'stddev_samp');
SELECT list_aggr(NULL::timestamp_ms, 'stddev_samp');
SELECT list_aggr(NULL::timestamp_ns, 'stddev_samp');
SELECT list_aggr(NULL::timetz, 'stddev_samp');
SELECT list_aggr(NULL::timestamptz, 'stddev_samp');
SELECT list_aggr(NULL::interval, 'stddev_samp');
SELECT list_aggr(NULL::blob, 'stddev_samp');
SELECT list_aggr([1, 2, NULL], 'count_star');
SELECT list_aggr([1, 2, NULL], 'corr');
SELECT list_aggr([1, 2, NULL], 'covar_pop');
SELECT list_aggr([1, 2, NULL], 'covar_samp');
SELECT list_aggr([1, 2, NULL], 'regr_intercept');
SELECT list_aggr([1, 2, NULL], 'regr_sxy');
SELECT list_aggr([1, 2, NULL], 'regr_sxx');
SELECT list_aggr([1, 2, NULL], 'regr_syy');
SELECT list_aggr([1, 2, NULL], 'regr_r2');
SELECT list_aggr([1, 2, NULL], 'regr_slope');
SELECT list_aggr([1, 2, NULL], 'regr_count');
SELECT list_aggr([1, 2, NULL], 'regr_avgy');
SELECT list_aggr([1, 2, NULL], 'regr_avgx');
SELECT list_aggr([1, 2, NULL], 'reservoir_quantile');
SELECT list_aggr([1, 2, NULL], 'approx_quantile');
SELECT list_aggr([1, 2, NULL], 'quantile');
SELECT list_aggr([1, 2, NULL], 'quantile_cont');
SELECT list_aggr([1, 2, NULL], 'quantile_disc');
SELECT list_aggr([1, 2, NULL], 'arg_max');
SELECT list_aggr([1, 2, NULL], 'max_by');
SELECT list_aggr([1, 2, NULL], 'argmax');
SELECT list_aggr([1, 2, NULL], 'arg_min');
SELECT list_aggr([1, 2, NULL], 'min_by');
SELECT list_aggr([1, 2, NULL], 'argmin');
select list_entropy();
select list_entropy([1]);
create table aggr(k int[]);
insert into aggr values ([0, 1, 1, 1, 4, 0, 3, 3, 2, 2, 4, 4, 2, 4, 0, 0, 0, 1, 2, 3, 4, 2, 3, 3, 1]);
insert into aggr values ([]), ([NULL]), (NULL), ([0, 1, 1, 1, 4, NULL, 0, 3, 3, 2, NULL, 2, 4, 4, 2, 4, 0, 0, 0, 1, NULL, 2, 3, 4, 2, 3, 3, 1]);
select list_entropy(k) from aggr;
CREATE TABLE entr (l INTEGER[]);
INSERT INTO entr SELECT LIST(2) FROM range(100) tbl(i);
SELECT list_entropy(l) FROM entr;
create table aggr2 (k int[]);
INSERT INTO aggr2 VALUES ([0, 4, 0, 2, 2, 4, 4, 2, 4, 0, 0, 0, 2, 4, 2]);
INSERT INTO aggr2 VALUES ([1, 1, 1, 3, 3, 1, 3, 3, 3, 1]);
select list_entropy(k) from aggr2;
create table names (name string[]);
insert into names values (['pedro', 'pedro', 'pedro', 'hannes', 'hannes', 'mark', null]);
select list_entropy(name) from names;
CREATE SEQUENCE seq;
SELECT list_avg([nextval('seq')]);
SELECT list_avg([nextval('seq')]);
CREATE TABLE integers(i INTEGER[]);
INSERT INTO integers VALUES ([1, 2, 3]), ([6, 3, 2, 5]), ([]), ([NULL]), (NULL), ([1, NULL, 2, 3]);
SELECT list_avg(i) FROM integers;
SELECT list_avg();
CREATE TABLE vals(i INTEGER[], j HUGEINT[]);
INSERT INTO vals VALUES ([NULL, NULL], [NULL, NULL, NULL]);
SELECT list_avg(i), list_avg(j) FROM vals;
CREATE TABLE bigints(n HUGEINT[]);
INSERT INTO bigints (n) VALUES (['9007199254740992'::HUGEINT, 1::HUGEINT, 0::HUGEINT]);
select list_bool_or();
select list_bool_and();
CREATE TABLE bools (l BOOLEAN[]);
INSERT INTO bools SELECT LIST(True) FROM range(100) tbl(i);
INSERT INTO bools SELECT LIST(False) FROM range(100) tbl(i);
INSERT INTO bools VALUES ([True, False]);
INSERT INTO bools VALUES ([]), ([NULL]), (NULL), ([NULL, True, False, NULL]);
SELECT list_bool_or(l) FROM bools;
SELECT list_bool_and(l) FROM bools;
select list_product();
CREATE TABLE integers(i INTEGER[]);
INSERT INTO integers VALUES ([1, 2, 4]), (NULL), ([]), ([NULL]), ([1, 2, NULL, 4, NULL]);
SELECT list_product(i)  FROM integers;
CREATE TABLE prods AS SELECT LIST(2) AS i FROM range(100) t1(i);
SELECT list_product(i) FROM prods;
drop table prods;
CREATE TABLE prods AS SELECT LIST(2) AS i FROM range(100 // 2) t1(i);
SELECT list_product(i) FROM prods;
SELECT list_mad([1]);
CREATE TABLE const AS SELECT LIST(1) AS i FROM range(2000) t1(i);
SELECT list_mad(i) FROM const;
create table tinys as select list(r::tinyint) as r from range(100) tbl(r);
SELECT list_mad(r) FROM tinys;
drop table tinys;
create table tinys as select list(r::decimal(4,1)) as r from range(100) tbl(r);
SELECT list_mad(r) FROM tinys;
drop table tinys;
create table numerics as select list(r::smallint) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM numerics;
drop table numerics;
create table numerics as select list(r::integer) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM numerics;
drop table numerics;
create table numerics as select list(r::bigint) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM numerics;
drop table numerics;
create table numerics as select list(r::hugeint) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM numerics;
drop table numerics;
create table numerics as select list(r::float) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM numerics;
drop table numerics;
create table numerics as select list(r::double) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM numerics;
drop table numerics;
create table numerics as select list(r::decimal(8,1)) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM numerics;
drop table numerics;
create table numerics as select list(r::decimal(12,1)) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM numerics;
drop table numerics;
create table numerics as select list(r::decimal(18,1)) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM numerics;
drop table numerics;
create table numerics as select list(r::decimal(24,1)) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM numerics;
drop table numerics;
create table date as select list(('2018-01-01'::DATE + INTERVAL (r) DAY)::DATE) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM date;
create table hour as select list('2018-01-01'::TIMESTAMP + INTERVAL (r) HOUR) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM hour;
create table second as select list('00:00:00'::TIME + INTERVAL (r) SECOND) as r from range(10000) tbl(r);
SELECT list_mad(r) FROM second;
select list_mad(x) from (values (['294247-01-10'::date, '290309-12-22 (BC)'::date])) tbl(x);
select list_mad(x) from (values	(['294247-01-10 04:00:54.775806'::timestamp,
	'290309-12-22 (BC) 00:00:00'::timestamp])) tbl(x);
select list_mad(x) from (values (['23:59:59.999999'::time, '00:00:00'::time])) tbl(x);
SELECT list_mad(['2021-08-20'::date]);
SELECT list_mad([NULL::date]);
SELECT list_mad(['2021-08-20'::time]);
SELECT list_mad([NULL::time]);
SELECT list_mad(['2021-08-20'::timestamp]);
SELECT list_mad([NULL::timestamp]);
SELECT list_mad(['2021-08-20'::timestamp_s]);
SELECT list_mad([NULL::timestamp_s]);
SELECT list_mad(['2021-08-20'::timestamp_ms]);
SELECT list_mad([NULL::timestamp_ms]);
SELECT list_mad(['2021-08-20'::timestamp_ns]);
SELECT list_mad([NULL::timestamp_ns]);
SELECT list_mad(['2021-08-20'::timetz]);
SELECT list_mad([NULL::timetz]);
SELECT list_mad(['2021-08-20'::timestamptz]);
SELECT list_mad([NULL::timestamptz]);
SELECT list_mad([INTERVAL 1 YEAR]);
SELECT list_mad([NULL::INTERVAL]);
select list_mad(x) from (values (['127'::DECIMAL(3,0), '-128'::DECIMAL(3,0)])) tbl(x);
select list_mad(x) from (values (['32767'::DECIMAL(5,0), '-32768'::DECIMAL(5,0)])) tbl(x);
select list_mad(x) from (values (['2147483647'::DECIMAL(10,0), '-2147483648'::DECIMAL(10,0)])) tbl(x);
select list_mad(x) from (values ([-1e308, 1e308])) tbl(x);
SELECT list_last();
CREATE TABLE five AS SELECT LIST(i::tinyint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::smallint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::integer) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::bigint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::hugeint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::utinyint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::usmallint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::uinteger) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::ubigint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::uhugeint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::float) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::double) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five_dates AS
	SELECT
		LIST(i::integer) AS i,
		LIST('2021-08-20'::DATE + i::INTEGER) AS d,
		LIST('2021-08-20'::TIMESTAMP + INTERVAL (i) HOUR) AS dt,
		LIST('14:59:37'::TIME + INTERVAL (i) MINUTE) AS t,
		LIST(INTERVAL (i) SECOND) AS s
	FROM range(1, 6, 1) t1(i);
SELECT list_last(d), list_last(dt), list_last(t), list_last(s) FROM five_dates;
DROP TABLE five_dates;
CREATE TABLE five_dates_tz AS
	SELECT
		LIST(('2021-08-20'::TIMESTAMP + INTERVAL (i) HOUR)::TIMESTAMPTZ) AS dt,
		LIST(('14:59:37'::TIME + INTERVAL (i) MINUTE)::TIMETZ) AS t,
	FROM range(1, 6, 1) t1(i);
SELECT list_last(dt), list_last(t) FROM five_dates_tz;
DROP TABLE five_dates_tz;
CREATE TABLE five_complex AS
	SELECT
		LIST(i::integer) AS i,
		LIST(i::VARCHAR) AS s,
		LIST([i]) AS l,
		LIST({'a': i}) AS r
	FROM range(1, 6, 1) t1(i);
SELECT list_last(s), list_last(l), list_last(r)
FROM five_complex;
DROP TABLE five_complex;
CREATE TABLE five AS SELECT LIST(i::decimal(4,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(8,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(12,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(18,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([1, 2, NULL]);
SELECT list_last(i) FROM five;
DROP TABLE five;
CREATE TABLE const AS SELECT LIST(2) AS i FROM range(200) t1(i);
SELECT list_histogram(i) FROM const;
select list_histogram([1]);
CREATE TABLE hist_data (g INTEGER[]);
INSERT INTO hist_data VALUES ([1, 1, 2, 2, 2, 3, 5]), ([1, 2, 3, 4, 5, 6, NULL]), ([]), (NULL), ([NULL]);
SELECT list_histogram(g) from hist_data;
create table names (name string[]);
insert into names values (['pedro', 'pedro', 'pedro', 'hannes', 'hannes', 'mark', NULL, 'Hubert Blaine Wolfeschlegelsteinhausenbergerdorff Sr.']);
select list_histogram(name) from names;
select list_histogram();
SELECT list_histogram(['2021-08-20'::TIMESTAMP]);
SELECT list_histogram(['2021-08-20'::TIMESTAMP_S]);
SELECT list_histogram(['2021-08-20'::TIMESTAMP_MS]);
SELECT list_histogram(['2021-08-20'::TIMESTAMP_NS]);
SELECT list_histogram(['2021-08-20'::TIMESTAMPTZ]);
SELECT list_histogram(['2022-01-02'::DATE]);
SELECT list_histogram(['15:00:07'::TIME]);
SELECT list_histogram(['15:00:07'::TIMETZ]);
SELECT list_histogram([INTERVAL 1 YEAR]);
select list_skewness();
select list_skewness([1]);
CREATE TABLE skew AS SELECT LIST(10) AS i FROM range(5) t1(i);
select list_skewness (i) from skew;
select list_skewness([-2e307, 0, 2e307]);
create table aggr(k int[], v decimal(10,2)[], v2 decimal(10, 2)[]);
insert into aggr values ([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
	[10, 10, 10, 10, 20, 20, 25, 30, 30, 30, 30],
	[NULL, 11, 15, 18, 22, 25, NULL, 35, 40, 50, 51]),
	([], NULL, [NULL]);
select list_skewness(k), list_skewness(v), list_skewness(v2) from aggr;
create table aggr2(v2 decimal(10, 2)[]);
insert into aggr2 values ([NULL, 11, 15, 18]), ([22, 25]), ([NULL]), ([35, 40, 50, 51]);
select list_skewness(v2) from aggr2;
CREATE SEQUENCE seq;
SELECT list_bit_and([nextval('seq')]);
SELECT list_bit_and([nextval('seq')]);
CREATE TABLE integers(i INTEGER[]);
INSERT INTO integers VALUES ([3, 7, 15, 31, 3, 15]);
SELECT list_bit_and([]) FROM integers;
INSERT INTO integers VALUES ([]), (NULL), ([NULL]), ([3, 7, NULL, 15, 31, 3, 15, NULL]);
SELECT list_bit_and(i), list_bit_and([1, 1, 1, 1, 1, 1]), list_bit_and(NULL) FROM integers;
SELECT list_bit_and();
CREATE TABLE hugeints(h HUGEINT[]);
INSERT INTO hugeints VALUES ([NULL, 1, 2]), (NULL), ([]), ([NULL]), ([1, 2, 3]);
SELECT list_first(h), list_last(h), list_sum(h) FROM hugeints;
DELETE FROM hugeints;
INSERT INTO hugeints VALUES ([42.0, 1267650600228229401496703205376, -439847238974238975238975, '-12']);
SELECT list_min(h), list_max(h), list_sum(h), list_first(h), list_last(h) FROM hugeints;
SELECT list_min(list_concat([1, 2], [-1]));
SELECT list_min(list_aggr([1, 2], 'list'));
CREATE TABLE lists (l1 INTEGER[], l2 INTEGER[]);
INSERT INTO lists VALUES ([1, 2, 3], [4]), ([NULL, 1, -4, NULL], [NULL]), (NULL, NULL), ([NULL], [-4]), ([], []);
SELECT list_last(list_concat(l1, l2)) FROM lists;
SELECT list_concat(list(list_last(l1)), list(list_first(l2))) FROM lists;
SELECT array_aggregate([1, 2], 'min');
SELECT array_aggr([1, 2], 'min');
SELECT list_aggregate([1, 2], 'min');
select list_sem();
select list_sem([1]);
create table aggr(k int[], v decimal(10,2)[], v2 decimal(10, 2)[]);
insert into aggr values ([1, 2, 2, 2, 2], [10, 10, 20, 25, 30], [NULL, 11, 22, NULL, 35]);
select list_sem(k), list_sem(v), list_sem(v2)  from aggr;
create table sems (l int[]);
insert into sems values ([1, 2, 2, 2, 2]), ([1, 2, NULL, 2, 2, NULL, 2]), ([]), ([NULL]), (NULL);
select list_sem(l) from sems;
SELECT list_aggr([1, 2], 'arbitrary');
SELECT list_first();
CREATE TABLE five AS SELECT LIST(i::tinyint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::smallint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::integer) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::bigint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::hugeint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::utinyint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::usmallint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::uinteger) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::ubigint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::uhugeint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::float) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::double) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five_dates AS
	SELECT
		LIST(i::integer) AS i,
		LIST('2021-08-20'::DATE + i::INTEGER) AS d,
		LIST('2021-08-20'::TIMESTAMP + INTERVAL (i) HOUR) AS dt,
		LIST('14:59:37'::TIME + INTERVAL (i) MINUTE) AS t,
		LIST(INTERVAL (i) SECOND) AS s
	FROM range(1, 6, 1) t1(i);
SELECT list_first(d), list_first(dt), list_first(t), list_first(s) FROM five_dates;
DROP TABLE five_dates;
CREATE TABLE five_dates_tz AS
	SELECT
		LIST(('2021-08-20'::TIMESTAMP + INTERVAL (i) HOUR)::TIMESTAMPTZ) AS dt,
		LIST(('14:59:37'::TIME + INTERVAL (i) MINUTE)::TIMETZ) AS t,
	FROM range(1, 6, 1) t1(i);
SELECT list_first(dt), list_first(t) FROM five_dates_tz;
DROP TABLE five_dates_tz;
CREATE TABLE five_complex AS
	SELECT
		LIST(i::integer) AS i,
		LIST(i::VARCHAR) AS s,
		LIST([i]) AS l,
		LIST({'a': i}) AS r
	FROM range(1, 6, 1) t1(i);
SELECT list_first(s), list_first(l), list_first(r)
FROM five_complex;
DROP TABLE five_complex;
CREATE TABLE five AS SELECT LIST(i::decimal(4,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(8,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(12,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(18,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_first(i) FROM five;
DROP TABLE five;
CREATE SEQUENCE seq;
SELECT list_bit_xor([nextval('seq')]);
SELECT list_bit_xor([nextval('seq')]);
CREATE TABLE integers (i INTEGER[]);
INSERT INTO integers VALUES ([3, 7, 15, 31, 3, 15]);
SELECT list_bit_xor([]) FROM integers;
INSERT INTO integers VALUES ([]), (NULL), ([NULL]), ([3, 7, NULL, 15, 31, 3, 15, NULL]);
SELECT list_bit_xor(i), list_bit_xor([1, 1, 1, 1, 1, 1]), list_bit_xor(NULL) FROM integers;
SELECT list_bit_xor();
CREATE SEQUENCE seq;
SELECT list_bit_or([nextval('seq')]);
SELECT list_bit_or([nextval('seq')]);
CREATE TABLE integers(i INTEGER[]);
INSERT INTO integers VALUES ([3, 7, 15, 31, 3, 15]);
SELECT list_bit_or([]) FROM integers;
INSERT INTO integers VALUES ([]), (NULL), ([NULL]), ([3, 7, NULL, 15, 31, 3, 15, NULL]);
SELECT list_bit_or(i), list_bit_or([1, 1, 1, 1, 1, 1]), list_bit_or(NULL) FROM integers;
SELECT list_bit_or();
SELECT list_string_agg();
SELECT list_string_agg(['a', ',']);
SELECT list_string_agg(['a']);
CREATE TABLE str_aggs (str varchar[]);
INSERT INTO str_aggs VALUES (['a', ',']), ([NULL, ',']), (['a', NULL]), ([NULL, NULL]), (NULL), ([]), ([NULL]);
SELECT list_string_agg(str) from str_aggs;
CREATE TABLE strings(g INTEGER[], x VARCHAR[], y VARCHAR[]);
INSERT INTO strings VALUES ([1, 1, 2, 2, 2, 3, 4, 4, 4], ['a', 'b', 'i', NULL, 'j', 'p', 'x', 'y', 'z'],
	['/', '-', '/', '-', '+', '/', '/', '-', '+']);
SELECT list_string_agg(x), list_string_agg(y), list_string_agg(g::varchar[]) FROM strings;
SELECT list_string_agg(x) FROM strings WHERE g > [100];
SELECT list_string_agg([1, 2]);
SELECT list_string_agg([1, 2]::varchar[]);
SELECT list_aggr(['a'], 'group_concat');
CREATE TABLE long AS SELECT LIST('a') g FROM range(0, 10, 1) t1(c), range(0, 10, 1) t2(e);
SELECT list_count(g), list_count(g) FROM long;
SELECT list_string_agg(g) FROM long;
CREATE TABLE quantile AS SELECT LIST(r::integer) AS r FROM range(10000) t1(r);
SELECT list_median(r) FROM quantile;
DROP TABLE quantile;
CREATE TABLE quantile AS SELECT LIST(r::float) AS r FROM range(10000) t1(r);
SELECT list_median(r) FROM quantile;
DROP TABLE quantile;
CREATE TABLE quantile AS SELECT LIST(r::double) AS r FROM range(10000) t1(r);
SELECT list_median(r) FROM quantile;
DROP TABLE quantile;
CREATE TABLE quantile AS SELECT LIST(r::smallint) AS r FROM range(10000) t1(r);
SELECT list_median(r) FROM quantile;
DROP TABLE quantile;
CREATE TABLE quantile AS SELECT LIST(r::bigint) AS r FROM range(10000) t1(r);
SELECT list_median(r) FROM quantile;
DROP TABLE quantile;
CREATE TABLE quantile AS SELECT LIST(r::hugeint) AS r FROM range(10000) t1(r);
SELECT list_median(r) FROM quantile;
DROP TABLE quantile;
CREATE TABLE quantile AS SELECT LIST(r::decimal(10,2)) AS r FROM range(10000) t1(r);
SELECT list_median(r) FROM quantile;
DROP TABLE quantile;
CREATE TABLE quantile AS SELECT LIST(r::tinyint) AS r FROM range(100) t1(r);
SELECT list_median(r) FROM quantile;
CREATE TABLE range AS SELECT LIST(1) AS i FROM range(2000) t1(i);
INSERT INTO range VALUES (NULL), ([]), ([NULL]);
SELECT list_median(i) FROM range;
SELECT list_max();
CREATE TABLE five AS SELECT LIST(i::tinyint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::smallint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::integer) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::bigint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::hugeint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::utinyint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::usmallint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::uinteger) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::ubigint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::uhugeint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::float) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::double) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five_dates AS
	SELECT
		LIST(i::integer) AS i,
		LIST('2021-08-20'::DATE + i::INTEGER) AS d,
		LIST('2021-08-20'::TIMESTAMP + INTERVAL (i) HOUR) AS dt,
		LIST('14:59:37'::TIME + INTERVAL (i) MINUTE) AS t,
		LIST(INTERVAL (i) SECOND) AS s
	FROM range(1, 6, 1) t1(i);
SELECT list_max(d), list_max(dt), list_max(t), list_max(s) FROM five_dates;
DROP TABLE five_dates;
CREATE TABLE five_dates_tz AS
	SELECT
		LIST(('2021-08-20'::TIMESTAMP + INTERVAL (i) HOUR)::TIMESTAMPTZ) AS dt,
		LIST(('14:59:37'::TIME + INTERVAL (i) MINUTE)::TIMETZ) AS t,
	FROM range(1, 6, 1) t1(i);
SELECT list_max(dt), list_max(t) FROM five_dates_tz;
DROP TABLE five_dates_tz;
CREATE TABLE five_complex AS
	SELECT
		LIST(i::integer) AS i,
		LIST(i::VARCHAR) AS s,
		LIST([i]) AS l,
		LIST({'a': i}) AS r
	FROM range(1, 6, 1) t1(i);
SELECT list_max(s), list_max(l), list_max(r)
FROM five_complex;
DROP TABLE five_complex;
CREATE TABLE five AS SELECT LIST(i::decimal(4,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(8,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(12,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(18,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_max(i) FROM five;
DROP TABLE five;
SELECT list_aggr([NULL, 1, 2], 'any_value');
SELECT list_any_value();
CREATE TABLE five AS SELECT LIST(i::tinyint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::smallint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::integer) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::bigint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::hugeint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::utinyint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::usmallint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::uinteger) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::ubigint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::uhugeint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::float) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::double) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five_dates AS
	SELECT
		LIST(NULLIF(i,0)::integer) AS i,
		LIST('2021-08-20'::DATE + NULLIF(i,0)::INTEGER) AS d,
		LIST('2021-08-20'::TIMESTAMP + INTERVAL (NULLIF(i,0)) HOUR) AS dt,
		LIST('14:59:37'::TIME + INTERVAL (NULLIF(i,0)) MINUTE) AS t,
		LIST(INTERVAL (NULLIF(i,0)) SECOND) AS s
	FROM range(0, 6, 1) t1(i);
SELECT list_any_value(d), list_any_value(dt), list_any_value(t), list_any_value(s) FROM five_dates;
DROP TABLE five_dates;
CREATE TABLE five_dates_tz AS
	SELECT
		LIST(('2021-08-20'::TIMESTAMP + INTERVAL (NULLIF(i,0)) HOUR)::TIMESTAMPTZ) AS dt,
		LIST(('14:59:37'::TIME + INTERVAL (NULLIF(i,0)) MINUTE)::TIMETZ) AS t,
	FROM range(0, 6, 1) t1(i);
SELECT list_any_value(dt), list_any_value(t) FROM five_dates_tz;
DROP TABLE five_dates_tz;
CREATE TABLE five_complex AS
	SELECT
		LIST(NULLIF(i,0)::integer) AS i,
		LIST(NULLIF(i,0)::VARCHAR) AS s,
		LIST([NULLIF(i,0)]) AS l,
		LIST({'a': NULLIF(i,0)}) AS r
	FROM range(0, 6, 1) t1(i);
SELECT list_any_value(s), list_any_value(l), list_any_value(r)
FROM five_complex;
DROP TABLE five_complex;
CREATE TABLE five AS SELECT LIST(i::decimal(4,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(8,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(12,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(18,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_any_value(i) FROM five;
DROP TABLE five;
SELECT list_aggr(NULL, 'avg');
SELECT list_aggr(NULL, 'favg');
SELECT list_aggr(NULL, 'approx_count_distinct');
SELECT list_aggr(NULL, 'bit_and');
SELECT list_aggr(NULL, 'bit_or');
SELECT list_aggr(NULL, 'bit_xor');
SELECT list_aggr(NULL, 'bool_or');
SELECT list_aggr(NULL, 'bool_and');
SELECT list_aggr(NULL, 'count');
SELECT list_aggr(NULL, 'entropy');
SELECT list_aggr(NULL, 'first');
SELECT list_aggr(NULL, 'arbitrary');
SELECT list_aggr(NULL, 'histogram');
SELECT list_aggr(NULL, 'kurtosis');
SELECT list_aggr(NULL, 'last');
SELECT list_aggr(NULL, 'mad');
SELECT list_aggr(NULL, 'max');
SELECT list_aggr(NULL, 'median');
SELECT list_aggr(NULL, 'min');
SELECT list_aggr(NULL, 'mode');
SELECT list_aggr(NULL, 'array_agg');
SELECT list_aggr(NULL, 'list');
SELECT list_aggr(NULL, 'product');
SELECT list_aggr(NULL, 'sem');
SELECT list_aggr(NULL, 'skewness');
SELECT list_aggr(NULL, 'string_agg');
SELECT list_aggr(NULL, 'group_concat');
SELECT list_aggr(NULL, 'sum');
SELECT list_aggr(NULL, 'fsum');
SELECT list_aggr(NULL, 'sumKahan');
SELECT list_aggr(NULL, 'kahan_sum');
SELECT list_aggr(NULL, 'var_samp');
SELECT list_aggr(NULL, 'var_pop');
SELECT list_aggr(NULL, 'stddev');
SELECT list_aggr(NULL, 'stddev_pop');
SELECT list_aggr(NULL, 'variance');
SELECT list_aggr(NULL, 'stddev_samp');
SELECT list_aggr([NULL], 'avg');
SELECT list_aggr([NULL], 'favg');
SELECT list_aggr([NULL], 'bit_and');
SELECT list_aggr([NULL], 'bit_or');
SELECT list_aggr([NULL], 'bit_xor');
SELECT list_aggr([NULL], 'bool_or');
SELECT list_aggr([NULL], 'bool_and');
SELECT list_aggr([NULL], 'first');
SELECT list_aggr([NULL], 'arbitrary');
SELECT list_aggr([NULL], 'histogram');
SELECT list_aggr([NULL], 'kurtosis');
SELECT list_aggr([NULL], 'last');
SELECT list_aggr([NULL], 'mad');
SELECT list_aggr([NULL], 'max');
SELECT list_aggr([NULL], 'median');
SELECT list_aggr([NULL], 'min');
SELECT list_aggr([NULL], 'mode');
SELECT list_aggr([NULL], 'product');
SELECT list_aggr([NULL], 'sem');
SELECT list_aggr([NULL], 'string_agg');
SELECT list_aggr([NULL], 'group_concat');
SELECT list_aggr([NULL], 'sum');
SELECT list_aggr([NULL], 'fsum');
SELECT list_aggr([NULL], 'sumKahan');
SELECT list_aggr([NULL], 'kahan_sum');
SELECT list_aggr([NULL], 'var_samp');
SELECT list_aggr([NULL], 'var_pop');
SELECT list_aggr([NULL], 'stddev');
SELECT list_aggr([NULL], 'stddev_pop');
SELECT list_aggr([NULL], 'variance');
SELECT list_aggr([NULL], 'stddev_samp');
SELECT list_aggr([NULL], 'approx_count_distinct');
SELECT list_aggr([NULL], 'count');
SELECT list_aggr([NULL], 'entropy');
SELECT list_aggr([NULL], 'array_agg');
SELECT list_aggr([NULL], 'list');
SELECT list_aggr([], 'avg');
SELECT list_aggr([], 'favg');
SELECT list_aggr([], 'bit_and');
SELECT list_aggr([], 'bit_or');
SELECT list_aggr([], 'bit_xor');
SELECT list_aggr([], 'bool_or');
SELECT list_aggr([], 'bool_and');
SELECT list_aggr([], 'first');
SELECT list_aggr([], 'arbitrary');
SELECT list_aggr([], 'histogram');
SELECT list_aggr([], 'kurtosis');
SELECT list_aggr([], 'last');
SELECT list_aggr([], 'mad');
SELECT list_aggr([], 'max');
SELECT list_aggr([], 'median');
SELECT list_aggr([], 'min');
SELECT list_aggr([], 'mode');
SELECT list_aggr([], 'array_agg');
SELECT list_aggr([], 'list');
SELECT list_aggr([], 'product');
SELECT list_aggr([], 'sem');
SELECT list_aggr([], 'skewness');
SELECT list_aggr([], 'string_agg');
SELECT list_aggr([], 'group_concat');
SELECT list_aggr([], 'sum');
SELECT list_aggr([], 'fsum');
SELECT list_aggr([], 'sumKahan');
SELECT list_aggr([], 'kahan_sum');
SELECT list_aggr([], 'var_samp');
SELECT list_aggr([], 'var_pop');
SELECT list_aggr([], 'stddev');
SELECT list_aggr([], 'stddev_pop');
SELECT list_aggr([], 'variance');
SELECT list_aggr([], 'stddev_samp');
select * from (SELECT list_aggr(NULL, 'avg'));
select * from (SELECT list_aggr(NULL, 'favg'));
select * from (SELECT list_aggr(NULL, 'approx_count_distinct'));
select * from (SELECT list_aggr(NULL, 'bit_and'));
select * from (SELECT list_aggr(NULL, 'bit_or'));
select * from (SELECT list_aggr(NULL, 'bit_xor'));
select * from (SELECT list_aggr(NULL, 'bool_or'));
select * from (SELECT list_aggr(NULL, 'bool_and'));
select * from (SELECT list_aggr(NULL, 'count'));
select * from (SELECT list_aggr(NULL, 'entropy'));
select * from (SELECT list_aggr(NULL, 'first'));
select * from (SELECT list_aggr(NULL, 'arbitrary'));
select * from (SELECT list_aggr(NULL, 'histogram'));
select * from (SELECT list_aggr(NULL, 'kurtosis'));
select * from (SELECT list_aggr(NULL, 'last'));
select * from (SELECT list_aggr(NULL, 'mad'));
select * from (SELECT list_aggr(NULL, 'max'));
select * from (SELECT list_aggr(NULL, 'median'));
select * from (SELECT list_aggr(NULL, 'min'));
select * from (SELECT list_aggr(NULL, 'mode'));
select * from (SELECT list_aggr(NULL, 'array_agg'));
select * from (SELECT list_aggr(NULL, 'list'));
select * from (SELECT list_aggr(NULL, 'product'));
select * from (SELECT list_aggr(NULL, 'sem'));
select * from (SELECT list_aggr(NULL, 'skewness'));
select * from (SELECT list_aggr(NULL, 'string_agg'));
select * from (SELECT list_aggr(NULL, 'group_concat'));
select * from (SELECT list_aggr(NULL, 'sum'));
select * from (SELECT list_aggr(NULL, 'fsum'));
select * from (SELECT list_aggr(NULL, 'sumKahan'));
select * from (SELECT list_aggr(NULL, 'kahan_sum'));
select * from (SELECT list_aggr(NULL, 'var_samp'));
select * from (SELECT list_aggr(NULL, 'var_pop'));
select * from (SELECT list_aggr(NULL, 'stddev'));
select * from (SELECT list_aggr(NULL, 'stddev_pop'));
select * from (SELECT list_aggr(NULL, 'variance'));
select * from (SELECT list_aggr(NULL, 'stddev_samp'));
SELECT list_aggr([], 'approx_count_distinct');
SELECT list_aggr([], 'count');
SELECT list_aggr([], 'entropy');
SELECT list_aggr([], 'approx_count_distinct') WHERE 1 = 0;
SELECT list_aggr([], 'avg') WHERE 1 = 0;
SELECT list_aggr([], 'favg') WHERE 1 = 0;
SELECT list_aggr([], 'bit_and') WHERE 1 = 0;
SELECT list_aggr([], 'bit_or') WHERE 1 = 0;
SELECT list_aggr([], 'bit_xor') WHERE 1 = 0;
SELECT list_aggr([], 'bool_and') WHERE 1 = 0;
SELECT list_aggr([], 'bool_or') WHERE 1 = 0;
SELECT list_aggr([], 'count') WHERE 1 = 0;
SELECT list_aggr([], 'entropy') WHERE 1 = 0;
SELECT list_aggr([], 'first') WHERE 1 = 0;
SELECT list_aggr([], 'arbitrary') WHERE 1 = 0;
SELECT list_aggr([], 'histogram') WHERE 1 = 0;
SELECT list_aggr([], 'kurtosis') WHERE 1 = 0;
SELECT list_aggr([], 'last') WHERE 1 = 0;
SELECT list_aggr([], 'mad') WHERE 1 = 0;
SELECT list_aggr([], 'max') WHERE 1 = 0;
SELECT list_aggr([], 'median') WHERE 1 = 0;
SELECT list_aggr([], 'min') WHERE 1 = 0;
SELECT list_aggr([], 'mode') WHERE 1 = 0;
SELECT list_aggr([], 'array_agg') WHERE 1 = 0;
SELECT list_aggr([], 'list') WHERE 1 = 0;
SELECT list_aggr([], 'product') WHERE 1 = 0;
SELECT list_aggr([], 'sem') WHERE 1 = 0;
SELECT list_aggr([], 'skewness') WHERE 1 = 0;
SELECT list_aggr([], 'string_agg') WHERE 1 = 0;
SELECT list_aggr([], 'group_concat') WHERE 1 = 0;
SELECT list_aggr([], 'sum') WHERE 1 = 0;
SELECT list_aggr([], 'fsum') WHERE 1 = 0;
SELECT list_aggr([], 'sumKahan') WHERE 1 = 0;
SELECT list_aggr([], 'kahan_sum') WHERE 1 = 0;
SELECT list_aggr([], 'var_samp') WHERE 1 = 0;
SELECT list_aggr([], 'var_pop') WHERE 1 = 0;
SELECT list_aggr([], 'stddev') WHERE 1 = 0;
SELECT list_aggr([], 'stddev_pop') WHERE 1 = 0;
SELECT list_aggr([], 'variance') WHERE 1 = 0;
SELECT list_aggr([], 'stddev_samp') WHERE 1 = 0;
SELECT list_aggr([False], 'median');
SELECT list_aggr([NULL::BOOLEAN], 'median');
SELECT list_aggr([False], 'approx_count_distinct');
SELECT list_aggr([NULL::BOOLEAN], 'approx_count_distinct');
SELECT list_aggr([False], 'count');
SELECT list_aggr([NULL::BOOLEAN], 'count');
SELECT list_aggr([False], 'entropy');
SELECT list_aggr([NULL::BOOLEAN], 'entropy');
SELECT list_aggr([False], 'array_agg');
SELECT list_aggr([NULL::BOOLEAN], 'array_agg');
SELECT list_aggr([False], 'list');
SELECT list_aggr([NULL::BOOLEAN], 'list');
SELECT list_aggr([False], 'histogram');
SELECT list_aggr([NULL::BOOLEAN], 'histogram');
SELECT list_aggr([False], 'avg');
SELECT list_aggr([False], 'favg');
SELECT list_aggr([False], 'bit_and');
SELECT list_aggr([False], 'bit_or');
SELECT list_aggr([False], 'bit_xor');
SELECT list_aggr([False], 'kurtosis');
SELECT list_aggr([False], 'mad');
SELECT list_aggr([False], 'product');
SELECT list_aggr([False], 'sem');
SELECT list_aggr([False], 'skewness');
SELECT list_aggr([False], 'sum');
SELECT list_aggr([False], 'fsum');
SELECT list_aggr([False], 'sumKahan');
SELECT list_aggr([False], 'kahan_sum');
SELECT list_aggr([False], 'var_samp');
SELECT list_aggr([False], 'var_pop');
SELECT list_aggr([False], 'stddev');
SELECT list_aggr([False], 'stddev_pop');
SELECT list_aggr([False], 'variance');
SELECT list_aggr([False], 'stddev_samp');
SELECT list_aggr(['hello'], 'first');
SELECT list_aggr([NULL::VARCHAR], 'first');
SELECT list_aggr(['hello'], 'arbitrary');
SELECT list_aggr([NULL::VARCHAR], 'arbitrary');
SELECT list_aggr(['hello'], 'last');
SELECT list_aggr([NULL::VARCHAR], 'last');
SELECT list_aggr(['hello'], 'max');
SELECT list_aggr([NULL::VARCHAR], 'max');
SELECT list_aggr(['hello'], 'median');
SELECT list_aggr([NULL::VARCHAR], 'median');
SELECT list_aggr(['hello'], 'min');
SELECT list_aggr([NULL::VARCHAR], 'min');
SELECT list_aggr(['hello'], 'mode');
SELECT list_aggr([NULL::VARCHAR], 'mode');
SELECT list_aggr(['hello'], 'string_agg');
SELECT list_aggr([NULL::VARCHAR], 'string_agg');
SELECT list_aggr(['hello'], 'group_concat');
SELECT list_aggr([NULL::VARCHAR], 'group_concat');
SELECT list_aggr(['hello'], 'approx_count_distinct');
SELECT list_aggr([NULL::VARCHAR], 'approx_count_distinct');
SELECT list_aggr(['hello'], 'count');
SELECT list_aggr([NULL::VARCHAR], 'count');
SELECT list_aggr(['hello'], 'entropy');
SELECT list_aggr([NULL::VARCHAR], 'entropy');
SELECT list_aggr(['hello'], 'histogram');
SELECT list_aggr([NULL::VARCHAR], 'histogram');
SELECT list_aggr(['hello'], 'array_agg');
SELECT list_aggr([NULL::VARCHAR], 'array_agg');
SELECT list_aggr(['hello'], 'list');
SELECT list_aggr([NULL::VARCHAR], 'list');
SELECT list_aggr(['hello'], 'avg');
SELECT list_aggr(['hello'], 'favg');
SELECT list_aggr(['hello'], 'bit_and');
SELECT list_aggr(['hello'], 'bit_or');
SELECT list_aggr(['hello'], 'bit_xor');
SELECT list_aggr(['hello'], 'bool_and');
SELECT list_aggr(['hello'], 'bool_or');
SELECT list_aggr(['hello'], 'kurtosis');
SELECT list_aggr(['hello'], 'mad');
SELECT list_aggr(['hello'], 'product');
SELECT list_aggr(['hello'], 'sem');
SELECT list_aggr(['hello'], 'skewness');
SELECT list_aggr(['hello'], 'sum');
SELECT list_aggr(['hello'], 'fsum');
SELECT list_aggr(['hello'], 'sumKahan');
SELECT list_aggr(['hello'], 'kahan_sum');
SELECT list_aggr(['hello'], 'var_samp');
SELECT list_aggr(['hello'], 'var_pop');
SELECT list_aggr(['hello'], 'stddev');
SELECT list_aggr(['hello'], 'stddev_pop');
SELECT list_aggr(['hello'], 'variance');
SELECT list_aggr(['hello'], 'stddev_samp');
SELECT list_aggr([1::tinyint], 'avg');
SELECT list_aggr([NULL::tinyint], 'avg');
SELECT list_aggr([1::smallint], 'avg');
SELECT list_aggr([NULL::smallint], 'avg');
SELECT list_aggr([1::integer], 'avg');
SELECT list_aggr([NULL::integer], 'avg');
SELECT list_aggr([1::bigint], 'avg');
SELECT list_aggr([NULL::bigint], 'avg');
SELECT list_aggr([1::hugeint], 'avg');
SELECT list_aggr([NULL::hugeint], 'avg');
SELECT list_aggr([1::utinyint], 'avg');
SELECT list_aggr([NULL::utinyint], 'avg');
SELECT list_aggr([1::usmallint], 'avg');
SELECT list_aggr([NULL::usmallint], 'avg');
SELECT list_aggr([1::uinteger], 'avg');
SELECT list_aggr([NULL::uinteger], 'avg');
SELECT list_aggr([1::ubigint], 'avg');
SELECT list_aggr([NULL::ubigint], 'avg');
SELECT list_aggr([1::uhugeint], 'avg');
SELECT list_aggr([NULL::uhugeint], 'avg');
SELECT list_aggr([1::tinyint], 'favg');
SELECT list_aggr([NULL::tinyint], 'favg');
SELECT list_aggr([1::smallint], 'favg');
SELECT list_aggr([NULL::smallint], 'favg');
SELECT list_aggr([1::integer], 'favg');
SELECT list_aggr([NULL::integer], 'favg');
SELECT list_aggr([1::bigint], 'favg');
SELECT list_aggr([NULL::bigint], 'favg');
SELECT list_aggr([1::hugeint], 'favg');
SELECT list_aggr([NULL::hugeint], 'favg');
SELECT list_aggr([1::utinyint], 'favg');
SELECT list_aggr([NULL::utinyint], 'favg');
SELECT list_aggr([1::usmallint], 'favg');
SELECT list_aggr([NULL::usmallint], 'favg');
SELECT list_aggr([1::uinteger], 'favg');
SELECT list_aggr([NULL::uinteger], 'favg');
SELECT list_aggr([1::ubigint], 'favg');
SELECT list_aggr([NULL::ubigint], 'favg');
SELECT list_aggr([1::uhugeint], 'favg');
SELECT list_aggr([NULL::uhugeint], 'favg');
SELECT list_aggr([1::tinyint], 'bit_and');
SELECT list_aggr([NULL::tinyint], 'bit_and');
SELECT list_aggr([1::smallint], 'bit_and');
SELECT list_aggr([NULL::smallint], 'bit_and');
SELECT list_aggr([1::integer], 'bit_and');
SELECT list_aggr([NULL::integer], 'bit_and');
SELECT list_aggr([1::bigint], 'bit_and');
SELECT list_aggr([NULL::bigint], 'bit_and');
SELECT list_aggr([1::hugeint], 'bit_and');
SELECT list_aggr([NULL::hugeint], 'bit_and');
SELECT list_aggr([1::utinyint], 'bit_and');
SELECT list_aggr([NULL::utinyint], 'bit_and');
SELECT list_aggr([1::usmallint], 'bit_and');
SELECT list_aggr([NULL::usmallint], 'bit_and');
SELECT list_aggr([1::uinteger], 'bit_and');
SELECT list_aggr([NULL::uinteger], 'bit_and');
SELECT list_aggr([1::ubigint], 'bit_and');
SELECT list_aggr([NULL::ubigint], 'bit_and');
SELECT list_aggr([1::uhugeint], 'bit_and');
SELECT list_aggr([NULL::uhugeint], 'bit_and');
SELECT list_aggr([1::tinyint], 'bit_or');
SELECT list_aggr([NULL::tinyint], 'bit_or');
SELECT list_aggr([1::smallint], 'bit_or');
SELECT list_aggr([NULL::smallint], 'bit_or');
SELECT list_aggr([1::integer], 'bit_or');
SELECT list_aggr([NULL::integer], 'bit_or');
SELECT list_aggr([1::bigint], 'bit_or');
SELECT list_aggr([NULL::bigint], 'bit_or');
SELECT list_aggr([1::hugeint], 'bit_or');
SELECT list_aggr([NULL::hugeint], 'bit_or');
SELECT list_aggr([1::utinyint], 'bit_or');
SELECT list_aggr([NULL::utinyint], 'bit_or');
SELECT list_aggr([1::usmallint], 'bit_or');
SELECT list_aggr([NULL::usmallint], 'bit_or');
SELECT list_aggr([1::uinteger], 'bit_or');
SELECT list_aggr([NULL::uinteger], 'bit_or');
SELECT list_aggr([1::ubigint], 'bit_or');
SELECT list_aggr([NULL::ubigint], 'bit_or');
SELECT list_aggr([1::uhugeint], 'bit_or');
SELECT list_aggr([NULL::uhugeint], 'bit_or');
SELECT list_aggr([1::tinyint], 'bit_xor');
SELECT list_aggr([NULL::tinyint], 'bit_xor');
SELECT list_aggr([1::smallint], 'bit_xor');
SELECT list_aggr([NULL::smallint], 'bit_xor');
SELECT list_aggr([1::integer], 'bit_xor');
SELECT list_aggr([NULL::integer], 'bit_xor');
SELECT list_aggr([1::bigint], 'bit_xor');
SELECT list_aggr([NULL::bigint], 'bit_xor');
SELECT list_aggr([1::hugeint], 'bit_xor');
SELECT list_aggr([NULL::hugeint], 'bit_xor');
SELECT list_aggr([1::utinyint], 'bit_xor');
SELECT list_aggr([NULL::utinyint], 'bit_xor');
SELECT list_aggr([1::usmallint], 'bit_xor');
SELECT list_aggr([NULL::usmallint], 'bit_xor');
SELECT list_aggr([1::uinteger], 'bit_xor');
SELECT list_aggr([NULL::uinteger], 'bit_xor');
SELECT list_aggr([1::ubigint], 'bit_xor');
SELECT list_aggr([NULL::ubigint], 'bit_xor');
SELECT list_aggr([1::uhugeint], 'bit_xor');
SELECT list_aggr([NULL::uhugeint], 'bit_xor');
SELECT list_aggr([1::tinyint], 'first');
SELECT list_aggr([NULL::tinyint], 'first');
SELECT list_aggr([1::smallint], 'first');
SELECT list_aggr([NULL::smallint], 'first');
SELECT list_aggr([1::integer], 'first');
SELECT list_aggr([NULL::integer], 'first');
SELECT list_aggr([1::bigint], 'first');
SELECT list_aggr([NULL::bigint], 'first');
SELECT list_aggr([1::hugeint], 'first');
SELECT list_aggr([NULL::hugeint], 'first');
SELECT list_aggr([1::utinyint], 'first');
SELECT list_aggr([NULL::utinyint], 'first');
SELECT list_aggr([1::usmallint], 'first');
SELECT list_aggr([NULL::usmallint], 'first');
SELECT list_aggr([1::uinteger], 'first');
SELECT list_aggr([NULL::uinteger], 'first');
SELECT list_aggr([1::ubigint], 'first');
SELECT list_aggr([NULL::ubigint], 'first');
SELECT list_aggr([1::uhugeint], 'first');
SELECT list_aggr([NULL::uhugeint], 'first');
SELECT list_aggr([1::tinyint], 'arbitrary');
SELECT list_aggr([NULL::tinyint], 'arbitrary');
SELECT list_aggr([1::smallint], 'arbitrary');
SELECT list_aggr([NULL::smallint], 'arbitrary');
SELECT list_aggr([1::integer], 'arbitrary');
SELECT list_aggr([NULL::integer], 'arbitrary');
SELECT list_aggr([1::bigint], 'arbitrary');
SELECT list_aggr([NULL::bigint], 'arbitrary');
SELECT list_aggr([1::hugeint], 'arbitrary');
SELECT list_aggr([NULL::hugeint], 'arbitrary');
SELECT list_aggr([1::utinyint], 'arbitrary');
SELECT list_aggr([NULL::utinyint], 'arbitrary');
SELECT list_aggr([1::usmallint], 'arbitrary');
SELECT list_aggr([NULL::usmallint], 'arbitrary');
SELECT list_aggr([1::uinteger], 'arbitrary');
SELECT list_aggr([NULL::uinteger], 'arbitrary');
SELECT list_aggr([1::ubigint], 'arbitrary');
SELECT list_aggr([NULL::ubigint], 'arbitrary');
SELECT list_aggr([1::uhugeint], 'arbitrary');
SELECT list_aggr([NULL::uhugeint], 'arbitrary');
SELECT list_aggr([1::tinyint], 'last');
SELECT list_aggr([NULL::tinyint], 'last');
SELECT list_aggr([1::smallint], 'last');
SELECT list_aggr([NULL::smallint], 'last');
SELECT list_aggr([1::integer], 'last');
SELECT list_aggr([NULL::integer], 'last');
SELECT list_aggr([1::bigint], 'last');
SELECT list_aggr([NULL::bigint], 'last');
SELECT list_aggr([1::hugeint], 'last');
SELECT list_aggr([NULL::hugeint], 'last');
SELECT list_aggr([1::utinyint], 'last');
SELECT list_aggr([NULL::utinyint], 'last');
SELECT list_aggr([1::usmallint], 'last');
SELECT list_aggr([NULL::usmallint], 'last');
SELECT list_aggr([1::uinteger], 'last');
SELECT list_aggr([NULL::uinteger], 'last');
SELECT list_aggr([1::ubigint], 'last');
SELECT list_aggr([NULL::ubigint], 'last');
SELECT list_aggr([1::uhugeint], 'last');
SELECT list_aggr([NULL::uhugeint], 'last');
SELECT list_aggr([1::tinyint], 'max');
SELECT list_aggr([NULL::tinyint], 'max');
SELECT list_aggr([1::smallint], 'max');
SELECT list_aggr([NULL::smallint], 'max');
SELECT list_aggr([1::integer], 'max');
SELECT list_aggr([NULL::integer], 'max');
SELECT list_aggr([1::bigint], 'max');
SELECT list_aggr([NULL::bigint], 'max');
SELECT list_aggr([1::hugeint], 'max');
SELECT list_aggr([NULL::hugeint], 'max');
SELECT list_aggr([1::utinyint], 'max');
SELECT list_aggr([NULL::utinyint], 'max');
SELECT list_aggr([1::usmallint], 'max');
SELECT list_aggr([NULL::usmallint], 'max');
SELECT list_aggr([1::uinteger], 'max');
SELECT list_aggr([NULL::uinteger], 'max');
SELECT list_aggr([1::ubigint], 'max');
SELECT list_aggr([NULL::ubigint], 'max');
SELECT list_aggr([1::uhugeint], 'max');
SELECT list_aggr([NULL::uhugeint], 'max');
SELECT list_aggr([1::tinyint], 'median');
SELECT list_aggr([NULL::tinyint], 'median');
SELECT list_aggr([1::smallint], 'median');
SELECT list_aggr([NULL::smallint], 'median');
SELECT list_aggr([1::integer], 'median');
SELECT list_aggr([NULL::integer], 'median');
SELECT list_aggr([1::bigint], 'median');
SELECT list_aggr([NULL::bigint], 'median');
SELECT list_aggr([1::hugeint], 'median');
SELECT list_aggr([NULL::hugeint], 'median');
SELECT list_aggr([1::utinyint], 'median');
SELECT list_aggr([NULL::utinyint], 'median');
SELECT list_aggr([1::usmallint], 'median');
SELECT list_aggr([NULL::usmallint], 'median');
SELECT list_aggr([1::uinteger], 'median');
SELECT list_aggr([NULL::uinteger], 'median');
SELECT list_aggr([1::ubigint], 'median');
SELECT list_aggr([NULL::ubigint], 'median');
SELECT list_aggr([1::uhugeint], 'median');
SELECT list_aggr([NULL::uhugeint], 'median');
SELECT list_aggr([1::tinyint], 'min');
SELECT list_aggr([NULL::tinyint], 'min');
SELECT list_aggr([1::smallint], 'min');
SELECT list_aggr([NULL::smallint], 'min');
SELECT list_aggr([1::integer], 'min');
SELECT list_aggr([NULL::integer], 'min');
SELECT list_aggr([1::bigint], 'min');
SELECT list_aggr([NULL::bigint], 'min');
SELECT list_aggr([1::hugeint], 'min');
SELECT list_aggr([NULL::hugeint], 'min');
SELECT list_aggr([1::utinyint], 'min');
SELECT list_aggr([NULL::utinyint], 'min');
SELECT list_aggr([1::usmallint], 'min');
SELECT list_aggr([NULL::usmallint], 'min');
SELECT list_aggr([1::uinteger], 'min');
SELECT list_aggr([NULL::uinteger], 'min');
SELECT list_aggr([1::ubigint], 'min');
SELECT list_aggr([NULL::ubigint], 'min');
SELECT list_aggr([1::uhugeint], 'min');
SELECT list_aggr([NULL::uhugeint], 'min');
SELECT list_aggr([1::tinyint], 'mode');
SELECT list_aggr([NULL::tinyint], 'mode');
SELECT list_aggr([1::smallint], 'mode');
SELECT list_aggr([NULL::smallint], 'mode');
SELECT list_aggr([1::integer], 'mode');
SELECT list_aggr([NULL::integer], 'mode');
SELECT list_aggr([1::bigint], 'mode');
SELECT list_aggr([NULL::bigint], 'mode');
SELECT list_aggr([1::hugeint], 'mode');
SELECT list_aggr([NULL::hugeint], 'mode');
SELECT list_aggr([1::utinyint], 'mode');
SELECT list_aggr([NULL::utinyint], 'mode');
SELECT list_aggr([1::usmallint], 'mode');
SELECT list_aggr([NULL::usmallint], 'mode');
SELECT list_aggr([1::uinteger], 'mode');
SELECT list_aggr([NULL::uinteger], 'mode');
SELECT list_aggr([1::ubigint], 'mode');
SELECT list_aggr([NULL::ubigint], 'mode');
SELECT list_aggr([1::uhugeint], 'mode');
SELECT list_aggr([NULL::uhugeint], 'mode');
SELECT list_aggr([1::tinyint], 'product');
SELECT list_aggr([NULL::tinyint], 'product');
SELECT list_aggr([1::smallint], 'product');
SELECT list_aggr([NULL::smallint], 'product');
SELECT list_aggr([1::integer], 'product');
SELECT list_aggr([NULL::integer], 'product');
SELECT list_aggr([1::bigint], 'product');
SELECT list_aggr([NULL::bigint], 'product');
SELECT list_aggr([1::hugeint], 'product');
SELECT list_aggr([NULL::hugeint], 'product');
SELECT list_aggr([1::utinyint], 'product');
SELECT list_aggr([NULL::utinyint], 'product');
SELECT list_aggr([1::usmallint], 'product');
SELECT list_aggr([NULL::usmallint], 'product');
SELECT list_aggr([1::uinteger], 'product');
SELECT list_aggr([NULL::uinteger], 'product');
SELECT list_aggr([1::ubigint], 'product');
SELECT list_aggr([NULL::ubigint], 'product');
SELECT list_aggr([1::uhugeint], 'product');
SELECT list_aggr([NULL::uhugeint], 'product');
SELECT list_aggr([1::tinyint], 'sum');
SELECT list_aggr([NULL::tinyint], 'sum');
SELECT list_aggr([1::smallint], 'sum');
SELECT list_aggr([NULL::smallint], 'sum');
SELECT list_aggr([1::integer], 'sum');
SELECT list_aggr([NULL::integer], 'sum');
SELECT list_aggr([1::bigint], 'sum');
SELECT list_aggr([NULL::bigint], 'sum');
SELECT list_aggr([1::hugeint], 'sum');
SELECT list_aggr([NULL::hugeint], 'sum');
SELECT list_aggr([1::utinyint], 'sum');
SELECT list_aggr([NULL::utinyint], 'sum');
SELECT list_aggr([1::usmallint], 'sum');
SELECT list_aggr([NULL::usmallint], 'sum');
SELECT list_aggr([1::uinteger], 'sum');
SELECT list_aggr([NULL::uinteger], 'sum');
SELECT list_aggr([1::ubigint], 'sum');
SELECT list_aggr([NULL::ubigint], 'sum');
SELECT list_aggr([1::uhugeint], 'sum');
SELECT list_aggr([NULL::uhugeint], 'sum');
SELECT list_aggr([1::tinyint], 'fsum');
SELECT list_aggr([NULL::tinyint], 'fsum');
SELECT list_aggr([1::smallint], 'fsum');
SELECT list_aggr([NULL::smallint], 'fsum');
SELECT list_aggr([1::integer], 'fsum');
SELECT list_aggr([NULL::integer], 'fsum');
SELECT list_aggr([1::bigint], 'fsum');
SELECT list_aggr([NULL::bigint], 'fsum');
SELECT list_aggr([1::hugeint], 'fsum');
SELECT list_aggr([NULL::hugeint], 'fsum');
SELECT list_aggr([1::utinyint], 'fsum');
SELECT list_aggr([NULL::utinyint], 'fsum');
SELECT list_aggr([1::usmallint], 'fsum');
SELECT list_aggr([NULL::usmallint], 'fsum');
SELECT list_aggr([1::uinteger], 'fsum');
SELECT list_aggr([NULL::uinteger], 'fsum');
SELECT list_aggr([1::ubigint], 'fsum');
SELECT list_aggr([NULL::ubigint], 'fsum');
SELECT list_aggr([1::uhugeint], 'fsum');
SELECT list_aggr([NULL::uhugeint], 'fsum');
SELECT list_aggr([1::tinyint], 'sumKahan');
SELECT list_aggr([NULL::tinyint], 'sumKahan');
SELECT list_aggr([1::smallint], 'sumKahan');
SELECT list_aggr([NULL::smallint], 'sumKahan');
SELECT list_aggr([1::integer], 'sumKahan');
SELECT list_aggr([NULL::integer], 'sumKahan');
SELECT list_aggr([1::bigint], 'sumKahan');
SELECT list_aggr([NULL::bigint], 'sumKahan');
SELECT list_aggr([1::hugeint], 'sumKahan');
SELECT list_aggr([NULL::hugeint], 'sumKahan');
SELECT list_aggr([1::utinyint], 'sumKahan');
SELECT list_aggr([NULL::utinyint], 'sumKahan');
SELECT list_aggr([1::usmallint], 'sumKahan');
SELECT list_aggr([NULL::usmallint], 'sumKahan');
SELECT list_aggr([1::uinteger], 'sumKahan');
SELECT list_aggr([NULL::uinteger], 'sumKahan');
SELECT list_aggr([1::ubigint], 'sumKahan');
SELECT list_aggr([NULL::ubigint], 'sumKahan');
SELECT list_aggr([1::uhugeint], 'sumKahan');
SELECT list_aggr([NULL::uhugeint], 'sumKahan');
SELECT list_aggr([1::tinyint], 'kahan_sum');
SELECT list_aggr([NULL::tinyint], 'kahan_sum');
SELECT list_aggr([1::smallint], 'kahan_sum');
SELECT list_aggr([NULL::smallint], 'kahan_sum');
SELECT list_aggr([1::integer], 'kahan_sum');
SELECT list_aggr([NULL::integer], 'kahan_sum');
SELECT list_aggr([1::bigint], 'kahan_sum');
SELECT list_aggr([NULL::bigint], 'kahan_sum');
SELECT list_aggr([1::hugeint], 'kahan_sum');
SELECT list_aggr([NULL::hugeint], 'kahan_sum');
SELECT list_aggr([1::utinyint], 'kahan_sum');
SELECT list_aggr([NULL::utinyint], 'kahan_sum');
SELECT list_aggr([1::usmallint], 'kahan_sum');
SELECT list_aggr([NULL::usmallint], 'kahan_sum');
SELECT list_aggr([1::uinteger], 'kahan_sum');
SELECT list_aggr([NULL::uinteger], 'kahan_sum');
SELECT list_aggr([1::ubigint], 'kahan_sum');
SELECT list_aggr([NULL::ubigint], 'kahan_sum');
SELECT list_aggr([1::uhugeint], 'kahan_sum');
SELECT list_aggr([NULL::uhugeint], 'kahan_sum');
SELECT list_aggr([1::tinyint], 'approx_count_distinct');
SELECT list_aggr([NULL::tinyint], 'approx_count_distinct');
SELECT list_aggr([1::smallint], 'approx_count_distinct');
SELECT list_aggr([NULL::smallint], 'approx_count_distinct');
SELECT list_aggr([1::integer], 'approx_count_distinct');
SELECT list_aggr([NULL::integer], 'approx_count_distinct');
SELECT list_aggr([1::bigint], 'approx_count_distinct');
SELECT list_aggr([NULL::bigint], 'approx_count_distinct');
SELECT list_aggr([1::hugeint], 'approx_count_distinct');
SELECT list_aggr([NULL::hugeint], 'approx_count_distinct');
SELECT list_aggr([1::utinyint], 'approx_count_distinct');
SELECT list_aggr([NULL::utinyint], 'approx_count_distinct');
SELECT list_aggr([1::usmallint], 'approx_count_distinct');
SELECT list_aggr([NULL::usmallint], 'approx_count_distinct');
SELECT list_aggr([1::uinteger], 'approx_count_distinct');
SELECT list_aggr([NULL::uinteger], 'approx_count_distinct');
SELECT list_aggr([1::ubigint], 'approx_count_distinct');
SELECT list_aggr([NULL::ubigint], 'approx_count_distinct');
SELECT list_aggr([1::uhugeint], 'approx_count_distinct');
SELECT list_aggr([NULL::uhugeint], 'approx_count_distinct');
SELECT list_aggr([1::tinyint], 'count');
SELECT list_aggr([NULL::tinyint], 'count');
SELECT list_aggr([1::smallint], 'count');
SELECT list_aggr([NULL::smallint], 'count');
SELECT list_aggr([1::integer], 'count');
SELECT list_aggr([NULL::integer], 'count');
SELECT list_aggr([1::bigint], 'count');
SELECT list_aggr([NULL::bigint], 'count');
SELECT list_aggr([1::hugeint], 'count');
SELECT list_aggr([NULL::hugeint], 'count');
SELECT list_aggr([1::utinyint], 'count');
SELECT list_aggr([NULL::utinyint], 'count');
SELECT list_aggr([1::usmallint], 'count');
SELECT list_aggr([NULL::usmallint], 'count');
SELECT list_aggr([1::uinteger], 'count');
SELECT list_aggr([NULL::uinteger], 'count');
SELECT list_aggr([1::ubigint], 'count');
SELECT list_aggr([NULL::ubigint], 'count');
SELECT list_aggr([1::uhugeint], 'count');
SELECT list_aggr([NULL::uhugeint], 'count');
SELECT list_aggr([1::tinyint], 'entropy');
SELECT list_aggr([NULL::tinyint], 'entropy');
SELECT list_aggr([1::smallint], 'entropy');
SELECT list_aggr([NULL::smallint], 'entropy');
SELECT list_aggr([1::integer], 'entropy');
SELECT list_aggr([NULL::integer], 'entropy');
SELECT list_aggr([1::bigint], 'entropy');
SELECT list_aggr([NULL::bigint], 'entropy');
SELECT list_aggr([1::hugeint], 'entropy');
SELECT list_aggr([NULL::hugeint], 'entropy');
SELECT list_aggr([1::utinyint], 'entropy');
SELECT list_aggr([NULL::utinyint], 'entropy');
SELECT list_aggr([1::usmallint], 'entropy');
SELECT list_aggr([NULL::usmallint], 'entropy');
SELECT list_aggr([1::uinteger], 'entropy');
SELECT list_aggr([NULL::uinteger], 'entropy');
SELECT list_aggr([1::ubigint], 'entropy');
SELECT list_aggr([NULL::ubigint], 'entropy');
SELECT list_aggr([1::uhugeint], 'entropy');
SELECT list_aggr([NULL::uhugeint], 'entropy');
SELECT list_aggr([1::tinyint], 'histogram');
SELECT list_aggr([NULL::tinyint], 'histogram');
SELECT list_aggr([1::smallint], 'histogram');
SELECT list_aggr([NULL::smallint], 'histogram');
SELECT list_aggr([1::integer], 'histogram');
SELECT list_aggr([NULL::integer], 'histogram');
SELECT list_aggr([1::bigint], 'histogram');
SELECT list_aggr([NULL::bigint], 'histogram');
SELECT list_aggr([1::hugeint], 'histogram');
SELECT list_aggr([NULL::hugeint], 'histogram');
SELECT list_aggr([1::utinyint], 'histogram');
SELECT list_aggr([NULL::utinyint], 'histogram');
SELECT list_aggr([1::usmallint], 'histogram');
SELECT list_aggr([NULL::usmallint], 'histogram');
SELECT list_aggr([1::uinteger], 'histogram');
SELECT list_aggr([NULL::uinteger], 'histogram');
SELECT list_aggr([1::ubigint], 'histogram');
SELECT list_aggr([NULL::ubigint], 'histogram');
SELECT list_aggr([1::uhugeint], 'histogram');
SELECT list_aggr([NULL::uhugeint], 'histogram');
SELECT list_aggr([1::tinyint], 'kurtosis');
SELECT list_aggr([NULL::tinyint], 'kurtosis');
SELECT list_aggr([1::smallint], 'kurtosis');
SELECT list_aggr([NULL::smallint], 'kurtosis');
SELECT list_aggr([1::integer], 'kurtosis');
SELECT list_aggr([NULL::integer], 'kurtosis');
SELECT list_aggr([1::bigint], 'kurtosis');
SELECT list_aggr([NULL::bigint], 'kurtosis');
SELECT list_aggr([1::hugeint], 'kurtosis');
SELECT list_aggr([NULL::hugeint], 'kurtosis');
SELECT list_aggr([1::utinyint], 'kurtosis');
SELECT list_aggr([NULL::utinyint], 'kurtosis');
SELECT list_aggr([1::usmallint], 'kurtosis');
SELECT list_aggr([NULL::usmallint], 'kurtosis');
SELECT list_aggr([1::uinteger], 'kurtosis');
SELECT list_aggr([NULL::uinteger], 'kurtosis');
SELECT list_aggr([1::ubigint], 'kurtosis');
SELECT list_aggr([NULL::ubigint], 'kurtosis');
SELECT list_aggr([1::uhugeint], 'kurtosis');
SELECT list_aggr([NULL::uhugeint], 'kurtosis');
SELECT list_aggr([1::tinyint], 'mad');
SELECT list_aggr([NULL::tinyint], 'mad');
SELECT list_aggr([1::smallint], 'mad');
SELECT list_aggr([NULL::smallint], 'mad');
SELECT list_aggr([1::integer], 'mad');
SELECT list_aggr([NULL::integer], 'mad');
SELECT list_aggr([1::bigint], 'mad');
SELECT list_aggr([NULL::bigint], 'mad');
SELECT list_aggr([1::hugeint], 'mad');
SELECT list_aggr([NULL::hugeint], 'mad');
SELECT list_aggr([1::utinyint], 'mad');
SELECT list_aggr([NULL::utinyint], 'mad');
SELECT list_aggr([1::usmallint], 'mad');
SELECT list_aggr([NULL::usmallint], 'mad');
SELECT list_aggr([1::uinteger], 'mad');
SELECT list_aggr([NULL::uinteger], 'mad');
SELECT list_aggr([1::ubigint], 'mad');
SELECT list_aggr([NULL::ubigint], 'mad');
SELECT list_aggr([1::uhugeint], 'mad');
SELECT list_aggr([NULL::uhugeint], 'mad');
SELECT list_aggr([1::tinyint], 'array_agg');
SELECT list_aggr([NULL::tinyint], 'array_agg');
SELECT list_aggr([1::smallint], 'array_agg');
SELECT list_aggr([NULL::smallint], 'array_agg');
SELECT list_aggr([1::integer], 'array_agg');
SELECT list_aggr([NULL::integer], 'array_agg');
SELECT list_aggr([1::bigint], 'array_agg');
SELECT list_aggr([NULL::bigint], 'array_agg');
SELECT list_aggr([1::hugeint], 'array_agg');
SELECT list_aggr([NULL::hugeint], 'array_agg');
SELECT list_aggr([1::utinyint], 'array_agg');
SELECT list_aggr([NULL::utinyint], 'array_agg');
SELECT list_aggr([1::usmallint], 'array_agg');
SELECT list_aggr([NULL::usmallint], 'array_agg');
SELECT list_aggr([1::uinteger], 'array_agg');
SELECT list_aggr([NULL::uinteger], 'array_agg');
SELECT list_aggr([1::ubigint], 'array_agg');
SELECT list_aggr([NULL::ubigint], 'array_agg');
SELECT list_aggr([1::uhugeint], 'array_agg');
SELECT list_aggr([NULL::uhugeint], 'array_agg');
SELECT list_aggr([1::tinyint], 'list');
SELECT list_aggr([NULL::tinyint], 'list');
SELECT list_aggr([1::smallint], 'list');
SELECT list_aggr([NULL::smallint], 'list');
SELECT list_aggr([1::integer], 'list');
SELECT list_aggr([NULL::integer], 'list');
SELECT list_aggr([1::bigint], 'list');
SELECT list_aggr([NULL::bigint], 'list');
SELECT list_aggr([1::hugeint], 'list');
SELECT list_aggr([NULL::hugeint], 'list');
SELECT list_aggr([1::utinyint], 'list');
SELECT list_aggr([NULL::utinyint], 'list');
SELECT list_aggr([1::usmallint], 'list');
SELECT list_aggr([NULL::usmallint], 'list');
SELECT list_aggr([1::uinteger], 'list');
SELECT list_aggr([NULL::uinteger], 'list');
SELECT list_aggr([1::ubigint], 'list');
SELECT list_aggr([NULL::ubigint], 'list');
SELECT list_aggr([1::uhugeint], 'list');
SELECT list_aggr([NULL::uhugeint], 'list');
SELECT list_aggr([1::tinyint], 'sem');
SELECT list_aggr([NULL::tinyint], 'sem');
SELECT list_aggr([1::smallint], 'sem');
SELECT list_aggr([NULL::smallint], 'sem');
SELECT list_aggr([1::integer], 'sem');
SELECT list_aggr([NULL::integer], 'sem');
SELECT list_aggr([1::bigint], 'sem');
SELECT list_aggr([NULL::bigint], 'sem');
SELECT list_aggr([1::hugeint], 'sem');
SELECT list_aggr([NULL::hugeint], 'sem');
SELECT list_aggr([1::utinyint], 'sem');
SELECT list_aggr([NULL::utinyint], 'sem');
SELECT list_aggr([1::usmallint], 'sem');
SELECT list_aggr([NULL::usmallint], 'sem');
SELECT list_aggr([1::uinteger], 'sem');
SELECT list_aggr([NULL::uinteger], 'sem');
SELECT list_aggr([1::ubigint], 'sem');
SELECT list_aggr([NULL::ubigint], 'sem');
SELECT list_aggr([1::uhugeint], 'sem');
SELECT list_aggr([NULL::uhugeint], 'sem');
SELECT list_aggr([1::tinyint], 'skewness');
SELECT list_aggr([NULL::tinyint], 'skewness');
SELECT list_aggr([1::smallint], 'skewness');
SELECT list_aggr([NULL::smallint], 'skewness');
SELECT list_aggr([1::integer], 'skewness');
SELECT list_aggr([NULL::integer], 'skewness');
SELECT list_aggr([1::bigint], 'skewness');
SELECT list_aggr([NULL::bigint], 'skewness');
SELECT list_aggr([1::hugeint], 'skewness');
SELECT list_aggr([NULL::hugeint], 'skewness');
SELECT list_aggr([1::utinyint], 'skewness');
SELECT list_aggr([NULL::utinyint], 'skewness');
SELECT list_aggr([1::usmallint], 'skewness');
SELECT list_aggr([NULL::usmallint], 'skewness');
SELECT list_aggr([1::uinteger], 'skewness');
SELECT list_aggr([NULL::uinteger], 'skewness');
SELECT list_aggr([1::ubigint], 'skewness');
SELECT list_aggr([NULL::ubigint], 'skewness');
SELECT list_aggr([1::uhugeint], 'skewness');
SELECT list_aggr([NULL::uhugeint], 'skewness');
SELECT list_aggr([1::tinyint], 'var_samp');
SELECT list_aggr([NULL::tinyint], 'var_samp');
SELECT list_aggr([1::smallint], 'var_samp');
SELECT list_aggr([NULL::smallint], 'var_samp');
SELECT list_aggr([1::integer], 'var_samp');
SELECT list_aggr([NULL::integer], 'var_samp');
SELECT list_aggr([1::bigint], 'var_samp');
SELECT list_aggr([NULL::bigint], 'var_samp');
SELECT list_aggr([1::hugeint], 'var_samp');
SELECT list_aggr([NULL::hugeint], 'var_samp');
SELECT list_aggr([1::utinyint], 'var_samp');
SELECT list_aggr([NULL::utinyint], 'var_samp');
SELECT list_aggr([1::usmallint], 'var_samp');
SELECT list_aggr([NULL::usmallint], 'var_samp');
SELECT list_aggr([1::uinteger], 'var_samp');
SELECT list_aggr([NULL::uinteger], 'var_samp');
SELECT list_aggr([1::ubigint], 'var_samp');
SELECT list_aggr([NULL::ubigint], 'var_samp');
SELECT list_aggr([1::uhugeint], 'var_samp');
SELECT list_aggr([NULL::uhugeint], 'var_samp');
SELECT list_aggr([1::tinyint], 'var_pop');
SELECT list_aggr([NULL::tinyint], 'var_pop');
SELECT list_aggr([1::smallint], 'var_pop');
SELECT list_aggr([NULL::smallint], 'var_pop');
SELECT list_aggr([1::integer], 'var_pop');
SELECT list_aggr([NULL::integer], 'var_pop');
SELECT list_aggr([1::bigint], 'var_pop');
SELECT list_aggr([NULL::bigint], 'var_pop');
SELECT list_aggr([1::hugeint], 'var_pop');
SELECT list_aggr([NULL::hugeint], 'var_pop');
SELECT list_aggr([1::utinyint], 'var_pop');
SELECT list_aggr([NULL::utinyint], 'var_pop');
SELECT list_aggr([1::usmallint], 'var_pop');
SELECT list_aggr([NULL::usmallint], 'var_pop');
SELECT list_aggr([1::uinteger], 'var_pop');
SELECT list_aggr([NULL::uinteger], 'var_pop');
SELECT list_aggr([1::ubigint], 'var_pop');
SELECT list_aggr([NULL::ubigint], 'var_pop');
SELECT list_aggr([1::uhugeint], 'var_pop');
SELECT list_aggr([NULL::uhugeint], 'var_pop');
SELECT list_aggr([1::tinyint], 'stddev');
SELECT list_aggr([NULL::tinyint], 'stddev');
SELECT list_aggr([1::smallint], 'stddev');
SELECT list_aggr([NULL::smallint], 'stddev');
SELECT list_aggr([1::integer], 'stddev');
SELECT list_aggr([NULL::integer], 'stddev');
SELECT list_aggr([1::bigint], 'stddev');
SELECT list_aggr([NULL::bigint], 'stddev');
SELECT list_aggr([1::hugeint], 'stddev');
SELECT list_aggr([NULL::hugeint], 'stddev');
SELECT list_aggr([1::utinyint], 'stddev');
SELECT list_aggr([NULL::utinyint], 'stddev');
SELECT list_aggr([1::usmallint], 'stddev');
SELECT list_aggr([NULL::usmallint], 'stddev');
SELECT list_aggr([1::uinteger], 'stddev');
SELECT list_aggr([NULL::uinteger], 'stddev');
SELECT list_aggr([1::ubigint], 'stddev');
SELECT list_aggr([NULL::ubigint], 'stddev');
SELECT list_aggr([1::uhugeint], 'stddev');
SELECT list_aggr([NULL::uhugeint], 'stddev');
SELECT list_aggr([1::tinyint], 'stddev_pop');
SELECT list_aggr([NULL::tinyint], 'stddev_pop');
SELECT list_aggr([1::smallint], 'stddev_pop');
SELECT list_aggr([NULL::smallint], 'stddev_pop');
SELECT list_aggr([1::integer], 'stddev_pop');
SELECT list_aggr([NULL::integer], 'stddev_pop');
SELECT list_aggr([1::bigint], 'stddev_pop');
SELECT list_aggr([NULL::bigint], 'stddev_pop');
SELECT list_aggr([1::hugeint], 'stddev_pop');
SELECT list_aggr([NULL::hugeint], 'stddev_pop');
SELECT list_aggr([1::utinyint], 'stddev_pop');
SELECT list_aggr([NULL::utinyint], 'stddev_pop');
SELECT list_aggr([1::usmallint], 'stddev_pop');
SELECT list_aggr([NULL::usmallint], 'stddev_pop');
SELECT list_aggr([1::uinteger], 'stddev_pop');
SELECT list_aggr([NULL::uinteger], 'stddev_pop');
SELECT list_aggr([1::ubigint], 'stddev_pop');
SELECT list_aggr([NULL::ubigint], 'stddev_pop');
SELECT list_aggr([1::uhugeint], 'stddev_pop');
SELECT list_aggr([NULL::uhugeint], 'stddev_pop');
SELECT list_aggr([1::tinyint], 'variance');
SELECT list_aggr([NULL::tinyint], 'variance');
SELECT list_aggr([1::smallint], 'variance');
SELECT list_aggr([NULL::smallint], 'variance');
SELECT list_aggr([1::integer], 'variance');
SELECT list_aggr([NULL::integer], 'variance');
SELECT list_aggr([1::bigint], 'variance');
SELECT list_aggr([NULL::bigint], 'variance');
SELECT list_aggr([1::hugeint], 'variance');
SELECT list_aggr([NULL::hugeint], 'variance');
SELECT list_aggr([1::utinyint], 'variance');
SELECT list_aggr([NULL::utinyint], 'variance');
SELECT list_aggr([1::usmallint], 'variance');
SELECT list_aggr([NULL::usmallint], 'variance');
SELECT list_aggr([1::uinteger], 'variance');
SELECT list_aggr([NULL::uinteger], 'variance');
SELECT list_aggr([1::ubigint], 'variance');
SELECT list_aggr([NULL::ubigint], 'variance');
SELECT list_aggr([1::uhugeint], 'variance');
SELECT list_aggr([NULL::uhugeint], 'variance');
SELECT list_aggr([1::tinyint], 'stddev_samp');
SELECT list_aggr([NULL::tinyint], 'stddev_samp');
SELECT list_aggr([1::smallint], 'stddev_samp');
SELECT list_aggr([NULL::smallint], 'stddev_samp');
SELECT list_aggr([1::integer], 'stddev_samp');
SELECT list_aggr([NULL::integer], 'stddev_samp');
SELECT list_aggr([1::bigint], 'stddev_samp');
SELECT list_aggr([NULL::bigint], 'stddev_samp');
SELECT list_aggr([1::hugeint], 'stddev_samp');
SELECT list_aggr([NULL::hugeint], 'stddev_samp');
SELECT list_aggr([1::utinyint], 'stddev_samp');
SELECT list_aggr([NULL::utinyint], 'stddev_samp');
SELECT list_aggr([1::usmallint], 'stddev_samp');
SELECT list_aggr([NULL::usmallint], 'stddev_samp');
SELECT list_aggr([1::uinteger], 'stddev_samp');
SELECT list_aggr([NULL::uinteger], 'stddev_samp');
SELECT list_aggr([1::ubigint], 'stddev_samp');
SELECT list_aggr([NULL::ubigint], 'stddev_samp');
SELECT list_aggr([1::uhugeint], 'stddev_samp');
SELECT list_aggr([NULL::uhugeint], 'stddev_samp');
SELECT list_aggr([1::tinyint], 'bool_and');
SELECT list_aggr([1::smallint], 'bool_and');
SELECT list_aggr([1::integer], 'bool_and');
SELECT list_aggr([1::bigint], 'bool_and');
SELECT list_aggr([1::hugeint], 'bool_and');
SELECT list_aggr([1::utinyint], 'bool_and');
SELECT list_aggr([1::usmallint], 'bool_and');
SELECT list_aggr([1::uinteger], 'bool_and');
SELECT list_aggr([1::ubigint], 'bool_and');
SELECT list_aggr([1::uhugeint], 'bool_and');
SELECT list_aggr([1::tinyint], 'bool_or');
SELECT list_aggr([1::smallint], 'bool_or');
SELECT list_aggr([1::integer], 'bool_or');
SELECT list_aggr([1::bigint], 'bool_or');
SELECT list_aggr([1::hugeint], 'bool_or');
SELECT list_aggr([1::utinyint], 'bool_or');
SELECT list_aggr([1::usmallint], 'bool_or');
SELECT list_aggr([1::uinteger], 'bool_or');
SELECT list_aggr([1::ubigint], 'bool_or');
SELECT list_aggr([1::uhugeint], 'bool_or');
SELECT list_aggr([1::float], 'avg');
SELECT list_aggr([NULL::float], 'avg');
SELECT list_aggr([1::double], 'avg');
SELECT list_aggr([NULL::double], 'avg');
SELECT list_aggr([1::decimal(4,1)], 'avg');
SELECT list_aggr([NULL::decimal(4,1)], 'avg');
SELECT list_aggr([1::decimal(9,4)], 'avg');
SELECT list_aggr([NULL::decimal(9,4)], 'avg');
SELECT list_aggr([1::decimal(18,6)], 'avg');
SELECT list_aggr([NULL::decimal(18,6)], 'avg');
SELECT list_aggr([1::decimal(38,10)], 'avg');
SELECT list_aggr([NULL::decimal(38,10)], 'avg');
SELECT list_aggr([1::float], 'favg');
SELECT list_aggr([NULL::float], 'favg');
SELECT list_aggr([1::double], 'favg');
SELECT list_aggr([NULL::double], 'favg');
SELECT list_aggr([1::decimal(4,1)], 'favg');
SELECT list_aggr([NULL::decimal(4,1)], 'favg');
SELECT list_aggr([1::decimal(9,4)], 'favg');
SELECT list_aggr([NULL::decimal(9,4)], 'favg');
SELECT list_aggr([1::decimal(18,6)], 'favg');
SELECT list_aggr([NULL::decimal(18,6)], 'favg');
SELECT list_aggr([1::decimal(38,10)], 'favg');
SELECT list_aggr([NULL::decimal(38,10)], 'favg');
SELECT list_aggr([1::float], 'first');
SELECT list_aggr([NULL::float], 'first');
SELECT list_aggr([1::double], 'first');
SELECT list_aggr([NULL::double], 'first');
SELECT list_aggr([1::decimal(4,1)], 'first');
SELECT list_aggr([NULL::decimal(4,1)], 'first');
SELECT list_aggr([1::decimal(9,4)], 'first');
SELECT list_aggr([NULL::decimal(9,4)], 'first');
SELECT list_aggr([1::decimal(18,6)], 'first');
SELECT list_aggr([NULL::decimal(18,6)], 'first');
SELECT list_aggr([1::decimal(38,10)], 'first');
SELECT list_aggr([NULL::decimal(38,10)], 'first');
SELECT list_aggr([1::float], 'arbitrary');
SELECT list_aggr([NULL::float], 'arbitrary');
SELECT list_aggr([1::double], 'arbitrary');
SELECT list_aggr([NULL::double], 'arbitrary');
SELECT list_aggr([1::decimal(4,1)], 'arbitrary');
SELECT list_aggr([NULL::decimal(4,1)], 'arbitrary');
SELECT list_aggr([1::decimal(9,4)], 'arbitrary');
SELECT list_aggr([NULL::decimal(9,4)], 'arbitrary');
SELECT list_aggr([1::decimal(18,6)], 'arbitrary');
SELECT list_aggr([NULL::decimal(18,6)], 'arbitrary');
SELECT list_aggr([1::decimal(38,10)], 'arbitrary');
SELECT list_aggr([NULL::decimal(38,10)], 'arbitrary');
SELECT list_aggr([1::float], 'last');
SELECT list_aggr([NULL::float], 'last');
SELECT list_aggr([1::double], 'last');
SELECT list_aggr([NULL::double], 'last');
SELECT list_aggr([1::decimal(4,1)], 'last');
SELECT list_aggr([NULL::decimal(4,1)], 'last');
SELECT list_aggr([1::decimal(9,4)], 'last');
SELECT list_aggr([NULL::decimal(9,4)], 'last');
SELECT list_aggr([1::decimal(18,6)], 'last');
SELECT list_aggr([NULL::decimal(18,6)], 'last');
SELECT list_aggr([1::decimal(38,10)], 'last');
SELECT list_aggr([NULL::decimal(38,10)], 'last');
SELECT list_aggr([1::float], 'max');
SELECT list_aggr([NULL::float], 'max');
SELECT list_aggr([1::double], 'max');
SELECT list_aggr([NULL::double], 'max');
SELECT list_aggr([1::decimal(4,1)], 'max');
SELECT list_aggr([NULL::decimal(4,1)], 'max');
SELECT list_aggr([1::decimal(9,4)], 'max');
SELECT list_aggr([NULL::decimal(9,4)], 'max');
SELECT list_aggr([1::decimal(18,6)], 'max');
SELECT list_aggr([NULL::decimal(18,6)], 'max');
SELECT list_aggr([1::decimal(38,10)], 'max');
SELECT list_aggr([NULL::decimal(38,10)], 'max');
SELECT list_aggr([1::float], 'median');
SELECT list_aggr([NULL::float], 'median');
SELECT list_aggr([1::double], 'median');
SELECT list_aggr([NULL::double], 'median');
SELECT list_aggr([1::decimal(4,1)], 'median');
SELECT list_aggr([NULL::decimal(4,1)], 'median');
SELECT list_aggr([1::decimal(9,4)], 'median');
SELECT list_aggr([NULL::decimal(9,4)], 'median');
SELECT list_aggr([1::decimal(18,6)], 'median');
SELECT list_aggr([NULL::decimal(18,6)], 'median');
SELECT list_aggr([1::decimal(38,10)], 'median');
SELECT list_aggr([NULL::decimal(38,10)], 'median');
SELECT list_aggr([1::float], 'min');
SELECT list_aggr([NULL::float], 'min');
SELECT list_aggr([1::double], 'min');
SELECT list_aggr([NULL::double], 'min');
SELECT list_aggr([1::decimal(4,1)], 'min');
SELECT list_aggr([NULL::decimal(4,1)], 'min');
SELECT list_aggr([1::decimal(9,4)], 'min');
SELECT list_aggr([NULL::decimal(9,4)], 'min');
SELECT list_aggr([1::decimal(18,6)], 'min');
SELECT list_aggr([NULL::decimal(18,6)], 'min');
SELECT list_aggr([1::decimal(38,10)], 'min');
SELECT list_aggr([NULL::decimal(38,10)], 'min');
SELECT list_aggr([1::float], 'mode');
SELECT list_aggr([NULL::float], 'mode');
SELECT list_aggr([1::double], 'mode');
SELECT list_aggr([NULL::double], 'mode');
SELECT list_aggr([1::decimal(4,1)], 'mode');
SELECT list_aggr([NULL::decimal(4,1)], 'mode');
SELECT list_aggr([1::decimal(9,4)], 'mode');
SELECT list_aggr([NULL::decimal(9,4)], 'mode');
SELECT list_aggr([1::decimal(18,6)], 'mode');
SELECT list_aggr([NULL::decimal(18,6)], 'mode');
SELECT list_aggr([1::decimal(38,10)], 'mode');
SELECT list_aggr([NULL::decimal(38,10)], 'mode');
SELECT list_aggr([1::float], 'product');
SELECT list_aggr([NULL::float], 'product');
SELECT list_aggr([1::double], 'product');
SELECT list_aggr([NULL::double], 'product');
SELECT list_aggr([1::decimal(4,1)], 'product');
SELECT list_aggr([NULL::decimal(4,1)], 'product');
SELECT list_aggr([1::decimal(9,4)], 'product');
SELECT list_aggr([NULL::decimal(9,4)], 'product');
SELECT list_aggr([1::decimal(18,6)], 'product');
SELECT list_aggr([NULL::decimal(18,6)], 'product');
SELECT list_aggr([1::decimal(38,10)], 'product');
SELECT list_aggr([NULL::decimal(38,10)], 'product');
SELECT list_aggr([1::float], 'sum');
SELECT list_aggr([NULL::float], 'sum');
SELECT list_aggr([1::double], 'sum');
SELECT list_aggr([NULL::double], 'sum');
SELECT list_aggr([1::decimal(4,1)], 'sum');
SELECT list_aggr([NULL::decimal(4,1)], 'sum');
SELECT list_aggr([1::decimal(9,4)], 'sum');
SELECT list_aggr([NULL::decimal(9,4)], 'sum');
SELECT list_aggr([1::decimal(18,6)], 'sum');
SELECT list_aggr([NULL::decimal(18,6)], 'sum');
SELECT list_aggr([1::decimal(38,10)], 'sum');
SELECT list_aggr([NULL::decimal(38,10)], 'sum');
SELECT list_aggr([1::float], 'fsum');
SELECT list_aggr([NULL::float], 'fsum');
SELECT list_aggr([1::double], 'fsum');
SELECT list_aggr([NULL::double], 'fsum');
SELECT list_aggr([1::decimal(4,1)], 'fsum');
SELECT list_aggr([NULL::decimal(4,1)], 'fsum');
SELECT list_aggr([1::decimal(9,4)], 'fsum');
SELECT list_aggr([NULL::decimal(9,4)], 'fsum');
SELECT list_aggr([1::decimal(18,6)], 'fsum');
SELECT list_aggr([NULL::decimal(18,6)], 'fsum');
SELECT list_aggr([1::decimal(38,10)], 'fsum');
SELECT list_aggr([NULL::decimal(38,10)], 'fsum');
SELECT list_aggr([1::float], 'sumKahan');
SELECT list_aggr([NULL::float], 'sumKahan');
SELECT list_aggr([1::double], 'sumKahan');
SELECT list_aggr([NULL::double], 'sumKahan');
SELECT list_aggr([1::decimal(4,1)], 'sumKahan');
SELECT list_aggr([NULL::decimal(4,1)], 'sumKahan');
SELECT list_aggr([1::decimal(9,4)], 'sumKahan');
SELECT list_aggr([NULL::decimal(9,4)], 'sumKahan');
SELECT list_aggr([1::decimal(18,6)], 'sumKahan');
SELECT list_aggr([NULL::decimal(18,6)], 'sumKahan');
SELECT list_aggr([1::decimal(38,10)], 'sumKahan');
SELECT list_aggr([NULL::decimal(38,10)], 'sumKahan');
SELECT list_aggr([1::float], 'kahan_sum');
SELECT list_aggr([NULL::float], 'kahan_sum');
SELECT list_aggr([1::double], 'kahan_sum');
SELECT list_aggr([NULL::double], 'kahan_sum');
SELECT list_aggr([1::decimal(4,1)], 'kahan_sum');
SELECT list_aggr([NULL::decimal(4,1)], 'kahan_sum');
SELECT list_aggr([1::decimal(9,4)], 'kahan_sum');
SELECT list_aggr([NULL::decimal(9,4)], 'kahan_sum');
SELECT list_aggr([1::decimal(18,6)], 'kahan_sum');
SELECT list_aggr([NULL::decimal(18,6)], 'kahan_sum');
SELECT list_aggr([1::decimal(38,10)], 'kahan_sum');
SELECT list_aggr([NULL::decimal(38,10)], 'kahan_sum');
SELECT list_aggr([1::float], 'approx_count_distinct');
SELECT list_aggr([NULL::float], 'approx_count_distinct');
SELECT list_aggr([1::double], 'approx_count_distinct');
SELECT list_aggr([NULL::double], 'approx_count_distinct');
SELECT list_aggr([1::decimal(4,1)], 'approx_count_distinct');
SELECT list_aggr([NULL::decimal(4,1)], 'approx_count_distinct');
SELECT list_aggr([1::decimal(9,4)], 'approx_count_distinct');
SELECT list_aggr([NULL::decimal(9,4)], 'approx_count_distinct');
SELECT list_aggr([1::decimal(18,6)], 'approx_count_distinct');
SELECT list_aggr([NULL::decimal(18,6)], 'approx_count_distinct');
SELECT list_aggr([1::decimal(38,10)], 'approx_count_distinct');
SELECT list_aggr([NULL::decimal(38,10)], 'approx_count_distinct');
SELECT list_aggr([1::float], 'count');
SELECT list_aggr([NULL::float], 'count');
SELECT list_aggr([1::double], 'count');
SELECT list_aggr([NULL::double], 'count');
SELECT list_aggr([1::decimal(4,1)], 'count');
SELECT list_aggr([NULL::decimal(4,1)], 'count');
SELECT list_aggr([1::decimal(9,4)], 'count');
SELECT list_aggr([NULL::decimal(9,4)], 'count');
SELECT list_aggr([1::decimal(18,6)], 'count');
SELECT list_aggr([NULL::decimal(18,6)], 'count');
SELECT list_aggr([1::decimal(38,10)], 'count');
SELECT list_aggr([NULL::decimal(38,10)], 'count');
SELECT list_aggr([1::float], 'entropy');
SELECT list_aggr([NULL::float], 'entropy');
SELECT list_aggr([1::double], 'entropy');
SELECT list_aggr([NULL::double], 'entropy');
SELECT list_aggr([1::decimal(4,1)], 'entropy');
SELECT list_aggr([NULL::decimal(4,1)], 'entropy');
SELECT list_aggr([1::decimal(9,4)], 'entropy');
SELECT list_aggr([NULL::decimal(9,4)], 'entropy');
SELECT list_aggr([1::decimal(18,6)], 'entropy');
SELECT list_aggr([NULL::decimal(18,6)], 'entropy');
SELECT list_aggr([1::decimal(38,10)], 'entropy');
SELECT list_aggr([NULL::decimal(38,10)], 'entropy');
SELECT list_aggr([1::float], 'histogram');
SELECT list_aggr([NULL::float], 'histogram');
SELECT list_aggr([1::double], 'histogram');
SELECT list_aggr([NULL::double], 'histogram');
SELECT list_aggr([1::decimal(4,1)], 'histogram');
SELECT list_aggr([NULL::decimal(4,1)], 'histogram');
SELECT list_aggr([1::decimal(9,4)], 'histogram');
SELECT list_aggr([NULL::decimal(9,4)], 'histogram');
SELECT list_aggr([1::decimal(18,6)], 'histogram');
SELECT list_aggr([NULL::decimal(18,6)], 'histogram');
SELECT list_aggr([1::decimal(38,10)], 'histogram');
SELECT list_aggr([NULL::decimal(38,10)], 'histogram');
SELECT list_aggr([1::float], 'kurtosis');
SELECT list_aggr([NULL::float], 'kurtosis');
SELECT list_aggr([1::double], 'kurtosis');
SELECT list_aggr([NULL::double], 'kurtosis');
SELECT list_aggr([1::decimal(4,1)], 'kurtosis');
SELECT list_aggr([NULL::decimal(4,1)], 'kurtosis');
SELECT list_aggr([1::decimal(9,4)], 'kurtosis');
SELECT list_aggr([NULL::decimal(9,4)], 'kurtosis');
SELECT list_aggr([1::decimal(18,6)], 'kurtosis');
SELECT list_aggr([NULL::decimal(18,6)], 'kurtosis');
SELECT list_aggr([1::decimal(38,10)], 'kurtosis');
SELECT list_aggr([NULL::decimal(38,10)], 'kurtosis');
SELECT list_aggr([1::float], 'mad');
SELECT list_aggr([NULL::float], 'mad');
SELECT list_aggr([1::double], 'mad');
SELECT list_aggr([NULL::double], 'mad');
SELECT list_aggr([1::decimal(4,1)], 'mad');
SELECT list_aggr([NULL::decimal(4,1)], 'mad');
SELECT list_aggr([1::decimal(9,4)], 'mad');
SELECT list_aggr([NULL::decimal(9,4)], 'mad');
SELECT list_aggr([1::decimal(18,6)], 'mad');
SELECT list_aggr([NULL::decimal(18,6)], 'mad');
SELECT list_aggr([1::decimal(38,10)], 'mad');
SELECT list_aggr([NULL::decimal(38,10)], 'mad');
SELECT list_aggr([1::float], 'array_agg');
SELECT list_aggr([NULL::float], 'array_agg');
SELECT list_aggr([1::double], 'array_agg');
SELECT list_aggr([NULL::double], 'array_agg');
SELECT list_aggr([1::decimal(4,1)], 'array_agg');
SELECT list_aggr([NULL::decimal(4,1)], 'array_agg');
SELECT list_aggr([1::decimal(9,4)], 'array_agg');
SELECT list_aggr([NULL::decimal(9,4)], 'array_agg');
SELECT list_aggr([1::decimal(18,6)], 'array_agg');
SELECT list_aggr([NULL::decimal(18,6)], 'array_agg');
SELECT list_aggr([1::decimal(38,10)], 'array_agg');
SELECT list_aggr([NULL::decimal(38,10)], 'array_agg');
SELECT list_aggr([1::float], 'list');
SELECT list_aggr([NULL::float], 'list');
SELECT list_aggr([1::double], 'list');
SELECT list_aggr([NULL::double], 'list');
SELECT list_aggr([1::decimal(4,1)], 'list');
SELECT list_aggr([NULL::decimal(4,1)], 'list');
SELECT list_aggr([1::decimal(9,4)], 'list');
SELECT list_aggr([NULL::decimal(9,4)], 'list');
SELECT list_aggr([1::decimal(18,6)], 'list');
SELECT list_aggr([NULL::decimal(18,6)], 'list');
SELECT list_aggr([1::decimal(38,10)], 'list');
SELECT list_aggr([NULL::decimal(38,10)], 'list');
SELECT list_aggr([1::float], 'sem');
SELECT list_aggr([NULL::float], 'sem');
SELECT list_aggr([1::double], 'sem');
SELECT list_aggr([NULL::double], 'sem');
SELECT list_aggr([1::decimal(4,1)], 'sem');
SELECT list_aggr([NULL::decimal(4,1)], 'sem');
SELECT list_aggr([1::decimal(9,4)], 'sem');
SELECT list_aggr([NULL::decimal(9,4)], 'sem');
SELECT list_aggr([1::decimal(18,6)], 'sem');
SELECT list_aggr([NULL::decimal(18,6)], 'sem');
SELECT list_aggr([1::decimal(38,10)], 'sem');
SELECT list_aggr([NULL::decimal(38,10)], 'sem');
SELECT list_aggr([1::float], 'skewness');
SELECT list_aggr([NULL::float], 'skewness');
SELECT list_aggr([1::double], 'skewness');
SELECT list_aggr([NULL::double], 'skewness');
SELECT list_aggr([1::decimal(4,1)], 'skewness');
SELECT list_aggr([NULL::decimal(4,1)], 'skewness');
SELECT list_aggr([1::decimal(9,4)], 'skewness');
SELECT list_aggr([NULL::decimal(9,4)], 'skewness');
SELECT list_aggr([1::decimal(18,6)], 'skewness');
SELECT list_aggr([NULL::decimal(18,6)], 'skewness');
SELECT list_aggr([1::decimal(38,10)], 'skewness');
SELECT list_aggr([NULL::decimal(38,10)], 'skewness');
SELECT list_aggr([1::float], 'var_samp');
SELECT list_aggr([NULL::float], 'var_samp');
SELECT list_aggr([1::double], 'var_samp');
SELECT list_aggr([NULL::double], 'var_samp');
SELECT list_aggr([1::decimal(4,1)], 'var_samp');
SELECT list_aggr([NULL::decimal(4,1)], 'var_samp');
SELECT list_aggr([1::decimal(9,4)], 'var_samp');
SELECT list_aggr([NULL::decimal(9,4)], 'var_samp');
SELECT list_aggr([1::decimal(18,6)], 'var_samp');
SELECT list_aggr([NULL::decimal(18,6)], 'var_samp');
SELECT list_aggr([1::decimal(38,10)], 'var_samp');
SELECT list_aggr([NULL::decimal(38,10)], 'var_samp');
SELECT list_aggr([1::float], 'var_pop');
SELECT list_aggr([NULL::float], 'var_pop');
SELECT list_aggr([1::double], 'var_pop');
SELECT list_aggr([NULL::double], 'var_pop');
SELECT list_aggr([1::decimal(4,1)], 'var_pop');
SELECT list_aggr([NULL::decimal(4,1)], 'var_pop');
SELECT list_aggr([1::decimal(9,4)], 'var_pop');
SELECT list_aggr([NULL::decimal(9,4)], 'var_pop');
SELECT list_aggr([1::decimal(18,6)], 'var_pop');
SELECT list_aggr([NULL::decimal(18,6)], 'var_pop');
SELECT list_aggr([1::decimal(38,10)], 'var_pop');
SELECT list_aggr([NULL::decimal(38,10)], 'var_pop');
SELECT list_aggr([1::float], 'stddev');
SELECT list_aggr([NULL::float], 'stddev');
SELECT list_aggr([1::double], 'stddev');
SELECT list_aggr([NULL::double], 'stddev');
SELECT list_aggr([1::decimal(4,1)], 'stddev');
SELECT list_aggr([NULL::decimal(4,1)], 'stddev');
SELECT list_aggr([1::decimal(9,4)], 'stddev');
SELECT list_aggr([NULL::decimal(9,4)], 'stddev');
SELECT list_aggr([1::decimal(18,6)], 'stddev');
SELECT list_aggr([NULL::decimal(18,6)], 'stddev');
SELECT list_aggr([1::decimal(38,10)], 'stddev');
SELECT list_aggr([NULL::decimal(38,10)], 'stddev');
SELECT list_aggr([1::float], 'stddev_pop');
SELECT list_aggr([NULL::float], 'stddev_pop');
SELECT list_aggr([1::double], 'stddev_pop');
SELECT list_aggr([NULL::double], 'stddev_pop');
SELECT list_aggr([1::decimal(4,1)], 'stddev_pop');
SELECT list_aggr([NULL::decimal(4,1)], 'stddev_pop');
SELECT list_aggr([1::decimal(9,4)], 'stddev_pop');
SELECT list_aggr([NULL::decimal(9,4)], 'stddev_pop');
SELECT list_aggr([1::decimal(18,6)], 'stddev_pop');
SELECT list_aggr([NULL::decimal(18,6)], 'stddev_pop');
SELECT list_aggr([1::decimal(38,10)], 'stddev_pop');
SELECT list_aggr([NULL::decimal(38,10)], 'stddev_pop');
SELECT list_aggr([1::float], 'variance');
SELECT list_aggr([NULL::float], 'variance');
SELECT list_aggr([1::double], 'variance');
SELECT list_aggr([NULL::double], 'variance');
SELECT list_aggr([1::decimal(4,1)], 'variance');
SELECT list_aggr([NULL::decimal(4,1)], 'variance');
SELECT list_aggr([1::decimal(9,4)], 'variance');
SELECT list_aggr([NULL::decimal(9,4)], 'variance');
SELECT list_aggr([1::decimal(18,6)], 'variance');
SELECT list_aggr([NULL::decimal(18,6)], 'variance');
SELECT list_aggr([1::decimal(38,10)], 'variance');
SELECT list_aggr([NULL::decimal(38,10)], 'variance');
SELECT list_aggr([1::float], 'stddev_samp');
SELECT list_aggr([NULL::float], 'stddev_samp');
SELECT list_aggr([1::double], 'stddev_samp');
SELECT list_aggr([NULL::double], 'stddev_samp');
SELECT list_aggr([1::decimal(4,1)], 'stddev_samp');
SELECT list_aggr([NULL::decimal(4,1)], 'stddev_samp');
SELECT list_aggr([1::decimal(9,4)], 'stddev_samp');
SELECT list_aggr([NULL::decimal(9,4)], 'stddev_samp');
SELECT list_aggr([1::decimal(18,6)], 'stddev_samp');
SELECT list_aggr([NULL::decimal(18,6)], 'stddev_samp');
SELECT list_aggr([1::decimal(38,10)], 'stddev_samp');
SELECT list_aggr([NULL::decimal(38,10)], 'stddev_samp');
SELECT list_aggr([1::float], 'bit_and');
SELECT list_aggr([1::double], 'bit_and');
SELECT list_aggr([1::decimal(4,1)], 'bit_and');
SELECT list_aggr([1::decimal(9,4)], 'bit_and');
SELECT list_aggr([1::decimal(18,6)], 'bit_and');
SELECT list_aggr([1::decimal(38,10)], 'bit_and');
SELECT list_aggr([1::float], 'bit_or');
SELECT list_aggr([1::double], 'bit_or');
SELECT list_aggr([1::decimal(4,1)], 'bit_or');
SELECT list_aggr([1::decimal(9,4)], 'bit_or');
SELECT list_aggr([1::decimal(18,6)], 'bit_or');
SELECT list_aggr([1::decimal(38,10)], 'bit_or');
SELECT list_aggr([1::float], 'bit_xor');
SELECT list_aggr([1::double], 'bit_xor');
SELECT list_aggr([1::decimal(4,1)], 'bit_xor');
SELECT list_aggr([1::decimal(9,4)], 'bit_xor');
SELECT list_aggr([1::decimal(18,6)], 'bit_xor');
SELECT list_aggr([1::decimal(38,10)], 'bit_xor');
SELECT list_aggr([1::float], 'bool_and');
SELECT list_aggr([1::double], 'bool_and');
SELECT list_aggr([1::decimal(4,1)], 'bool_and');
SELECT list_aggr([1::decimal(9,4)], 'bool_and');
SELECT list_aggr([1::decimal(18,6)], 'bool_and');
SELECT list_aggr([1::decimal(38,10)], 'bool_and');
SELECT list_aggr([1::float], 'bool_or');
SELECT list_aggr([1::double], 'bool_or');
SELECT list_aggr([1::decimal(4,1)], 'bool_or');
SELECT list_aggr([1::decimal(9,4)], 'bool_or');
SELECT list_aggr([1::decimal(18,6)], 'bool_or');
SELECT list_aggr([1::decimal(38,10)], 'bool_or');
SELECT list_aggr(['2021-08-20'::DATE], 'first');
SELECT list_aggr(['14:59:37'::TIME], 'first');
SELECT list_aggr(['2021-08-20'::TIMESTAMP], 'first');
SELECT list_aggr(['2021-08-20'::TIMESTAMP_S], 'first');
SELECT list_aggr(['2021-08-20 00:00:00.123'::TIMESTAMP_MS], 'first');
SELECT list_aggr(['2021-08-20 00:00:00.123456'::TIMESTAMP_NS], 'first');
SELECT list_aggr(['14:59:37'::TIMETZ], 'first');
SELECT list_aggr(['2021-08-20'::TIMESTAMPTZ], 'first');
SELECT list_aggr([INTERVAL 1 YEAR], 'first');
SELECT list_aggr(['2021-08-20'::DATE], 'arbitrary');
SELECT list_aggr(['14:59:37'::TIME], 'arbitrary');
SELECT list_aggr(['2021-08-20'::TIMESTAMP], 'arbitrary');
SELECT list_aggr(['2021-08-20'::TIMESTAMP_S], 'arbitrary');
SELECT list_aggr(['2021-08-20 00:00:00.123'::TIMESTAMP_MS], 'arbitrary');
SELECT list_aggr(['2021-08-20 00:00:00.123456'::TIMESTAMP_NS], 'arbitrary');
SELECT list_aggr(['14:59:37'::TIMETZ], 'arbitrary');
SELECT list_aggr(['2021-08-20'::TIMESTAMPTZ], 'arbitrary');
SELECT list_aggr([INTERVAL 1 YEAR], 'arbitrary');
SELECT list_aggr(['2021-08-20'::DATE], 'last');
SELECT list_aggr(['14:59:37'::TIME], 'last');
SELECT list_aggr(['2021-08-20'::TIMESTAMP], 'last');
SELECT list_aggr(['2021-08-20'::TIMESTAMP_S], 'last');
SELECT list_aggr(['2021-08-20 00:00:00.123'::TIMESTAMP_MS], 'last');
SELECT list_aggr(['2021-08-20 00:00:00.123456'::TIMESTAMP_NS], 'last');
SELECT list_aggr(['14:59:37'::TIMETZ], 'last');
SELECT list_aggr(['2021-08-20'::TIMESTAMPTZ], 'last');
SELECT list_aggr([INTERVAL 1 YEAR], 'last');
SELECT list_aggr(['2021-08-20'::DATE], 'max');
SELECT list_aggr(['14:59:37'::TIME], 'max');
SELECT list_aggr(['2021-08-20'::TIMESTAMP], 'max');
SELECT list_aggr(['2021-08-20'::TIMESTAMP_S], 'max');
SELECT list_aggr(['2021-08-20 00:00:00.123'::TIMESTAMP_MS], 'max');
SELECT list_aggr(['2021-08-20 00:00:00.123456'::TIMESTAMP_NS], 'max');
SELECT list_aggr(['14:59:37'::TIMETZ], 'max');
SELECT list_aggr(['2021-08-20'::TIMESTAMPTZ], 'max');
SELECT list_aggr([INTERVAL 1 YEAR], 'max');
SELECT list_aggr(['2021-08-20'::DATE], 'min');
SELECT list_aggr(['14:59:37'::TIME], 'min');
SELECT list_aggr(['2021-08-20'::TIMESTAMP], 'min');
SELECT list_aggr(['2021-08-20'::TIMESTAMP_S], 'min');
SELECT list_aggr(['2021-08-20 00:00:00.123'::TIMESTAMP_MS], 'min');
SELECT list_aggr(['2021-08-20 00:00:00.123456'::TIMESTAMP_NS], 'min');
SELECT list_aggr(['14:59:37'::TIMETZ], 'min');
SELECT list_aggr(['2021-08-20'::TIMESTAMPTZ], 'min');
SELECT list_aggr([INTERVAL 1 YEAR], 'min');
SELECT list_aggr(['2021-08-20'::DATE], 'mode');
SELECT list_aggr(['14:59:37'::TIME], 'mode');
SELECT list_aggr(['2021-08-20'::TIMESTAMP], 'mode');
SELECT list_aggr(['2021-08-20'::TIMESTAMP_S], 'mode');
SELECT list_aggr(['2021-08-20 00:00:00.123'::TIMESTAMP_MS], 'mode');
SELECT list_aggr(['2021-08-20 00:00:00.123456'::TIMESTAMP_NS], 'mode');
SELECT list_aggr(['14:59:37'::TIMETZ], 'mode');
SELECT list_aggr(['2021-08-20'::TIMESTAMPTZ], 'mode');
SELECT list_aggr([INTERVAL 1 YEAR], 'mode');
SELECT list_aggr([NULL::date], 'first');
SELECT list_aggr([NULL::time], 'first');
SELECT list_aggr([NULL::timestamp], 'first');
SELECT list_aggr([NULL::timestamp_s], 'first');
SELECT list_aggr([NULL::timestamp_ms], 'first');
SELECT list_aggr([NULL::timestamp_ns], 'first');
SELECT list_aggr([NULL::timetz], 'first');
SELECT list_aggr([NULL::timestamptz], 'first');
SELECT list_aggr([NULL::interval], 'first');
SELECT list_aggr([NULL::date], 'arbitrary');
SELECT list_aggr([NULL::time], 'arbitrary');
SELECT list_aggr([NULL::timestamp], 'arbitrary');
SELECT list_aggr([NULL::timestamp_s], 'arbitrary');
SELECT list_aggr([NULL::timestamp_ms], 'arbitrary');
SELECT list_aggr([NULL::timestamp_ns], 'arbitrary');
SELECT list_aggr([NULL::timetz], 'arbitrary');
SELECT list_aggr([NULL::timestamptz], 'arbitrary');
SELECT list_aggr([NULL::interval], 'arbitrary');
SELECT list_aggr([NULL::date], 'last');
SELECT list_aggr([NULL::time], 'last');
SELECT list_aggr([NULL::timestamp], 'last');
SELECT list_aggr([NULL::timestamp_s], 'last');
SELECT list_aggr([NULL::timestamp_ms], 'last');
SELECT list_aggr([NULL::timestamp_ns], 'last');
SELECT list_aggr([NULL::timetz], 'last');
SELECT list_aggr([NULL::timestamptz], 'last');
SELECT list_aggr([NULL::interval], 'last');
SELECT list_aggr([NULL::date], 'max');
SELECT list_aggr([NULL::time], 'max');
SELECT list_aggr([NULL::timestamp], 'max');
SELECT list_aggr([NULL::timestamp_s], 'max');
SELECT list_aggr([NULL::timestamp_ms], 'max');
SELECT list_aggr([NULL::timestamp_ns], 'max');
SELECT list_aggr([NULL::timetz], 'max');
SELECT list_aggr([NULL::timestamptz], 'max');
SELECT list_aggr([NULL::interval], 'max');
SELECT list_aggr([NULL::date], 'min');
SELECT list_aggr([NULL::time], 'min');
SELECT list_aggr([NULL::timestamp], 'min');
SELECT list_aggr([NULL::timestamp_s], 'min');
SELECT list_aggr([NULL::timestamp_ms], 'min');
SELECT list_aggr([NULL::timestamp_ns], 'min');
SELECT list_aggr([NULL::timetz], 'min');
SELECT list_aggr([NULL::timestamptz], 'min');
SELECT list_aggr([NULL::interval], 'min');
SELECT list_aggr([NULL::date], 'mode');
SELECT list_aggr([NULL::time], 'mode');
SELECT list_aggr([NULL::timestamp], 'mode');
SELECT list_aggr([NULL::timestamp_s], 'mode');
SELECT list_aggr([NULL::timestamp_ms], 'mode');
SELECT list_aggr([NULL::timestamp_ns], 'mode');
SELECT list_aggr([NULL::timetz], 'mode');
SELECT list_aggr([NULL::timestamptz], 'mode');
SELECT list_aggr([NULL::interval], 'mode');
SELECT list_aggr(['2021-08-20'::date], 'approx_count_distinct');
SELECT list_aggr([NULL::date], 'approx_count_distinct');
SELECT list_aggr(['2021-08-20'::time], 'approx_count_distinct');
SELECT list_aggr([NULL::time], 'approx_count_distinct');
SELECT list_aggr(['2021-08-20'::timestamp], 'approx_count_distinct');
SELECT list_aggr([NULL::timestamp], 'approx_count_distinct');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'approx_count_distinct');
SELECT list_aggr([NULL::timestamp_s], 'approx_count_distinct');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'approx_count_distinct');
SELECT list_aggr([NULL::timestamp_ms], 'approx_count_distinct');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'approx_count_distinct');
SELECT list_aggr([NULL::timestamp_ns], 'approx_count_distinct');
SELECT list_aggr(['2021-08-20'::timetz], 'approx_count_distinct');
SELECT list_aggr([NULL::timetz], 'approx_count_distinct');
SELECT list_aggr(['2021-08-20'::timestamptz], 'approx_count_distinct');
SELECT list_aggr([NULL::timestamptz], 'approx_count_distinct');
SELECT list_aggr([INTERVAL 1 YEAR], 'approx_count_distinct');
SELECT list_aggr([NULL::INTERVAL], 'approx_count_distinct');
SELECT list_aggr(['2021-08-20'::date], 'count');
SELECT list_aggr([NULL::date], 'count');
SELECT list_aggr(['2021-08-20'::time], 'count');
SELECT list_aggr([NULL::time], 'count');
SELECT list_aggr(['2021-08-20'::timestamp], 'count');
SELECT list_aggr([NULL::timestamp], 'count');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'count');
SELECT list_aggr([NULL::timestamp_s], 'count');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'count');
SELECT list_aggr([NULL::timestamp_ms], 'count');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'count');
SELECT list_aggr([NULL::timestamp_ns], 'count');
SELECT list_aggr(['2021-08-20'::timetz], 'count');
SELECT list_aggr([NULL::timetz], 'count');
SELECT list_aggr(['2021-08-20'::timestamptz], 'count');
SELECT list_aggr([NULL::timestamptz], 'count');
SELECT list_aggr([INTERVAL 1 YEAR], 'count');
SELECT list_aggr([NULL::INTERVAL], 'count');
SELECT list_aggr(['2021-08-20'::date], 'entropy');
SELECT list_aggr([NULL::date], 'entropy');
SELECT list_aggr(['2021-08-20'::time], 'entropy');
SELECT list_aggr([NULL::time], 'entropy');
SELECT list_aggr(['2021-08-20'::timestamp], 'entropy');
SELECT list_aggr([NULL::timestamp], 'entropy');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'entropy');
SELECT list_aggr([NULL::timestamp_s], 'entropy');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'entropy');
SELECT list_aggr([NULL::timestamp_ms], 'entropy');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'entropy');
SELECT list_aggr([NULL::timestamp_ns], 'entropy');
SELECT list_aggr(['2021-08-20'::timetz], 'entropy');
SELECT list_aggr([NULL::timetz], 'entropy');
SELECT list_aggr(['2021-08-20'::timestamptz], 'entropy');
SELECT list_aggr([NULL::timestamptz], 'entropy');
SELECT list_aggr([INTERVAL 1 YEAR], 'entropy');
SELECT list_aggr([NULL::INTERVAL], 'entropy');
SELECT list_aggr(['2021-08-20'::date], 'median');
SELECT list_aggr([NULL::date], 'median');
SELECT list_aggr(['2021-08-20'::time], 'median');
SELECT list_aggr([NULL::time], 'median');
SELECT list_aggr(['2021-08-20'::timestamp], 'median');
SELECT list_aggr([NULL::timestamp], 'median');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'median');
SELECT list_aggr([NULL::timestamp_s], 'median');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'median');
SELECT list_aggr([NULL::timestamp_ms], 'median');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'median');
SELECT list_aggr([NULL::timestamp_ns], 'median');
SELECT list_aggr(['2021-08-20'::timetz], 'median');
SELECT list_aggr([NULL::timetz], 'median');
SELECT list_aggr(['2021-08-20'::timestamptz], 'median');
SELECT list_aggr([NULL::timestamptz], 'median');
SELECT list_aggr([INTERVAL 1 YEAR], 'median');
SELECT list_aggr([NULL::INTERVAL], 'median');
SELECT list_aggr(['2021-08-20'::date], 'array_agg');
SELECT list_aggr([NULL::date], 'array_agg');
SELECT list_aggr(['2021-08-20'::time], 'array_agg');
SELECT list_aggr([NULL::time], 'array_agg');
SELECT list_aggr(['2021-08-20'::timestamp], 'array_agg');
SELECT list_aggr([NULL::timestamp], 'array_agg');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'array_agg');
SELECT list_aggr([NULL::timestamp_s], 'array_agg');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'array_agg');
SELECT list_aggr([NULL::timestamp_ms], 'array_agg');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'array_agg');
SELECT list_aggr([NULL::timestamp_ns], 'array_agg');
SELECT list_aggr(['2021-08-20'::timetz], 'array_agg');
SELECT list_aggr([NULL::timetz], 'array_agg');
SELECT list_aggr(['2021-08-20'::timestamptz], 'array_agg');
SELECT list_aggr([NULL::timestamptz], 'array_agg');
SELECT list_aggr([INTERVAL 1 YEAR], 'array_agg');
SELECT list_aggr([NULL::INTERVAL], 'array_agg');
SELECT list_aggr(['2021-08-20'::date], 'list');
SELECT list_aggr([NULL::date], 'list');
SELECT list_aggr(['2021-08-20'::time], 'list');
SELECT list_aggr([NULL::time], 'list');
SELECT list_aggr(['2021-08-20'::timestamp], 'list');
SELECT list_aggr([NULL::timestamp], 'list');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'list');
SELECT list_aggr([NULL::timestamp_s], 'list');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'list');
SELECT list_aggr([NULL::timestamp_ms], 'list');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'list');
SELECT list_aggr([NULL::timestamp_ns], 'list');
SELECT list_aggr(['2021-08-20'::timetz], 'list');
SELECT list_aggr([NULL::timetz], 'list');
SELECT list_aggr(['2021-08-20'::timestamptz], 'list');
SELECT list_aggr([NULL::timestamptz], 'list');
SELECT list_aggr([INTERVAL 1 YEAR], 'list');
SELECT list_aggr([NULL::INTERVAL], 'list');
SELECT list_aggr(['2021-08-20'::date], 'histogram');
SELECT list_aggr([NULL::date], 'histogram');
SELECT list_aggr(['2021-08-20'::time], 'histogram');
SELECT list_aggr([NULL::time], 'histogram');
SELECT list_aggr(['2021-08-20'::timestamp], 'histogram');
SELECT list_aggr([NULL::timestamp], 'histogram');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'histogram');
SELECT list_aggr([NULL::timestamp_s], 'histogram');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'histogram');
SELECT list_aggr([NULL::timestamp_ms], 'histogram');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'histogram');
SELECT list_aggr([NULL::timestamp_ns], 'histogram');
SELECT list_aggr(['2021-08-20'::timetz], 'histogram');
SELECT list_aggr([NULL::timetz], 'histogram');
SELECT list_aggr(['2021-08-20'::timestamptz], 'histogram');
SELECT list_aggr([NULL::timestamptz], 'histogram');
SELECT list_aggr([INTERVAL 1 YEAR], 'histogram');
SELECT list_aggr([NULL::INTERVAL], 'histogram');
SELECT list_aggr(['2021-08-20'::date], 'avg');
SELECT list_aggr(['2021-08-20'::time], 'avg');
SELECT list_aggr(['2021-08-20'::timestamp], 'avg');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'avg');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'avg');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'avg');
SELECT list_aggr(['2021-08-20'::timetz], 'avg');
SELECT list_aggr(['2021-08-20'::timestamptz], 'avg');
SELECT list_aggr([INTERVAL 1 YEAR], 'avg');
SELECT list_aggr(['2021-08-20'::date], 'favg');
SELECT list_aggr(['2021-08-20'::time], 'favg');
SELECT list_aggr(['2021-08-20'::timestamp], 'favg');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'favg');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'favg');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'favg');
SELECT list_aggr(['2021-08-20'::timetz], 'favg');
SELECT list_aggr(['2021-08-20'::timestamptz], 'favg');
SELECT list_aggr([INTERVAL 1 YEAR], 'favg');
SELECT list_aggr(['2021-08-20'::date], 'bit_and');
SELECT list_aggr(['2021-08-20'::time], 'bit_and');
SELECT list_aggr(['2021-08-20'::timestamp], 'bit_and');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'bit_and');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'bit_and');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'bit_and');
SELECT list_aggr(['2021-08-20'::timetz], 'bit_and');
SELECT list_aggr(['2021-08-20'::timestamptz], 'bit_and');
SELECT list_aggr([INTERVAL 1 YEAR], 'bit_and');
SELECT list_aggr(['2021-08-20'::date], 'bit_or');
SELECT list_aggr(['2021-08-20'::time], 'bit_or');
SELECT list_aggr(['2021-08-20'::timestamp], 'bit_or');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'bit_or');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'bit_or');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'bit_or');
SELECT list_aggr(['2021-08-20'::timetz], 'bit_or');
SELECT list_aggr(['2021-08-20'::timestamptz], 'bit_or');
SELECT list_aggr([INTERVAL 1 YEAR], 'bit_or');
SELECT list_aggr(['2021-08-20'::date], 'bit_xor');
SELECT list_aggr(['2021-08-20'::time], 'bit_xor');
SELECT list_aggr(['2021-08-20'::timestamp], 'bit_xor');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'bit_xor');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'bit_xor');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'bit_xor');
SELECT list_aggr(['2021-08-20'::timetz], 'bit_xor');
SELECT list_aggr(['2021-08-20'::timestamptz], 'bit_xor');
SELECT list_aggr([INTERVAL 1 YEAR], 'bit_xor');
SELECT list_aggr(['2021-08-20'::date], 'bool_and');
SELECT list_aggr(['2021-08-20'::time], 'bool_and');
SELECT list_aggr(['2021-08-20'::timestamp], 'bool_and');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'bool_and');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'bool_and');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'bool_and');
SELECT list_aggr(['2021-08-20'::timetz], 'bool_and');
SELECT list_aggr(['2021-08-20'::timestamptz], 'bool_and');
SELECT list_aggr([INTERVAL 1 YEAR], 'bool_and');
SELECT list_aggr(['2021-08-20'::date], 'bool_or');
SELECT list_aggr(['2021-08-20'::time], 'bool_or');
SELECT list_aggr(['2021-08-20'::timestamp], 'bool_or');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'bool_or');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'bool_or');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'bool_or');
SELECT list_aggr(['2021-08-20'::timetz], 'bool_or');
SELECT list_aggr(['2021-08-20'::timestamptz], 'bool_or');
SELECT list_aggr([INTERVAL 1 YEAR], 'bool_or');
SELECT list_aggr(['2021-08-20'::date], 'kurtosis');
SELECT list_aggr(['2021-08-20'::time], 'kurtosis');
SELECT list_aggr(['2021-08-20'::timestamp], 'kurtosis');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'kurtosis');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'kurtosis');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'kurtosis');
SELECT list_aggr(['2021-08-20'::timetz], 'kurtosis');
SELECT list_aggr(['2021-08-20'::timestamptz], 'kurtosis');
SELECT list_aggr([INTERVAL 1 YEAR], 'kurtosis');
SELECT list_aggr(['2021-08-20'::date], 'product');
SELECT list_aggr(['2021-08-20'::time], 'product');
SELECT list_aggr(['2021-08-20'::timestamp], 'product');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'product');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'product');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'product');
SELECT list_aggr(['2021-08-20'::timetz], 'product');
SELECT list_aggr(['2021-08-20'::timestamptz], 'product');
SELECT list_aggr([INTERVAL 1 YEAR], 'product');
SELECT list_aggr(['2021-08-20'::date], 'sem');
SELECT list_aggr(['2021-08-20'::time], 'sem');
SELECT list_aggr(['2021-08-20'::timestamp], 'sem');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'sem');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'sem');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'sem');
SELECT list_aggr(['2021-08-20'::timetz], 'sem');
SELECT list_aggr(['2021-08-20'::timestamptz], 'sem');
SELECT list_aggr([INTERVAL 1 YEAR], 'sem');
SELECT list_aggr(['2021-08-20'::date], 'skewness');
SELECT list_aggr(['2021-08-20'::time], 'skewness');
SELECT list_aggr(['2021-08-20'::timestamp], 'skewness');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'skewness');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'skewness');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'skewness');
SELECT list_aggr(['2021-08-20'::timetz], 'skewness');
SELECT list_aggr(['2021-08-20'::timestamptz], 'skewness');
SELECT list_aggr([INTERVAL 1 YEAR], 'skewness');
SELECT list_aggr(['2021-08-20'::date], 'sum');
SELECT list_aggr(['2021-08-20'::time], 'sum');
SELECT list_aggr(['2021-08-20'::timestamp], 'sum');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'sum');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'sum');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'sum');
SELECT list_aggr(['2021-08-20'::timetz], 'sum');
SELECT list_aggr(['2021-08-20'::timestamptz], 'sum');
SELECT list_aggr([INTERVAL 1 YEAR], 'sum');
SELECT list_aggr(['2021-08-20'::date], 'fsum');
SELECT list_aggr(['2021-08-20'::time], 'fsum');
SELECT list_aggr(['2021-08-20'::timestamp], 'fsum');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'fsum');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'fsum');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'fsum');
SELECT list_aggr(['2021-08-20'::timetz], 'fsum');
SELECT list_aggr(['2021-08-20'::timestamptz], 'fsum');
SELECT list_aggr([INTERVAL 1 YEAR], 'fsum');
SELECT list_aggr(['2021-08-20'::date], 'sumKahan');
SELECT list_aggr(['2021-08-20'::time], 'sumKahan');
SELECT list_aggr(['2021-08-20'::timestamp], 'sumKahan');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'sumKahan');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'sumKahan');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'sumKahan');
SELECT list_aggr(['2021-08-20'::timetz], 'sumKahan');
SELECT list_aggr(['2021-08-20'::timestamptz], 'sumKahan');
SELECT list_aggr([INTERVAL 1 YEAR], 'sumKahan');
SELECT list_aggr(['2021-08-20'::date], 'kahan_sum');
SELECT list_aggr(['2021-08-20'::time], 'kahan_sum');
SELECT list_aggr(['2021-08-20'::timestamp], 'kahan_sum');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'kahan_sum');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'kahan_sum');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'kahan_sum');
SELECT list_aggr(['2021-08-20'::timetz], 'kahan_sum');
SELECT list_aggr(['2021-08-20'::timestamptz], 'kahan_sum');
SELECT list_aggr([INTERVAL 1 YEAR], 'kahan_sum');
SELECT list_aggr(['2021-08-20'::date], 'var_samp');
SELECT list_aggr(['2021-08-20'::time], 'var_samp');
SELECT list_aggr(['2021-08-20'::timestamp], 'var_samp');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'var_samp');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'var_samp');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'var_samp');
SELECT list_aggr(['2021-08-20'::timetz], 'var_samp');
SELECT list_aggr(['2021-08-20'::timestamptz], 'var_samp');
SELECT list_aggr([INTERVAL 1 YEAR], 'var_samp');
SELECT list_aggr(['2021-08-20'::date], 'var_pop');
SELECT list_aggr(['2021-08-20'::time], 'var_pop');
SELECT list_aggr(['2021-08-20'::timestamp], 'var_pop');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'var_pop');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'var_pop');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'var_pop');
SELECT list_aggr(['2021-08-20'::timetz], 'var_pop');
SELECT list_aggr(['2021-08-20'::timestamptz], 'var_pop');
SELECT list_aggr([INTERVAL 1 YEAR], 'var_pop');
SELECT list_aggr(['2021-08-20'::date], 'stddev');
SELECT list_aggr(['2021-08-20'::time], 'stddev');
SELECT list_aggr(['2021-08-20'::timestamp], 'stddev');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'stddev');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'stddev');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'stddev');
SELECT list_aggr(['2021-08-20'::timetz], 'stddev');
SELECT list_aggr(['2021-08-20'::timestamptz], 'stddev');
SELECT list_aggr([INTERVAL 1 YEAR], 'stddev');
SELECT list_aggr(['2021-08-20'::date], 'stddev_pop');
SELECT list_aggr(['2021-08-20'::time], 'stddev_pop');
SELECT list_aggr(['2021-08-20'::timestamp], 'stddev_pop');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'stddev_pop');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'stddev_pop');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'stddev_pop');
SELECT list_aggr(['2021-08-20'::timetz], 'stddev_pop');
SELECT list_aggr(['2021-08-20'::timestamptz], 'stddev_pop');
SELECT list_aggr([INTERVAL 1 YEAR], 'stddev_pop');
SELECT list_aggr(['2021-08-20'::date], 'variance');
SELECT list_aggr(['2021-08-20'::time], 'variance');
SELECT list_aggr(['2021-08-20'::timestamp], 'variance');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'variance');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'variance');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'variance');
SELECT list_aggr(['2021-08-20'::timetz], 'variance');
SELECT list_aggr(['2021-08-20'::timestamptz], 'variance');
SELECT list_aggr([INTERVAL 1 YEAR], 'variance');
SELECT list_aggr(['2021-08-20'::date], 'stddev_samp');
SELECT list_aggr(['2021-08-20'::time], 'stddev_samp');
SELECT list_aggr(['2021-08-20'::timestamp], 'stddev_samp');
SELECT list_aggr(['2021-08-20'::timestamp_s], 'stddev_samp');
SELECT list_aggr(['2021-08-20'::timestamp_ms], 'stddev_samp');
SELECT list_aggr(['2021-08-20'::timestamp_ns], 'stddev_samp');
SELECT list_aggr(['2021-08-20'::timetz], 'stddev_samp');
SELECT list_aggr(['2021-08-20'::timestamptz], 'stddev_samp');
SELECT list_aggr([INTERVAL 1 YEAR], 'stddev_samp');
SELECT list_aggr(['{a: 1}'::BLOB], 'first');
SELECT list_aggr([NULL::BLOB], 'first');
SELECT list_aggr(['{a: 1}'::BLOB], 'arbitrary');
SELECT list_aggr([NULL::BLOB], 'arbitrary');
SELECT list_aggr(['{a: 1}'::BLOB], 'last');
SELECT list_aggr([NULL::BLOB], 'last');
SELECT list_aggr(['{a: 1}'::BLOB], 'max');
SELECT list_aggr([NULL::BLOB], 'max');
SELECT list_aggr(['{a: 1}'::BLOB], 'min');
SELECT list_aggr([NULL::BLOB], 'min');
SELECT list_aggr(['{a: 1}'::BLOB], 'count');
SELECT list_aggr([NULL::BLOB], 'count');
SELECT list_aggr(['{a: 1}'::BLOB], 'array_agg');
SELECT list_aggr([NULL::BLOB], 'array_agg');
SELECT list_aggr(['{a: 1}'::BLOB], 'list');
SELECT list_aggr([NULL::BLOB], 'list');
SELECT list_aggr(['{a: 1}'::BLOB], 'entropy');
SELECT list_aggr([NULL::BLOB], 'entropy');
SELECT list_aggr(['{a: 1}'::BLOB], 'histogram');
SELECT list_aggr([NULL::BLOB], 'histogram');
SELECT list_aggr(['{a: 1}'::BLOB], 'median');
SELECT list_aggr([NULL::BLOB], 'median');
SELECT list_aggr(['{a: 1}'::BLOB], 'mode');
SELECT list_aggr([NULL::BLOB], 'mode');
SELECT list_aggr(['{a: 1}'::BLOB], 'string_agg');
SELECT list_aggr([NULL::BLOB], 'string_agg');
SELECT list_aggr(['{a: 1}'::BLOB], 'group_concat');
SELECT list_aggr([NULL::BLOB], 'group_concat');
SELECT list_aggr(['{a: 1}'::BLOB], 'avg');
SELECT list_aggr(['{a: 1}'::BLOB], 'favg');
SELECT list_aggr(['{a: 1}'::BLOB], 'bit_and');
SELECT list_aggr(['{a: 1}'::BLOB], 'bit_or');
SELECT list_aggr(['{a: 1}'::BLOB], 'bit_xor');
SELECT list_aggr(['{a: 1}'::BLOB], 'bool_and');
SELECT list_aggr(['{a: 1}'::BLOB], 'bool_or');
SELECT list_aggr(['{a: 1}'::BLOB], 'kurtosis');
SELECT list_aggr(['{a: 1}'::BLOB], 'mad');
SELECT list_aggr(['{a: 1}'::BLOB], 'product');
SELECT list_aggr(['{a: 1}'::BLOB], 'sem');
SELECT list_aggr(['{a: 1}'::BLOB], 'skewness');
SELECT list_aggr(['{a: 1}'::BLOB], 'sum');
SELECT list_aggr(['{a: 1}'::BLOB], 'fsum');
SELECT list_aggr(['{a: 1}'::BLOB], 'sumKahan');
SELECT list_aggr(['{a: 1}'::BLOB], 'kahan_sum');
SELECT list_aggr(['{a: 1}'::BLOB], 'var_samp');
SELECT list_aggr(['{a: 1}'::BLOB], 'var_pop');
SELECT list_aggr(['{a: 1}'::BLOB], 'stddev');
SELECT list_aggr(['{a: 1}'::BLOB], 'stddev_pop');
SELECT list_aggr(['{a: 1}'::BLOB], 'variance');
SELECT list_aggr(['{a: 1}'::BLOB], 'stddev_samp');
CREATE TYPE mood AS ENUM ('sad', 'ok', 'happy');
CREATE TABLE enums (e mood[]);
INSERT INTO enums VALUES (['happy']);
SELECT list_aggr(e, 'first') FROM enums;
SELECT list_aggr(e, 'arbitrary') FROM enums;
SELECT list_aggr(e, 'last') FROM enums;
SELECT list_aggr(e, 'max') FROM enums;
SELECT list_aggr(e, 'median') FROM enums;
SELECT list_aggr(e, 'min') FROM enums;
SELECT list_aggr(e, 'mode') FROM enums;
SELECT list_aggr(e, 'string_agg') FROM enums;
SELECT list_aggr(e, 'group_concat') FROM enums;
SELECT list_aggr(e, 'approx_count_distinct') FROM enums;
SELECT list_aggr(e, 'count') FROM enums;
SELECT list_aggr(e, 'entropy') FROM enums;
SELECT list_aggr(e, 'array_agg') FROM enums;
SELECT list_aggr(e, 'list') FROM enums;
SELECT list_aggr(e, 'histogram') FROM enums;
SELECT list_aggr(e, 'avg') FROM enums;
SELECT list_aggr(e, 'favg') FROM enums;
SELECT list_aggr(e, 'bit_and') FROM enums;
SELECT list_aggr(e, 'bit_or') FROM enums;
SELECT list_aggr(e, 'bit_xor') FROM enums;
SELECT list_aggr(e, 'bool_and') FROM enums;
SELECT list_aggr(e, 'bool_or') FROM enums;
SELECT list_aggr(e, 'kurtosis') FROM enums;
SELECT list_aggr(e, 'mad') FROM enums;
SELECT list_aggr(e, 'product') FROM enums;
SELECT list_aggr(e, 'sem') FROM enums;
SELECT list_aggr(e, 'skewness') FROM enums;
SELECT list_aggr(e, 'sum') FROM enums;
SELECT list_aggr(e, 'fsum') FROM enums;
SELECT list_aggr(e, 'sumKahan') FROM enums;
SELECT list_aggr(e, 'kahan_sum') FROM enums;
SELECT list_aggr(e, 'var_samp') FROM enums;
SELECT list_aggr(e, 'var_pop') FROM enums;
SELECT list_aggr(e, 'stddev') FROM enums;
SELECT list_aggr(e, 'stddev_pop') FROM enums;
SELECT list_aggr(e, 'variance') FROM enums;
SELECT list_aggr(e, 'stddev_samp') FROM enums;
SELECT list_aggr([[1]], 'first');
SELECT list_aggr([{'a': 1}], 'first');
SELECT list_aggr([[1]], 'arbitrary');
SELECT list_aggr([{'a': 1}], 'arbitrary');
SELECT list_aggr([[1]], 'last');
SELECT list_aggr([{'a': 1}], 'last');
SELECT list_aggr([[1]], 'max');
SELECT list_aggr([{'a': 1}], 'max');
SELECT list_aggr([[1]], 'median');
SELECT list_aggr([{'a': 1}], 'median');
SELECT list_aggr([[1]], 'min');
SELECT list_aggr([{'a': 1}], 'min');
SELECT list_aggr([[1]], 'mode');
SELECT list_aggr([{'a': 1}], 'mode');
SELECT list_aggr([[1]], 'approx_count_distinct');
SELECT list_aggr([{'a': 1}], 'approx_count_distinct');
SELECT list_aggr([[1]], 'count');
SELECT list_aggr([{'a': 1}], 'count');
SELECT list_aggr([[1]], 'entropy');
SELECT list_aggr([{'a': 1}], 'entropy');
SELECT list_aggr([[1]], 'array_agg');
SELECT list_aggr([{'a': 1}], 'array_agg');
SELECT list_aggr([[1]], 'list');
SELECT list_aggr([{'a': 1}], 'list');
SELECT list_aggr([[1]], 'string_agg');
SELECT list_aggr([{'a': 1}], 'string_agg');
SELECT list_aggr([[1]], 'group_concat');
SELECT list_aggr([{'a': 1}], 'group_concat');
SELECT list_aggr([[1]], 'avg');
SELECT list_aggr([{'a': 1}], 'avg');
SELECT list_aggr([[1]], 'favg');
SELECT list_aggr([{'a': 1}], 'favg');
SELECT list_aggr([[1]], 'bit_and');
SELECT list_aggr([{'a': 1}], 'bit_and');
SELECT list_aggr([[1]], 'bit_or');
SELECT list_aggr([{'a': 1}], 'bit_or');
SELECT list_aggr([[1]], 'bit_xor');
SELECT list_aggr([{'a': 1}], 'bit_xor');
SELECT list_aggr([[1]], 'bool_and');
SELECT list_aggr([{'a': 1}], 'bool_and');
SELECT list_aggr([[1]], 'bool_or');
SELECT list_aggr([{'a': 1}], 'bool_or');
SELECT list_aggr([[1]], 'histogram');
SELECT list_aggr([{'a': 1}], 'histogram');
SELECT list_aggr([[1]], 'kurtosis');
SELECT list_aggr([{'a': 1}], 'kurtosis');
SELECT list_aggr([[1]], 'mad');
SELECT list_aggr([{'a': 1}], 'mad');
SELECT list_aggr([[1]], 'product');
SELECT list_aggr([{'a': 1}], 'product');
SELECT list_aggr([[1]], 'sem');
SELECT list_aggr([{'a': 1}], 'sem');
SELECT list_aggr([[1]], 'skewness');
SELECT list_aggr([{'a': 1}], 'skewness');
SELECT list_aggr([[1]], 'sum');
SELECT list_aggr([{'a': 1}], 'sum');
SELECT list_aggr([[1]], 'fsum');
SELECT list_aggr([{'a': 1}], 'fsum');
SELECT list_aggr([[1]], 'sumKahan');
SELECT list_aggr([{'a': 1}], 'sumKahan');
SELECT list_aggr([[1]], 'kahan_sum');
SELECT list_aggr([{'a': 1}], 'kahan_sum');
SELECT list_aggr([[1]], 'var_samp');
SELECT list_aggr([{'a': 1}], 'var_samp');
SELECT list_aggr([[1]], 'var_pop');
SELECT list_aggr([{'a': 1}], 'var_pop');
SELECT list_aggr([[1]], 'stddev');
SELECT list_aggr([{'a': 1}], 'stddev');
SELECT list_aggr([[1]], 'stddev_pop');
SELECT list_aggr([{'a': 1}], 'stddev_pop');
SELECT list_aggr([[1]], 'variance');
SELECT list_aggr([{'a': 1}], 'variance');
SELECT list_aggr([[1]], 'stddev_samp');
SELECT list_aggr([{'a': 1}], 'stddev_samp');
SELECT list_min();
CREATE TABLE five AS SELECT LIST(i::tinyint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::smallint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::integer) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::bigint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::hugeint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::utinyint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::usmallint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::uinteger) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::ubigint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::uhugeint) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::float) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::double) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five_dates AS
	SELECT
		LIST(i::integer) AS i,
		LIST('2021-08-20'::DATE + i::INTEGER) AS d,
		LIST('2021-08-20'::TIMESTAMP + INTERVAL (i) HOUR) AS dt,
		LIST('14:59:37'::TIME + INTERVAL (i) MINUTE) AS t,
		LIST(INTERVAL (i) SECOND) AS s
	FROM range(1, 6, 1) t1(i);
SELECT list_min(d), list_min(dt), list_min(t), list_min(s) FROM five_dates;
DROP TABLE five_dates;
CREATE TABLE five_dates_tz AS
	SELECT
		LIST(('2021-08-20'::TIMESTAMP + INTERVAL (i) HOUR)::TIMESTAMPTZ) AS dt,
		LIST(('14:59:37'::TIME + INTERVAL (i) MINUTE)::TIMETZ) AS t,
	FROM range(1, 6, 1) t1(i);
SELECT list_min(dt), list_min(t) FROM five_dates_tz;
DROP TABLE five_dates_tz;
CREATE TABLE five_complex AS
	SELECT
		LIST(i::integer) AS i,
		LIST(i::VARCHAR) AS s,
		LIST([i]) AS l,
		LIST({'a': i}) AS r
	FROM range(1, 6, 1) t1(i);
SELECT list_min(s), list_min(l), list_min(r)
FROM five_complex;
DROP TABLE five_complex;
CREATE TABLE five AS SELECT LIST(i::decimal(4,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(8,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(12,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
CREATE TABLE five AS SELECT LIST(i::decimal(18,1)) AS i FROM range(1, 6, 1) t1(i);
INSERT INTO five VALUES (NULL), ([NULL]), ([]), ([NULL, 1, 2]);
SELECT list_min(i) FROM five;
DROP TABLE five;
create table stddev_test(val integer[]);
insert into stddev_test values ([42, 43, 42, 1000, NULL, NULL]), ([1, 1, 2, 2, 1, 3]), ([]), ([NULL]), (NULL);
SELECT list_stddev_samp([1]);
SELECT list_var_samp([1]);
select round(list_stddev_samp(val), 1) from stddev_test;
select list_sum(val), round(list_stddev_samp(val), 1), list_min(val) from stddev_test;
select round(list_stddev_pop(val), 1) from stddev_test;
select list_sum(val), round(list_stddev_pop(val), 1), list_min(val) from stddev_test;
select round(list_var_samp(val), 1) from stddev_test;
select round(list_aggr(val, 'variance'), 1) from stddev_test;
select list_sum(val), round(list_var_samp(val), 1), list_min(val) from stddev_test;
select round(list_var_pop(val), 1) from stddev_test;
select list_sum(val), round(list_var_pop(val), 1), list_min(val) from stddev_test;
select round(list_aggr(val, 'stddev'), 1) from stddev_test;
select list_aggr([0], 'stddev');
select list_aggr([0, 0], 'stddev');
select list_aggr([1e301, -1e301], 'stddev');
select list_var_samp([1e301, -1e301]);
select list_var_pop([1e301, -1e301]);
SELECT list_stddev_samp();
CREATE TABLE t0 (c0 DOUBLE[]);
INSERT INTO t0 VALUES([1E200, 0]);
SELECT list_stddev_pop(c0) FROM t0;
