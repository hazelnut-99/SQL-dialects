pragma enable_verification;
SELECT list_reduce([1, 2, 3], (x, y) -> x + y);;
SELECT list_reduce([1, 2, 3], (x, y) -> x + y);;
;
SELECT list_reduce([1, 2, 3], (x, y) -> x + y);;
SELECT list_reduce(main.list_value(1, 2, 3), (main.row(x, y) -> (x + y)));
;
;
;
;
SELECT list_reduce([1, 2, 3], (x, y) -> x + y);;
SELECT list_reduce([1, 2, 3], (x, y) -> x * y);;
SELECT list_reduce([1, 2, 3], (x, y) -> x * y);;
;
SELECT list_reduce([1, 2, 3], (x, y) -> x * y);;
SELECT list_reduce(main.list_value(1, 2, 3), (main.row(x, y) -> (x * y)));
;
;
;
;
SELECT list_reduce([1, 2, 3], (x, y) -> x * y);;
SELECT list_reduce([100, 10, 1], (x, y, i) -> x - y - i);;
SELECT list_reduce([100, 10, 1], (x, y, i) -> x - y - i);;
;
SELECT list_reduce([100, 10, 1], (x, y, i) -> x - y - i);;
SELECT list_reduce(main.list_value(100, 10, 1), (main.row(x, y, i) -> ((x - y) - i)));
;
;
;
;
SELECT list_reduce([100, 10, 1], (x, y, i) -> x - y - i);;
SELECT list_reduce([1, 2, 3], (x, y) -> y - x);;
SELECT list_reduce([1, 2, 3], (x, y) -> y - x);;
;
SELECT list_reduce([1, 2, 3], (x, y) -> y - x);;
SELECT list_reduce(main.list_value(1, 2, 3), (main.row(x, y) -> (y - x)));
;
;
;
;
SELECT list_reduce([1, 2, 3], (x, y) -> y - x);;
SELECT list_reduce([1, 2, 3], (x, y) -> x - y);;
SELECT list_reduce([1, 2, 3], (x, y) -> x - y);;
;
SELECT list_reduce([1, 2, 3], (x, y) -> x - y);;
SELECT list_reduce(main.list_value(1, 2, 3), (main.row(x, y) -> (x - y)));
;
;
;
;
SELECT list_reduce([1, 2, 3], (x, y) -> x - y);;
SELECT list_reduce([1, 2, 3], (x, y, i) -> x + y + i);;
SELECT list_reduce([1, 2, 3], (x, y, i) -> x + y + i);;
;
SELECT list_reduce([1, 2, 3], (x, y, i) -> x + y + i);;
SELECT list_reduce(main.list_value(1, 2, 3), (main.row(x, y, i) -> ((x + y) + i)));
;
;
;
;
SELECT list_reduce([1, 2, 3], (x, y, i) -> x + y + i);;
SELECT list_reduce([NULL], (x, y, i) -> x + y + i);;
SELECT list_reduce([NULL], (x, y, i) -> x + y + i);;
;
SELECT list_reduce([NULL], (x, y, i) -> x + y + i);;
SELECT list_reduce(main.list_value(NULL), (main.row(x, y, i) -> ((x + y) + i)));
;
;
;
;
SELECT list_reduce([NULL], (x, y, i) -> x + y + i);;
SELECT list_reduce(NULL, (x, y, i) -> x + y + i);;
SELECT list_reduce(NULL, (x, y, i) -> x + y + i);;
;
SELECT list_reduce(NULL, (x, y, i) -> x + y + i);;
SELECT list_reduce(NULL, (main.row(x, y, i) -> ((x + y) + i)));
;
;
;
;
SELECT list_reduce(NULL, (x, y, i) -> x + y + i);;
SELECT list_reduce(['Once', 'upon', 'a', 'time'], (x, y) -> x || ' ' || y);;
SELECT list_reduce(['Once', 'upon', 'a', 'time'], (x, y) -> x || ' ' || y);;
;
SELECT list_reduce(['Once', 'upon', 'a', 'time'], (x, y) -> x || ' ' || y);;
SELECT list_reduce(main.list_value('Once', 'upon', 'a', 'time'), (main.row(x, y) -> ((x || ' ') || y)));
;
;
;
;
SELECT list_reduce(['Once', 'upon', 'a', 'time'], (x, y) -> x || ' ' || y);;
SELECT list_reduce([], (x, y, i) -> x + y + i);;
SELECT list_reduce([], (x, y, i) -> x + y + i);;
;
SELECT list_reduce([], (x, y, i) -> x + y + i);;
SELECT list_reduce([], (x, y, i) -> x + y + i);;
SELECT list_reduce([1, 2, 3], (x, y) -> (x * y)::VARCHAR || 'please work');;
SELECT list_reduce([1, 2, 3], (x, y) -> (x * y)::VARCHAR || 'please work');;
;
SELECT list_reduce([1, 2, 3], (x, y) -> (x * y)::VARCHAR || 'please work');;
SELECT list_reduce([1, 2, 3], (x, y) -> (x * y)::VARCHAR || 'please work');;
SELECT list_reduce([1, 2], (x) -> x);;
SELECT list_reduce([1, 2], (x) -> x);;
;
SELECT list_reduce([1, 2], (x) -> x);;
SELECT list_reduce([1, 2], (x) -> x);;
SELECT list_reduce([1, 2], NULL);;
SELECT list_reduce([1, 2], NULL);;
;
SELECT list_reduce([1, 2], NULL);;
SELECT list_reduce([1, 2], NULL);;
CREATE table t1(a int[]);;
INSERT INTO t1 VALUES ([1, 2, 3]);;
INSERT INTO t1 VALUES ([666]);;
INSERT INTO t1 VALUES (NULL);;
INSERT INTO t1 VALUES ([44, 55]);;
INSERT INTO t1 VALUES ([-1, NULL, -2]);;
SELECT list_reduce(a, (x, y) -> x + y) FROM t1;;
SELECT list_reduce(a, (x, y) -> x + y) FROM t1;;
;
SELECT list_reduce(a, (x, y) -> x + y) FROM t1;;
SELECT list_reduce(a, (main.row(x, y) -> (x + y))) FROM t1;
;
;
;
;
SELECT list_reduce(a, (x, y) -> x + y) FROM t1;;
SELECT list_reduce(a, (x, y, i) -> x + y + i) FROM t1;;
SELECT list_reduce(a, (x, y, i) -> x + y + i) FROM t1;;
;
SELECT list_reduce(a, (x, y, i) -> x + y + i) FROM t1;;
SELECT list_reduce(a, (main.row(x, y, i) -> ((x + y) + i))) FROM t1;
;
;
;
;
SELECT list_reduce(a, (x, y, i) -> x + y + i) FROM t1;;
INSERT INTO t1 VALUES ([]);;
SELECT list_reduce(a, (x, y) -> x + y) FROM t1;;
SELECT list_reduce(a, (x, y) -> x + y) FROM t1;;
;
SELECT list_reduce(a, (x, y) -> x + y) FROM t1;;
SELECT list_reduce(a, (x, y) -> x + y) FROM t1;;
DROP TABLE t1;;
CREATE TABLE t1 (a varchar[]);;
INSERT INTO t1 VALUES (['Once', 'upon', 'a', 'time']), (NULL), (['there', 'was', 'a', 'table']), (['with', 'a', 'list', 'of', 'strings']), (['and', 'it', 'was', NULL]);;
SELECT list_reduce(a, (x, y) -> x || ' ' || y) FROM t1;;
SELECT list_reduce(a, (x, y) -> x || ' ' || y) FROM t1;;
;
SELECT list_reduce(a, (x, y) -> x || ' ' || y) FROM t1;;
SELECT list_reduce(a, (main.row(x, y) -> ((x || ' ') || y))) FROM t1;
;
;
;
;
SELECT list_reduce(a, (x, y) -> x || ' ' || y) FROM t1;;
INSERT INTO t1 VALUES ([]);;
SELECT list_reduce(a, (x, y) -> x || ' ' || y) FROM t1;;
SELECT list_reduce(a, (x, y) -> x || ' ' || y) FROM t1;;
;
SELECT list_reduce(a, (x, y) -> x || ' ' || y) FROM t1;;
SELECT list_reduce(a, (x, y) -> x || ' ' || y) FROM t1;;
CREATE TABLE right_only (v varchar[], i int);;
INSERT INTO right_only VALUES (['blue', 'babbling', 'brook'], 1), (['dogs', 'doing', 'dishes'], 2), (['she', 'sells', 'seashells'], 3);;
SELECT list_reduce(v, (x, y) -> y[i]) FROM right_only;;
SELECT list_reduce(v, (x, y) -> y[i]) FROM right_only;;
;
SELECT list_reduce(v, (x, y) -> y[i]) FROM right_only;;
SELECT list_reduce(v, (main.row(x, y) -> y[i])) FROM right_only;
;
;
;
;
SELECT list_reduce(v, (x, y) -> y[i]) FROM right_only;;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([4, 5, 6], (a, b) -> x + y + a + b));;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([4, 5, 6], (a, b) -> x + y + a + b));;
;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([4, 5, 6], (a, b) -> x + y + a + b));;
SELECT list_reduce(main.list_value(1, 2, 3), (main.row(x, y) -> list_reduce(main.list_value(4, 5, 6), (main.row(a, b) -> (((x + y) + a) + b)))));
;
;
;
;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([4, 5, 6], (a, b) -> x + y + a + b));;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([], (a, b) -> x + y + a + b));;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([], (a, b) -> x + y + a + b));;
;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([], (a, b) -> x + y + a + b));;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([], (a, b) -> x + y + a + b));;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([4, 5, 6], (a, b, a_i) -> x + y + a + b + x_i + a_i));;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([4, 5, 6], (a, b, a_i) -> x + y + a + b + x_i + a_i));;
;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([4, 5, 6], (a, b, a_i) -> x + y + a + b + x_i + a_i));;
SELECT list_reduce(main.list_value(1, 2, 3), (main.row(x, y, x_i) -> list_reduce(main.list_value(4, 5, 6), (main.row(a, b, a_i) -> (((((x + y) + a) + b) + x_i) + a_i)))));
;
;
;
;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([4, 5, 6], (a, b, a_i) -> x + y + a + b + x_i + a_i));;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([], (a, b, a_i) -> x + y + a + b + x_i + a_i));;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([], (a, b, a_i) -> x + y + a + b + x_i + a_i));;
;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([], (a, b, a_i) -> x + y + a + b + x_i + a_i));;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([], (a, b, a_i) -> x + y + a + b + x_i + a_i));;
SELECT list_reduce([[10, 20], [30, 40], [50, 60]], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
SELECT list_reduce([[10, 20], [30, 40], [50, 60]], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
;
SELECT list_reduce([[10, 20], [30, 40], [50, 60]], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
SELECT list_reduce(main.list_value(main.list_value(10, 20), main.list_value(30, 40), main.list_value(50, 60)), (main.row(x, y) -> list_pack((list_reduce(x, (main.row(l, m) -> (l + m))) + list_reduce(y, (main.row(n, o) -> (n + o)))))));
;
;
;
;
SELECT list_reduce([[10, 20], [30, 40], [50, 60]], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
SELECT list_reduce([[1,2,3], [4,5,6], [7,8,9]], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
SELECT list_reduce([[1,2,3], [4,5,6], [7,8,9]], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
;
SELECT list_reduce([[1,2,3], [4,5,6], [7,8,9]], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
SELECT list_reduce(main.list_value(main.list_value(1, 2, 3), main.list_value(4, 5, 6), main.list_value(7, 8, 9)), (main.row(x, y) -> list_pack((list_reduce(x, (main.row(l, m) -> (l + m))) + list_reduce(y, (main.row(n, o) -> (n + o)))))));
;
;
;
;
SELECT list_reduce([[1,2,3], [4,5,6], [7,8,9]], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
SELECT list_reduce([[10, 20], [30, 40], NULL, [NULL, 60], NULL], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
SELECT list_reduce([[10, 20], [30, 40], NULL, [NULL, 60], NULL], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
;
SELECT list_reduce([[10, 20], [30, 40], NULL, [NULL, 60], NULL], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
SELECT list_reduce(main.list_value(main.list_value(10, 20), main.list_value(30, 40), NULL, main.list_value(NULL, 60), NULL), (main.row(x, y) -> list_pack((list_reduce(x, (main.row(l, m) -> (l + m))) + list_reduce(y, (main.row(n, o) -> (n + o)))))));
;
;
;
;
SELECT list_reduce([[10, 20], [30, 40], NULL, [NULL, 60], NULL], (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (n, o) -> n + o)));;
SELECT list_reduce(['a', 'b', 'c', 'd'], (x, y) -> list_reduce(['1', '2', '3', '4'], (a, b) -> x || y || a || b));;
SELECT list_reduce(['a', 'b', 'c', 'd'], (x, y) -> list_reduce(['1', '2', '3', '4'], (a, b) -> x || y || a || b));;
;
SELECT list_reduce(['a', 'b', 'c', 'd'], (x, y) -> list_reduce(['1', '2', '3', '4'], (a, b) -> x || y || a || b));;
SELECT list_reduce(main.list_value('a', 'b', 'c', 'd'), (main.row(x, y) -> list_reduce(main.list_value('1', '2', '3', '4'), (main.row(a, b) -> (((x || y) || a) || b)))));
;
;
;
;
SELECT list_reduce(['a', 'b', 'c', 'd'], (x, y) -> list_reduce(['1', '2', '3', '4'], (a, b) -> x || y || a || b));;
SELECT list_reduce([['a', 'b'], ['c', 'd'], ['e', 'f']], (x, y) -> list_pack(list_reduce(x, (a, b) -> a || b) || list_reduce(y, (c, d) -> c || d)));;
SELECT list_reduce([['a', 'b'], ['c', 'd'], ['e', 'f']], (x, y) -> list_pack(list_reduce(x, (a, b) -> a || b) || list_reduce(y, (c, d) -> c || d)));;
;
SELECT list_reduce([['a', 'b'], ['c', 'd'], ['e', 'f']], (x, y) -> list_pack(list_reduce(x, (a, b) -> a || b) || list_reduce(y, (c, d) -> c || d)));;
SELECT list_reduce(main.list_value(main.list_value('a', 'b'), main.list_value('c', 'd'), main.list_value('e', 'f')), (main.row(x, y) -> list_pack((list_reduce(x, (main.row(a, b) -> (a || b))) || list_reduce(y, (main.row(c, d) -> (c || d)))))));
;
;
;
;
SELECT list_reduce([['a', 'b'], ['c', 'd'], ['e', 'f']], (x, y) -> list_pack(list_reduce(x, (a, b) -> a || b) || list_reduce(y, (c, d) -> c || d)));;
CREATE TABLE nested (n integer[], l integer[]);
INSERT INTO nested VALUES ([1, 2, 3], [4, 5, 6]), (NULL, NULL), (NULL, [110, 111, 112]), ([77, 88, 99], [55, 66, NULL]);;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x + y + a + b)) FROM nested;;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x + y + a + b)) FROM nested;;
;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x + y + a + b)) FROM nested;;
SELECT list_reduce(n, (main.row(x, y) -> list_reduce(l, (main.row(a, b) -> (((x + y) + a) + b))))) FROM nested;
;
;
;
;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x + y + a + b)) FROM nested;;
SELECT list_reduce(n, (x, y, x_i) -> list_reduce(l, (a, b, a_i) -> x + y + a + b + x_i + a_i)) FROM nested;;
SELECT list_reduce(n, (x, y, x_i) -> list_reduce(l, (a, b, a_i) -> x + y + a + b + x_i + a_i)) FROM nested;;
;
SELECT list_reduce(n, (x, y, x_i) -> list_reduce(l, (a, b, a_i) -> x + y + a + b + x_i + a_i)) FROM nested;;
SELECT list_reduce(n, (main.row(x, y, x_i) -> list_reduce(l, (main.row(a, b, a_i) -> (((((x + y) + a) + b) + x_i) + a_i))))) FROM nested;
;
;
;
;
SELECT list_reduce(n, (x, y, x_i) -> list_reduce(l, (a, b, a_i) -> x + y + a + b + x_i + a_i)) FROM nested;;
SELECT list_reduce(n, (x, y, x_i) -> list_reduce(l, (a, b, a_i) -> x + y + x_i < a + b + a_i)) FROM nested;;
SELECT list_reduce(n, (x, y, x_i) -> list_reduce(l, (a, b, a_i) -> x + y + x_i < a + b + a_i)) FROM nested;;
;
SELECT list_reduce(n, (x, y, x_i) -> list_reduce(l, (a, b, a_i) -> x + y + x_i < a + b + a_i)) FROM nested;;
SELECT list_reduce(n, (main.row(x, y, x_i) -> list_reduce(l, (main.row(a, b, a_i) -> (((x + y) + x_i) < ((a + b) + a_i)))))) FROM nested;
;
;
;
;
SELECT list_reduce(n, (x, y, x_i) -> list_reduce(l, (a, b, a_i) -> x + y + x_i < a + b + a_i)) FROM nested;;
INSERT INTO nested VALUES ([4, 5, 6], []);;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x + y + a + b)) FROM nested;;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x + y + a + b)) FROM nested;;
;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x + y + a + b)) FROM nested;;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x + y + a + b)) FROM nested;;
DROP TABLE nested;;
CREATE TABLE nested (n integer[][]);
INSERT INTO nested VALUES ([[10, 20], [30, 40], [50, 60]]), ([[1,2,3], [4,5,6], [7,8,9]]), (NULL), ([[NULL, 60], [70, NULL], [NULL, NULL]]);;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (j, k) -> j + k))) from nested;;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (j, k) -> j + k))) from nested;;
;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (j, k) -> j + k))) from nested;;
SELECT list_reduce(n, (main.row(x, y) -> list_pack((list_reduce(x, (main.row(l, m) -> (l + m))) + list_reduce(y, (main.row(j, k) -> (j + k))))))) FROM nested;
;
;
;
;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (j, k) -> j + k))) from nested;;
INSERT INTO nested VALUES ([[4, 5, 6], []]);;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (j, k) -> j + k))) from nested;;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (j, k) -> j + k))) from nested;;
;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (j, k) -> j + k))) from nested;;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> l + m) + list_reduce(y, (j, k) -> j + k))) from nested;;
DROP TABLE nested;;
CREATE TABLE nested (n varchar[], l varchar[]);
INSERT INTO nested VALUES (['a', 'b', 'c', 'd'], ['1', '2', '3', '4']), (NULL, NULL), (NULL, ['110', '111', '112']), (['77', '88', '99'], ['55', '66', NULL]);;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x || y || a || b)) FROM nested;;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x || y || a || b)) FROM nested;;
;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x || y || a || b)) FROM nested;;
SELECT list_reduce(n, (main.row(x, y) -> list_reduce(l, (main.row(a, b) -> (((x || y) || a) || b))))) FROM nested;
;
;
;
;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> x || y || a || b)) FROM nested;;
DROP TABLE nested;;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([4, 5, 6], (a, b) -> list_reduce([7, 8, 9], (c, d) -> x + y + a + b + c + d)));;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([4, 5, 6], (a, b) -> list_reduce([7, 8, 9], (c, d) -> x + y + a + b + c + d)));;
;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([4, 5, 6], (a, b) -> list_reduce([7, 8, 9], (c, d) -> x + y + a + b + c + d)));;
SELECT list_reduce(main.list_value(1, 2, 3), (main.row(x, y) -> list_reduce(main.list_value(4, 5, 6), (main.row(a, b) -> list_reduce(main.list_value(7, 8, 9), (main.row(c, d) -> (((((x + y) + a) + b) + c) + d)))))));
;
;
;
;
SELECT list_reduce([1, 2, 3], (x, y) -> list_reduce([4, 5, 6], (a, b) -> list_reduce([7, 8, 9], (c, d) -> x + y + a + b + c + d)));;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([4, 5, 6], (a, b, a_i) -> list_reduce([7, 8, 9], (c, d, c_i) -> x + y + a + b + c + d + x_i + a_i + c_i)));;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([4, 5, 6], (a, b, a_i) -> list_reduce([7, 8, 9], (c, d, c_i) -> x + y + a + b + c + d + x_i + a_i + c_i)));;
;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([4, 5, 6], (a, b, a_i) -> list_reduce([7, 8, 9], (c, d, c_i) -> x + y + a + b + c + d + x_i + a_i + c_i)));;
SELECT list_reduce(main.list_value(1, 2, 3), (main.row(x, y, x_i) -> list_reduce(main.list_value(4, 5, 6), (main.row(a, b, a_i) -> list_reduce(main.list_value(7, 8, 9), (main.row(c, d, c_i) -> ((((((((x + y) + a) + b) + c) + d) + x_i) + a_i) + c_i)))))));
;
;
;
;
SELECT list_reduce([1, 2, 3], (x, y, x_i) -> list_reduce([4, 5, 6], (a, b, a_i) -> list_reduce([7, 8, 9], (c, d, c_i) -> x + y + a + b + c + d + x_i + a_i + c_i)));;
SELECT list_reduce([[[10, 20], [100, 200]], [[30, 40], [300, 400]], [[50, 60], [500, 600]]], (x, y) -> list_pack(list_reduce(x, (l, m) -> list_pack(list_reduce(l, (a, b) -> a + b) + list_reduce(m, (c, d) -> c + d))) + list_reduce(y, (n, o) -> list_pack(list_reduce(n, (a, b) -> a + b) + list_reduce(o, (c, d) -> c + d)))));;
SELECT list_reduce([[[10, 20], [100, 200]], [[30, 40], [300, 400]], [[50, 60], [500, 600]]], (x, y) -> list_pack(list_reduce(x, (l, m) -> list_pack(list_reduce(l, (a, b) -> a + b) + list_reduce(m, (c, d) -> c + d))) + list_reduce(y, (n, o) -> list_pack(list_reduce(n, (a, b) -> a + b) + list_reduce(o, (c, d) -> c + d)))));;
;
SELECT list_reduce([[[10, 20], [100, 200]], [[30, 40], [300, 400]], [[50, 60], [500, 600]]], (x, y) -> list_pack(list_reduce(x, (l, m) -> list_pack(list_reduce(l, (a, b) -> a + b) + list_reduce(m, (c, d) -> c + d))) + list_reduce(y, (n, o) -> list_pack(list_reduce(n, (a, b) -> a + b) + list_reduce(o, (c, d) -> c + d)))));;
SELECT list_reduce(main.list_value(main.list_value(main.list_value(10, 20), main.list_value(100, 200)), main.list_value(main.list_value(30, 40), main.list_value(300, 400)), main.list_value(main.list_value(50, 60), main.list_value(500, 600))), (main.row(x, y) -> list_pack((list_reduce(x, (main.row(l, m) -> list_pack((list_reduce(l, (main.row(a, b) -> (a + b))) + list_reduce(m, (main.row(c, d) -> (c + d))))))) + list_reduce(y, (main.row(n, o) -> list_pack((list_reduce(n, (main.row(a, b) -> (a + b))) + list_reduce(o, (main.row(c, d) -> (c + d)))))))))));
;
;
;
;
SELECT list_reduce([[[10, 20], [100, 200]], [[30, 40], [300, 400]], [[50, 60], [500, 600]]], (x, y) -> list_pack(list_reduce(x, (l, m) -> list_pack(list_reduce(l, (a, b) -> a + b) + list_reduce(m, (c, d) -> c + d))) + list_reduce(y, (n, o) -> list_pack(list_reduce(n, (a, b) -> a + b) + list_reduce(o, (c, d) -> c + d)))));;
CREATE TABLE nested (n integer[], l integer[], m integer[]);
INSERT INTO nested VALUES ([1, 2, 3], [4, 5, 6], [7, 8, 9]), (NULL, NULL, NULL), (NULL, [110, 111, 112], [113, 114, 115]), ([77, 88, 99], [55, 66, NULL], [44, 33, 22]);;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> list_reduce(m, (c, d) -> x + y + a + b + c + d))) FROM nested;;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> list_reduce(m, (c, d) -> x + y + a + b + c + d))) FROM nested;;
;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> list_reduce(m, (c, d) -> x + y + a + b + c + d))) FROM nested;;
SELECT list_reduce(n, (main.row(x, y) -> list_reduce(l, (main.row(a, b) -> list_reduce(m, (main.row(c, d) -> (((((x + y) + a) + b) + c) + d))))))) FROM nested;
;
;
;
;
SELECT list_reduce(n, (x, y) -> list_reduce(l, (a, b) -> list_reduce(m, (c, d) -> x + y + a + b + c + d))) FROM nested;;
DROP TABLE nested;;
CREATE TABLE nested (n integer[][][]);
INSERT INTO nested VALUES ([[[10, 20], [100, 200]], [[30, 40], [300, 400]], [[50, 60], [500, 600]]]), ([[[1,2,3], [4,5,6], [7,8,9]]]), (NULL), ([[[NULL, 60], [70, NULL], [NULL, NULL]]]);;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> list_pack(list_reduce(l, (a, b) -> a + b) + list_reduce(m, (c, d) -> c + d))) + list_reduce(y, (e, f) -> list_pack(list_reduce(e, (a, b) -> a + b) + list_reduce(f, (c, d) -> c + d))))) from nested;;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> list_pack(list_reduce(l, (a, b) -> a + b) + list_reduce(m, (c, d) -> c + d))) + list_reduce(y, (e, f) -> list_pack(list_reduce(e, (a, b) -> a + b) + list_reduce(f, (c, d) -> c + d))))) from nested;;
;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> list_pack(list_reduce(l, (a, b) -> a + b) + list_reduce(m, (c, d) -> c + d))) + list_reduce(y, (e, f) -> list_pack(list_reduce(e, (a, b) -> a + b) + list_reduce(f, (c, d) -> c + d))))) from nested;;
SELECT list_reduce(n, (main.row(x, y) -> list_pack((list_reduce(x, (main.row(l, m) -> list_pack((list_reduce(l, (main.row(a, b) -> (a + b))) + list_reduce(m, (main.row(c, d) -> (c + d))))))) + list_reduce(y, (main.row(e, f) -> list_pack((list_reduce(e, (main.row(a, b) -> (a + b))) + list_reduce(f, (main.row(c, d) -> (c + d))))))))))) FROM nested;
;
;
;
;
SELECT list_reduce(n, (x, y) -> list_pack(list_reduce(x, (l, m) -> list_pack(list_reduce(l, (a, b) -> a + b) + list_reduce(m, (c, d) -> c + d))) + list_reduce(y, (e, f) -> list_pack(list_reduce(e, (a, b) -> a + b) + list_reduce(f, (c, d) -> c + d))))) from nested;;
CREATE TABLE large_lists AS SELECT range % 4 g, list(range) l FROM range(10000) GROUP BY range % 4;;
SELECT list_reduce(l, (x, y) -> least(x, y)) FROM large_lists ORDER BY g;;
SELECT list_reduce(l, (x, y) -> least(x, y)) FROM large_lists ORDER BY g;;
;
SELECT list_reduce(l, (x, y) -> least(x, y)) FROM large_lists ORDER BY g;;
SELECT list_reduce(l, (main.row(x, y) -> least(x, y))) FROM large_lists ORDER BY g;
;
;
;
;
SELECT list_reduce(l, (x, y) -> least(x, y)) FROM large_lists ORDER BY g;;
SELECT list_reduce(l, (x, y) -> x + y) FROM large_lists ORDER BY g;;
SELECT list_reduce(l, (x, y) -> x + y) FROM large_lists ORDER BY g;;
;
SELECT list_reduce(l, (x, y) -> x + y) FROM large_lists ORDER BY g;;
SELECT list_reduce(l, (main.row(x, y) -> (x + y))) FROM large_lists ORDER BY g;
;
;
;
;
SELECT list_reduce(l, (x, y) -> x + y) FROM large_lists ORDER BY g;;
CREATE TABLE large_table AS SELECT list_reduce(range(5000), (x, y) -> x + y) as l FROM range(1000);;
SELECT count(*) from large_table where l = 12497500;;
SELECT count(*) from large_table where l = 12497500;;
;
SELECT count(*) from large_table where l = 12497500;;
SELECT count_star() FROM large_table WHERE (l = 12497500);
;
;
;
;
SELECT count(*) from large_table where l = 12497500;;
CREATE table where_clause (a int[]);;
INSERT INTO where_clause VALUES ([10, 2, 1]), ([1, 2, 3]), ([15, 4, 3]), ([3, 4, 5]), ([11, 2, 3, 4, 5]), ([5, 4, 3, 2, 1]), ([100, 2, 3, 4, 5, 6, 7, 8, 9, 10]);;
SELECT a FROM where_clause WHERE list_reduce(a, (x, y) -> x - y) > 0;;
SELECT a FROM where_clause WHERE list_reduce(a, (x, y) -> x - y) > 0;;
;
SELECT a FROM where_clause WHERE list_reduce(a, (x, y) -> x - y) > 0;;
SELECT a FROM where_clause WHERE (list_reduce(a, (main.row(x, y) -> (x - y))) > 0);
;
;
;
;
SELECT a FROM where_clause WHERE list_reduce(a, (x, y) -> x - y) > 0;;
CREATE TABLE t_struct (s STRUCT(v VARCHAR, i INTEGER)[]);;
INSERT INTO t_struct VALUES ([row('a', 1), row('b', 2)]), ([row('c', 3), row('d', 4)]), ([row('e', 5), row('f', 6)]), ([row('g', 7), row('h', 8)]), ([row('i', 9), row('j', 10)]);;
SELECT list_reduce(s, (a, b) -> row(a.v || b.v, a.i + b.i)) FROM t_struct;;
SELECT list_reduce(s, (a, b) -> row(a.v || b.v, a.i + b.i)) FROM t_struct;;
;
SELECT list_reduce(s, (a, b) -> row(a.v || b.v, a.i + b.i)) FROM t_struct;;
SELECT list_reduce(s, (main.row(a, b) -> main.row((a.v || b.v), (a.i + b.i)))) FROM t_struct;
;
;
;
;
SELECT list_reduce(s, (a, b) -> row(a.v || b.v, a.i + b.i)) FROM t_struct;;
CREATE OR REPLACE TABLE df(s STRUCT(a INT, b INT)[]);;
INSERT INTO df VALUES ([row(0, 0), row(0, 1), row(0, 2)]);;
SELECT 
list_reduce(
    s, (curr, next) -> struct_pack(a:=curr.a + (next.b - curr.b), b:=next.b)
)
FROM df;
SELECT 
list_reduce(
    s, (curr, next) -> struct_pack(a:=curr.a + (next.b - curr.b), b:=next.b)
)
FROM df;
;
SELECT 
list_reduce(
    s, (curr, next) -> struct_pack(a:=curr.a + (next.b - curr.b), b:=next.b)
)
FROM df;
SELECT list_reduce(s, (main.row(curr, "next") -> struct_pack(a := (curr.a + ("next".b - curr.b)), b := "next".b))) FROM df;
;
;
;
;
SELECT 
list_reduce(
    s, (curr, next) -> struct_pack(a:=curr.a + (next.b - curr.b), b:=next.b)
)
FROM df;
SELECT 
list_reduce(
    [struct_pack(a:=0, b:=0), struct_pack(a:=0, b:=1), struct_pack(a:=0, b:=2)],
    (curr, next) -> struct_pack(a:=curr.a + (next.b - curr.b), b:=next.b)
);
SELECT 
list_reduce(
    [struct_pack(a:=0, b:=0), struct_pack(a:=0, b:=1), struct_pack(a:=0, b:=2)],
    (curr, next) -> struct_pack(a:=curr.a + (next.b - curr.b), b:=next.b)
);
;
SELECT 
list_reduce(
    [struct_pack(a:=0, b:=0), struct_pack(a:=0, b:=1), struct_pack(a:=0, b:=2)],
    (curr, next) -> struct_pack(a:=curr.a + (next.b - curr.b), b:=next.b)
);
SELECT list_reduce(main.list_value(struct_pack(a := 0, b := 0), struct_pack(a := 0, b := 1), struct_pack(a := 0, b := 2)), (main.row(curr, "next") -> struct_pack(a := (curr.a + ("next".b - curr.b)), b := "next".b)));
;
;
;
;
SELECT 
list_reduce(
    [struct_pack(a:=0, b:=0), struct_pack(a:=0, b:=1), struct_pack(a:=0, b:=2)],
    (curr, next) -> struct_pack(a:=curr.a + (next.b - curr.b), b:=next.b)
);
