PRAGMA enable_verification;
CREATE TABLE issue2549 AS SELECT * FROM (VALUES
	(0, 1, 614),
	(1, 1, null),
	(2, 1, null),
	(3, 1, 639),
	(4, 1, 2027)
) tbl(id, user_id, order_id);;
SELECT
  id,
  user_id,
  order_id,
  LAST_VALUE (order_id IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LAST_VALUE (order_id IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  LAST_VALUE (order_id IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, last_value(order_id IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  LAST_VALUE (order_id IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  FIRST_VALUE (order_id IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  FIRST_VALUE (order_id IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  FIRST_VALUE (order_id IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, first_value(order_id IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  FIRST_VALUE (order_id IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN 1 PRECEDING AND UNBOUNDED FOLLOWING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  NTH_VALUE (order_id, 2 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  NTH_VALUE (order_id, 2 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  NTH_VALUE (order_id, 2 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, nth_value(order_id, 2 IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  NTH_VALUE (order_id, 2 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LEAD(order_id, 1, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LEAD(order_id, 1, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  LEAD(order_id, 1, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, lead(order_id, 1, -1 IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  LEAD(order_id, 1, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 1, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 1, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 1, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, lag(order_id, 1, -1 IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 1, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 0, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 0, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 0, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, lag(order_id, 0, -1 IGNORE NULLS) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 0, -1 IGNORE NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LAST_VALUE (order_id RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LAST_VALUE (order_id RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  LAST_VALUE (order_id RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, last_value(order_id) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  LAST_VALUE (order_id RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  FIRST_VALUE (order_id RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  FIRST_VALUE (order_id RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  FIRST_VALUE (order_id RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, first_value(order_id) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  FIRST_VALUE (order_id RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  NTH_VALUE (order_id, 2 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  NTH_VALUE (order_id, 2 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  NTH_VALUE (order_id, 2 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, nth_value(order_id, 2) OVER (PARTITION BY user_id ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  NTH_VALUE (order_id, 2 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
    ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LEAD(order_id, 1, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LEAD(order_id, 1, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  LEAD(order_id, 1, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, lead(order_id, 1, -1) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  LEAD(order_id, 1, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 1, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 1, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 1, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, lag(order_id, 1, -1) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 1, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 0, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 0, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 0, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
SELECT id, user_id, order_id, lag(order_id, 0, -1) OVER (PARTITION BY user_id ORDER BY id) AS last_order_id FROM issue2549 ORDER BY COLUMNS(*);
;
;
;
;
SELECT
  id,
  user_id,
  order_id,
  LAG(order_id, 0, -1 RESPECT NULLS) over (
    PARTITION BY user_id
    ORDER BY id
  ) AS last_order_id
FROM issue2549
ORDER BY ALL;
CREATE TABLE IF NOT EXISTS issue6635(index INTEGER, data INTEGER);;
insert into issue6635 values 
	(1,1),
	(2,2),
	(3,NULL),
	(4,NULL),
	(5,5),
	(6,NULL),
	(7,NULL)
;;
SELECT *, 
	first(data IGNORE NULLS) OVER w, 
	last(data IGNORE NULLS) OVER w,
	nth_value(data, 1 IGNORE NULLS) OVER w
FROM issue6635
WINDOW w AS (
	ORDER BY index 
	ROWS BETWEEN 1 FOLLOWING 
	 AND UNBOUNDED FOLLOWING
)
;;
SELECT *, 
	first(data IGNORE NULLS) OVER w, 
	last(data IGNORE NULLS) OVER w,
	nth_value(data, 1 IGNORE NULLS) OVER w
FROM issue6635
WINDOW w AS (
	ORDER BY index 
	ROWS BETWEEN 1 FOLLOWING 
	 AND UNBOUNDED FOLLOWING
)
;;
;
SELECT *, 
	first(data IGNORE NULLS) OVER w, 
	last(data IGNORE NULLS) OVER w,
	nth_value(data, 1 IGNORE NULLS) OVER w
FROM issue6635
WINDOW w AS (
	ORDER BY index 
	ROWS BETWEEN 1 FOLLOWING 
	 AND UNBOUNDED FOLLOWING
)
;;
SELECT *, first("data" IGNORE NULLS) OVER (ORDER BY "index" ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING), last("data" IGNORE NULLS) OVER (ORDER BY "index" ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING), nth_value("data", 1 IGNORE NULLS) OVER (ORDER BY "index" ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING) FROM issue6635;
;
;
;
;
SELECT *, 
	first(data IGNORE NULLS) OVER w, 
	last(data IGNORE NULLS) OVER w,
	nth_value(data, 1 IGNORE NULLS) OVER w
FROM issue6635
WINDOW w AS (
	ORDER BY index 
	ROWS BETWEEN 1 FOLLOWING 
	 AND UNBOUNDED FOLLOWING
)
;;
WITH gen AS (
    SELECT *,
        ((id * 1327) % 9973) / 10000.0 AS rnd
    FROM generate_series(1, 10000) tbl(id)
),
lvl AS (
    SELECT id,
        rnd,
        CASE
            WHEN rnd <= 0.1 THEN 'shallow'
            WHEN rnd >= 0.9 THEN 'high'
        END AS water_level
    FROM gen
)
SELECT *,
    LAST_VALUE(water_level IGNORE NULLS) OVER (
        ORDER BY id
    ) AS grade
FROM lvl
ORDER BY id;
WITH gen AS (
    SELECT *,
        ((id * 1327) % 9973) / 10000.0 AS rnd
    FROM generate_series(1, 10000) tbl(id)
),
lvl AS (
    SELECT id,
        rnd,
        CASE
            WHEN rnd <= 0.1 THEN 'shallow'
            WHEN rnd >= 0.9 THEN 'high'
        END AS water_level
    FROM gen
)
SELECT *,
    LAST_VALUE(water_level IGNORE NULLS) OVER (
        ORDER BY id
    ) AS grade
FROM lvl
ORDER BY id;
;
WITH gen AS (
    SELECT *,
        ((id * 1327) % 9973) / 10000.0 AS rnd
    FROM generate_series(1, 10000) tbl(id)
),
lvl AS (
    SELECT id,
        rnd,
        CASE
            WHEN rnd <= 0.1 THEN 'shallow'
            WHEN rnd >= 0.9 THEN 'high'
        END AS water_level
    FROM gen
)
SELECT *,
    LAST_VALUE(water_level IGNORE NULLS) OVER (
        ORDER BY id
    ) AS grade
FROM lvl
ORDER BY id;
WITH gen AS (SELECT *, (((id * 1327) % 9973) / 10000.0) AS rnd FROM generate_series(1, 10000) AS tbl(id)), lvl AS (SELECT id, rnd, CASE  WHEN ((rnd <= 0.1)) THEN ('shallow') WHEN ((rnd >= 0.9)) THEN ('high') ELSE NULL END AS water_level FROM gen)SELECT *, last_value(water_level IGNORE NULLS) OVER (ORDER BY id) AS grade FROM lvl ORDER BY id;
;
;
;
;
WITH gen AS (
    SELECT *,
        ((id * 1327) % 9973) / 10000.0 AS rnd
    FROM generate_series(1, 10000) tbl(id)
),
lvl AS (
    SELECT id,
        rnd,
        CASE
            WHEN rnd <= 0.1 THEN 'shallow'
            WHEN rnd >= 0.9 THEN 'high'
        END AS water_level
    FROM gen
)
SELECT *,
    LAST_VALUE(water_level IGNORE NULLS) OVER (
        ORDER BY id
    ) AS grade
FROM lvl
ORDER BY id;
