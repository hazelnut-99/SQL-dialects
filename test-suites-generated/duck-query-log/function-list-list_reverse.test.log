PRAGMA enable_verification;
SELECT list_reverse(NULL);;
SELECT list_reverse(NULL);;
;
SELECT list_reverse(NULL);;
SELECT list_reverse(NULL);
;
;
;
;
SELECT list_reverse(NULL);;
SELECT list_reverse([]);;
SELECT list_reverse([]);;
;
SELECT list_reverse([]);;
SELECT list_reverse(main.list_value());
;
;
;
;
SELECT list_reverse([]);;
SELECT list_reverse([NULL]);;
SELECT list_reverse([NULL]);;
;
SELECT list_reverse([NULL]);;
SELECT list_reverse(main.list_value(NULL));
;
;
;
;
SELECT list_reverse([NULL]);;
SELECT list_reverse([1, 42, 2]);;
SELECT list_reverse([1, 42, 2]);;
;
SELECT list_reverse([1, 42, 2]);;
SELECT list_reverse(main.list_value(1, 42, 2));
;
;
;
;
SELECT list_reverse([1, 42, 2]);;
SELECT list_reverse([1, 42, NULL, 2]);;
SELECT list_reverse([1, 42, NULL, 2]);;
;
SELECT list_reverse([1, 42, NULL, 2]);;
SELECT list_reverse(main.list_value(1, 42, NULL, 2));
;
;
;
;
SELECT list_reverse([1, 42, NULL, 2]);;
SELECT list_reverse(list_reverse([1, 3, 3, 42, 117, 69, NULL]));;
SELECT list_reverse(list_reverse([1, 3, 3, 42, 117, 69, NULL]));;
;
SELECT list_reverse(list_reverse([1, 3, 3, 42, 117, 69, NULL]));;
SELECT list_reverse(list_reverse(main.list_value(1, 3, 3, 42, 117, 69, NULL)));
;
;
;
;
SELECT list_reverse(list_reverse([1, 3, 3, 42, 117, 69, NULL]));;
SELECT list_reverse ([[1, 2 ,42], [3, 4]]);;
SELECT list_reverse ([[1, 2 ,42], [3, 4]]);;
;
SELECT list_reverse ([[1, 2 ,42], [3, 4]]);;
SELECT list_reverse(main.list_value(main.list_value(1, 2, 42), main.list_value(3, 4)));
;
;
;
;
SELECT list_reverse ([[1, 2 ,42], [3, 4]]);;
prepare q1 as select list_reverse(?);
execute q1([5, 42, 3]);;
prepare q1 as select list_reverse(?);
execute q1([5, 42, 3]);;
create or replace table tbl_big as select range(5000) as list;;
select list_sort((list), 'desc') == list_reverse(list) from tbl_big;;
select list_sort((list), 'desc') == list_reverse(list) from tbl_big;;
;
select list_sort((list), 'desc') == list_reverse(list) from tbl_big;;
SELECT (list_sort(list, 'desc') = list_reverse(list)) FROM tbl_big;
;
;
;
select list_sort((list), 'desc') == list_reverse(list) from tbl_big;;
CREATE TABLE tbl (id INTEGER, list INTEGER[]);;
INSERT INTO tbl VALUES (1, [NULL, 3, 117, 42, 1]), (2, NULL), (3, [1, 8, 9]), (4, NULL), (5, NULL), (6, [NULL]);;
SELECT id, list_reverse(list) FROM tbl ORDER BY id;;
SELECT id, list_reverse(list) FROM tbl ORDER BY id;;
;
SELECT id, list_reverse(list) FROM tbl ORDER BY id;;
SELECT id, list_reverse(list) FROM tbl ORDER BY id;
;
;
;
;
SELECT id, list_reverse(list) FROM tbl ORDER BY id;;
DROP TABLE tbl;;
CREATE TABLE tbl2 (id INTEGER, list INTEGER[]);;
INSERT INTO tbl2 VALUES (1, [1, 2, 3]), (1, [4, 5, 6]), (3, [7, 8, 9]);;
SELECT id, list_reverse(list) FROM tbl2 ORDER BY id;;
SELECT id, list_reverse(list) FROM tbl2 ORDER BY id;;
;
SELECT id, list_reverse(list) FROM tbl2 ORDER BY id;;
SELECT id, list_reverse(list) FROM tbl2 ORDER BY id;
;
;
;
;
SELECT id, list_reverse(list) FROM tbl2 ORDER BY id;;
DROP TABLE tbl2;;
select list_reverse(list_reverse(columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']))) 
    IS NOT DISTINCT FROM
     columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']) 
from test_all_types();;
select list_reverse(list_reverse(columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']))) 
    IS NOT DISTINCT FROM
     columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']) 
from test_all_types();;
;
select list_reverse(list_reverse(columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']))) 
    IS NOT DISTINCT FROM
     columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']) 
from test_all_types();;
SELECT (list_reverse(list_reverse(COLUMNS(main.list_value('int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array')))) IS NOT DISTINCT FROM COLUMNS(main.list_value('int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array'))) FROM test_all_types();
;
;
;
;
select list_reverse(list_reverse(columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']))) 
    IS NOT DISTINCT FROM
     columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']) 
from test_all_types();;
select list_reverse(test_vector) from test_vector_types(null::int[], false);;
select list_reverse(test_vector) from test_vector_types(null::int[], false);;
;
select list_reverse(test_vector) from test_vector_types(null::int[], false);;
SELECT list_reverse(test_vector) FROM test_vector_types(CAST(NULL AS INTEGER[]), CAST('f' AS BOOLEAN));
;
;
;
;
select list_reverse(test_vector) from test_vector_types(null::int[], false);;
select list_reverse(test_vector) from test_vector_types(null::int[], true);;
select list_reverse(test_vector) from test_vector_types(null::int[], true);;
;
select list_reverse(test_vector) from test_vector_types(null::int[], true);;
SELECT list_reverse(test_vector) FROM test_vector_types(CAST(NULL AS INTEGER[]), CAST('t' AS BOOLEAN));
;
;
;
;
select list_reverse(test_vector) from test_vector_types(null::int[], true);;
select true from test_vector_types(null::int[], false);;
select true from test_vector_types(null::int[], false);;
;
select true from test_vector_types(null::int[], false);;
SELECT CAST('t' AS BOOLEAN) FROM test_vector_types(CAST(NULL AS INTEGER[]), CAST('f' AS BOOLEAN));
;
;
;
;
select true from test_vector_types(null::int[], false);;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select list_reverse(test_vector) as list from test_vector_types(null::int[], false));;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select list_reverse(test_vector) as list from test_vector_types(null::int[], false));;
;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select list_reverse(test_vector) as list from test_vector_types(null::int[], false));;
SELECT (list_sort(list, 'desc') IS NOT DISTINCT FROM list) FROM (SELECT list_reverse(test_vector) AS list FROM test_vector_types(CAST(NULL AS INTEGER[]), CAST('f' AS BOOLEAN)));
;
;
;
;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select list_reverse(test_vector) as list from test_vector_types(null::int[], false));;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select list_reverse(test_vector) as list from test_vector_types(null::int[], true));;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select list_reverse(test_vector) as list from test_vector_types(null::int[], true));;
;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select list_reverse(test_vector) as list from test_vector_types(null::int[], true));;
SELECT (list_sort(list, 'desc') IS NOT DISTINCT FROM list) FROM (SELECT list_reverse(test_vector) AS list FROM test_vector_types(CAST(NULL AS INTEGER[]), CAST('t' AS BOOLEAN)));
;
;
;
;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select list_reverse(test_vector) as list from test_vector_types(null::int[], true));;
SELECT list_reverse();
SELECT list_reverse();
;
SELECT list_reverse();
SELECT list_reverse();
SELECT list_reverse(42);
SELECT list_reverse(42);
;
SELECT list_reverse(42);
SELECT list_reverse(42);
CREATE TABLE palindromes (s VARCHAR);;
INSERT INTO palindromes VALUES ('racecar'), ('civic'), ('defied'), ('repaper'), ('kayak'), ('rotator'), ('tattarrattat'), ('saippuakivikauppias'), ('malayalam');;
SELECT list_aggr(list_reverse(str_split(s, '')), 'string_agg', '') FROM palindromes ORDER BY s;;
SELECT list_aggr(list_reverse(str_split(s, '')), 'string_agg', '') FROM palindromes ORDER BY s;;
;
SELECT list_aggr(list_reverse(str_split(s, '')), 'string_agg', '') FROM palindromes ORDER BY s;;
SELECT list_aggr(list_reverse(str_split(s, '')), 'string_agg', '') FROM palindromes ORDER BY s;
;
;
;
SELECT list_aggr(list_reverse(str_split(s, '')), 'string_agg', '') FROM palindromes ORDER BY s;;
DROP TABLE palindromes;;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  list_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  list_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  list_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
WITH example AS (((SELECT main.list_value(1, 2, 3) AS arr) UNION ALL (SELECT main.list_value(4, 5) AS arr)) UNION ALL (SELECT main.list_value() AS arr))SELECT list_reverse(arr) AS reverse_arr FROM example ORDER BY length(reverse_arr) DESC;
;
;
;
;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  list_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
SELECT array_reverse(NULL);;
SELECT array_reverse(NULL);;
;
SELECT array_reverse(NULL);;
SELECT array_reverse(NULL);
;
;
;
;
SELECT array_reverse(NULL);;
SELECT array_reverse([]);;
SELECT array_reverse([]);;
;
SELECT array_reverse([]);;
SELECT array_reverse(main.list_value());
;
;
;
;
SELECT array_reverse([]);;
SELECT array_reverse([NULL]);;
SELECT array_reverse([NULL]);;
;
SELECT array_reverse([NULL]);;
SELECT array_reverse(main.list_value(NULL));
;
;
;
;
SELECT array_reverse([NULL]);;
SELECT array_reverse([1, 42, 2]);;
SELECT array_reverse([1, 42, 2]);;
;
SELECT array_reverse([1, 42, 2]);;
SELECT array_reverse(main.list_value(1, 42, 2));
;
;
;
;
SELECT array_reverse([1, 42, 2]);;
SELECT array_reverse([1, 42, NULL, 2]);;
SELECT array_reverse([1, 42, NULL, 2]);;
;
SELECT array_reverse([1, 42, NULL, 2]);;
SELECT array_reverse(main.list_value(1, 42, NULL, 2));
;
;
;
;
SELECT array_reverse([1, 42, NULL, 2]);;
SELECT array_reverse(array_reverse([1, 3, 3, 42, 117, 69, NULL]));;
SELECT array_reverse(array_reverse([1, 3, 3, 42, 117, 69, NULL]));;
;
SELECT array_reverse(array_reverse([1, 3, 3, 42, 117, 69, NULL]));;
SELECT array_reverse(array_reverse(main.list_value(1, 3, 3, 42, 117, 69, NULL)));
;
;
;
;
SELECT array_reverse(array_reverse([1, 3, 3, 42, 117, 69, NULL]));;
SELECT array_reverse ([[1, 2 ,42], [3, 4]]);;
SELECT array_reverse ([[1, 2 ,42], [3, 4]]);;
;
SELECT array_reverse ([[1, 2 ,42], [3, 4]]);;
SELECT array_reverse(main.list_value(main.list_value(1, 2, 42), main.list_value(3, 4)));
;
;
;
;
SELECT array_reverse ([[1, 2 ,42], [3, 4]]);;
prepare q1 as select array_reverse(?);
execute q1([5, 42, 3]);;
prepare q1 as select array_reverse(?);
execute q1([5, 42, 3]);;
create or replace table tbl_big as select range(5000) as list;;
select list_sort((list), 'desc') == array_reverse(list) from tbl_big;;
select list_sort((list), 'desc') == array_reverse(list) from tbl_big;;
;
select list_sort((list), 'desc') == array_reverse(list) from tbl_big;;
SELECT (list_sort(list, 'desc') = array_reverse(list)) FROM tbl_big;
;
;
;
select list_sort((list), 'desc') == array_reverse(list) from tbl_big;;
CREATE TABLE tbl (id INTEGER, list INTEGER[]);;
INSERT INTO tbl VALUES (1, [NULL, 3, 117, 42, 1]), (2, NULL), (3, [1, 8, 9]), (4, NULL), (5, NULL), (6, [NULL]);;
SELECT id, array_reverse(list) FROM tbl ORDER BY id;;
SELECT id, array_reverse(list) FROM tbl ORDER BY id;;
;
SELECT id, array_reverse(list) FROM tbl ORDER BY id;;
SELECT id, array_reverse(list) FROM tbl ORDER BY id;
;
;
;
;
SELECT id, array_reverse(list) FROM tbl ORDER BY id;;
DROP TABLE tbl;;
CREATE TABLE tbl2 (id INTEGER, list INTEGER[]);;
INSERT INTO tbl2 VALUES (1, [1, 2, 3]), (1, [4, 5, 6]), (3, [7, 8, 9]);;
SELECT id, array_reverse(list) FROM tbl2 ORDER BY id;;
SELECT id, array_reverse(list) FROM tbl2 ORDER BY id;;
;
SELECT id, array_reverse(list) FROM tbl2 ORDER BY id;;
SELECT id, array_reverse(list) FROM tbl2 ORDER BY id;
;
;
;
;
SELECT id, array_reverse(list) FROM tbl2 ORDER BY id;;
DROP TABLE tbl2;;
select array_reverse(array_reverse(columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']))) 
    IS NOT DISTINCT FROM
     columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']) 
from test_all_types();;
select array_reverse(array_reverse(columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']))) 
    IS NOT DISTINCT FROM
     columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']) 
from test_all_types();;
;
select array_reverse(array_reverse(columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']))) 
    IS NOT DISTINCT FROM
     columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']) 
from test_all_types();;
SELECT (array_reverse(array_reverse(COLUMNS(main.list_value('int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array')))) IS NOT DISTINCT FROM COLUMNS(main.list_value('int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array'))) FROM test_all_types();
;
;
;
;
select array_reverse(array_reverse(columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']))) 
    IS NOT DISTINCT FROM
     columns(['int_array', 'varchar_array', 'nested_int_array', 'array_of_structs', 'timestamp_array', 'double_array', 'date_array', 'timestamptz_array']) 
from test_all_types();;
select array_reverse(test_vector) from test_vector_types(null::int[], false);;
select array_reverse(test_vector) from test_vector_types(null::int[], false);;
;
select array_reverse(test_vector) from test_vector_types(null::int[], false);;
SELECT array_reverse(test_vector) FROM test_vector_types(CAST(NULL AS INTEGER[]), CAST('f' AS BOOLEAN));
;
;
;
;
select array_reverse(test_vector) from test_vector_types(null::int[], false);;
select array_reverse(test_vector) from test_vector_types(null::int[], true);;
select array_reverse(test_vector) from test_vector_types(null::int[], true);;
;
select array_reverse(test_vector) from test_vector_types(null::int[], true);;
SELECT array_reverse(test_vector) FROM test_vector_types(CAST(NULL AS INTEGER[]), CAST('t' AS BOOLEAN));
;
;
;
;
select array_reverse(test_vector) from test_vector_types(null::int[], true);;
select true from test_vector_types(null::int[], false);;
select true from test_vector_types(null::int[], false);;
;
select true from test_vector_types(null::int[], false);;
SELECT CAST('t' AS BOOLEAN) FROM test_vector_types(CAST(NULL AS INTEGER[]), CAST('f' AS BOOLEAN));
;
;
;
;
select true from test_vector_types(null::int[], false);;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select array_reverse(test_vector) as list from test_vector_types(null::int[], false));;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select array_reverse(test_vector) as list from test_vector_types(null::int[], false));;
;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select array_reverse(test_vector) as list from test_vector_types(null::int[], false));;
SELECT (list_sort(list, 'desc') IS NOT DISTINCT FROM list) FROM (SELECT array_reverse(test_vector) AS list FROM test_vector_types(CAST(NULL AS INTEGER[]), CAST('f' AS BOOLEAN)));
;
;
;
;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select array_reverse(test_vector) as list from test_vector_types(null::int[], false));;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select array_reverse(test_vector) as list from test_vector_types(null::int[], true));;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select array_reverse(test_vector) as list from test_vector_types(null::int[], true));;
;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select array_reverse(test_vector) as list from test_vector_types(null::int[], true));;
SELECT (list_sort(list, 'desc') IS NOT DISTINCT FROM list) FROM (SELECT array_reverse(test_vector) AS list FROM test_vector_types(CAST(NULL AS INTEGER[]), CAST('t' AS BOOLEAN)));
;
;
;
;
select list_sort((list), 'desc') IS NOT DISTINCT FROM list 
from (select array_reverse(test_vector) as list from test_vector_types(null::int[], true));;
SELECT array_reverse();
SELECT array_reverse();
;
SELECT array_reverse();
SELECT array_reverse();
SELECT array_reverse(42);
SELECT array_reverse(42);
;
SELECT array_reverse(42);
SELECT array_reverse(42);
CREATE TABLE palindromes (s VARCHAR);;
INSERT INTO palindromes VALUES ('racecar'), ('civic'), ('defied'), ('repaper'), ('kayak'), ('rotator'), ('tattarrattat'), ('saippuakivikauppias'), ('malayalam');;
SELECT list_aggr(array_reverse(str_split(s, '')), 'string_agg', '') FROM palindromes ORDER BY s;;
SELECT list_aggr(array_reverse(str_split(s, '')), 'string_agg', '') FROM palindromes ORDER BY s;;
;
SELECT list_aggr(array_reverse(str_split(s, '')), 'string_agg', '') FROM palindromes ORDER BY s;;
SELECT list_aggr(array_reverse(str_split(s, '')), 'string_agg', '') FROM palindromes ORDER BY s;
;
;
;
SELECT list_aggr(array_reverse(str_split(s, '')), 'string_agg', '') FROM palindromes ORDER BY s;;
DROP TABLE palindromes;;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  array_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  array_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  array_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
WITH example AS (((SELECT main.list_value(1, 2, 3) AS arr) UNION ALL (SELECT main.list_value(4, 5) AS arr)) UNION ALL (SELECT main.list_value() AS arr))SELECT array_reverse(arr) AS reverse_arr FROM example ORDER BY length(reverse_arr) DESC;
;
;
;
;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  array_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
SELECT list_reverse();
SELECT list_reverse();
;
SELECT list_reverse();
SELECT list_reverse();
SELECT list_reverse(*);
SELECT list_reverse(*);
;
SELECT list_reverse(*);
SELECT list_reverse(*);
SELECT list_reverse([1, 2], 2);
SELECT list_reverse([1, 2], 2);
;
SELECT list_reverse([1, 2], 2);
SELECT list_reverse([1, 2], 2);
SELECT array_reverse();
SELECT array_reverse();
;
SELECT array_reverse();
SELECT array_reverse();
SELECT array_reverse(*);
SELECT array_reverse(*);
;
SELECT array_reverse(*);
SELECT array_reverse(*);
SELECT array_reverse([1, 2], 2);
SELECT array_reverse([1, 2], 2);
;
SELECT array_reverse([1, 2], 2);
SELECT array_reverse([1, 2], 2);
SELECT list_reverse(NULL::boolean);
SELECT list_reverse(NULL::boolean);
;
SELECT list_reverse(NULL::boolean);
SELECT list_reverse(NULL::boolean);
SELECT list_reverse(NULL::varchar);
SELECT list_reverse(NULL::varchar);
;
SELECT list_reverse(NULL::varchar);
SELECT list_reverse(NULL::varchar);
SELECT list_reverse(NULL::tinyint);
SELECT list_reverse(NULL::tinyint);
;
SELECT list_reverse(NULL::tinyint);
SELECT list_reverse(NULL::tinyint);
SELECT list_reverse(NULL::smallint);
SELECT list_reverse(NULL::smallint);
;
SELECT list_reverse(NULL::smallint);
SELECT list_reverse(NULL::smallint);
SELECT list_reverse(NULL::integer);
SELECT list_reverse(NULL::integer);
;
SELECT list_reverse(NULL::integer);
SELECT list_reverse(NULL::integer);
SELECT list_reverse(NULL::bigint);
SELECT list_reverse(NULL::bigint);
;
SELECT list_reverse(NULL::bigint);
SELECT list_reverse(NULL::bigint);
SELECT list_reverse(NULL::hugeint);
SELECT list_reverse(NULL::hugeint);
;
SELECT list_reverse(NULL::hugeint);
SELECT list_reverse(NULL::hugeint);
SELECT list_reverse(NULL::utinyint);
SELECT list_reverse(NULL::utinyint);
;
SELECT list_reverse(NULL::utinyint);
SELECT list_reverse(NULL::utinyint);
SELECT list_reverse(NULL::usmallint);
SELECT list_reverse(NULL::usmallint);
;
SELECT list_reverse(NULL::usmallint);
SELECT list_reverse(NULL::usmallint);
SELECT list_reverse(NULL::uinteger);
SELECT list_reverse(NULL::uinteger);
;
SELECT list_reverse(NULL::uinteger);
SELECT list_reverse(NULL::uinteger);
SELECT list_reverse(NULL::ubigint);
SELECT list_reverse(NULL::ubigint);
;
SELECT list_reverse(NULL::ubigint);
SELECT list_reverse(NULL::ubigint);
SELECT list_reverse(NULL::float);
SELECT list_reverse(NULL::float);
;
SELECT list_reverse(NULL::float);
SELECT list_reverse(NULL::float);
SELECT list_reverse(NULL::double);
SELECT list_reverse(NULL::double);
;
SELECT list_reverse(NULL::double);
SELECT list_reverse(NULL::double);
SELECT list_reverse(NULL::decimal(4,1));
SELECT list_reverse(NULL::decimal(4,1));
;
SELECT list_reverse(NULL::decimal(4,1));
SELECT list_reverse(NULL::decimal(4,1));
SELECT list_reverse(NULL::decimal(9,4));
SELECT list_reverse(NULL::decimal(9,4));
;
SELECT list_reverse(NULL::decimal(9,4));
SELECT list_reverse(NULL::decimal(9,4));
SELECT list_reverse(NULL::decimal(18,6));
SELECT list_reverse(NULL::decimal(18,6));
;
SELECT list_reverse(NULL::decimal(18,6));
SELECT list_reverse(NULL::decimal(18,6));
SELECT list_reverse(NULL::decimal(38,10));
SELECT list_reverse(NULL::decimal(38,10));
;
SELECT list_reverse(NULL::decimal(38,10));
SELECT list_reverse(NULL::decimal(38,10));
SELECT list_reverse(NULL::date);
SELECT list_reverse(NULL::date);
;
SELECT list_reverse(NULL::date);
SELECT list_reverse(NULL::date);
SELECT list_reverse(NULL::time);
SELECT list_reverse(NULL::time);
;
SELECT list_reverse(NULL::time);
SELECT list_reverse(NULL::time);
SELECT list_reverse(NULL::timestamp);
SELECT list_reverse(NULL::timestamp);
;
SELECT list_reverse(NULL::timestamp);
SELECT list_reverse(NULL::timestamp);
SELECT list_reverse(NULL::timestamp_s);
SELECT list_reverse(NULL::timestamp_s);
;
SELECT list_reverse(NULL::timestamp_s);
SELECT list_reverse(NULL::timestamp_s);
SELECT list_reverse(NULL::timestamp_ms);
SELECT list_reverse(NULL::timestamp_ms);
;
SELECT list_reverse(NULL::timestamp_ms);
SELECT list_reverse(NULL::timestamp_ms);
SELECT list_reverse(NULL::timestamp_ns);
SELECT list_reverse(NULL::timestamp_ns);
;
SELECT list_reverse(NULL::timestamp_ns);
SELECT list_reverse(NULL::timestamp_ns);
SELECT list_reverse(NULL::timetz);
SELECT list_reverse(NULL::timetz);
;
SELECT list_reverse(NULL::timetz);
SELECT list_reverse(NULL::timetz);
SELECT list_reverse(NULL::timestamptz);
SELECT list_reverse(NULL::timestamptz);
;
SELECT list_reverse(NULL::timestamptz);
SELECT list_reverse(NULL::timestamptz);
SELECT list_reverse(NULL::interval);
SELECT list_reverse(NULL::interval);
;
SELECT list_reverse(NULL::interval);
SELECT list_reverse(NULL::interval);
SELECT list_reverse(NULL::blob);
SELECT list_reverse(NULL::blob);
;
SELECT list_reverse(NULL::blob);
SELECT list_reverse(NULL::blob);
SELECT array_reverse(NULL::boolean);
SELECT array_reverse(NULL::boolean);
;
SELECT array_reverse(NULL::boolean);
SELECT array_reverse(NULL::boolean);
SELECT array_reverse(NULL::varchar);
SELECT array_reverse(NULL::varchar);
;
SELECT array_reverse(NULL::varchar);
SELECT array_reverse(NULL::varchar);
SELECT array_reverse(NULL::tinyint);
SELECT array_reverse(NULL::tinyint);
;
SELECT array_reverse(NULL::tinyint);
SELECT array_reverse(NULL::tinyint);
SELECT array_reverse(NULL::smallint);
SELECT array_reverse(NULL::smallint);
;
SELECT array_reverse(NULL::smallint);
SELECT array_reverse(NULL::smallint);
SELECT array_reverse(NULL::integer);
SELECT array_reverse(NULL::integer);
;
SELECT array_reverse(NULL::integer);
SELECT array_reverse(NULL::integer);
SELECT array_reverse(NULL::bigint);
SELECT array_reverse(NULL::bigint);
;
SELECT array_reverse(NULL::bigint);
SELECT array_reverse(NULL::bigint);
SELECT array_reverse(NULL::hugeint);
SELECT array_reverse(NULL::hugeint);
;
SELECT array_reverse(NULL::hugeint);
SELECT array_reverse(NULL::hugeint);
SELECT array_reverse(NULL::utinyint);
SELECT array_reverse(NULL::utinyint);
;
SELECT array_reverse(NULL::utinyint);
SELECT array_reverse(NULL::utinyint);
SELECT array_reverse(NULL::usmallint);
SELECT array_reverse(NULL::usmallint);
;
SELECT array_reverse(NULL::usmallint);
SELECT array_reverse(NULL::usmallint);
SELECT array_reverse(NULL::uinteger);
SELECT array_reverse(NULL::uinteger);
;
SELECT array_reverse(NULL::uinteger);
SELECT array_reverse(NULL::uinteger);
SELECT array_reverse(NULL::ubigint);
SELECT array_reverse(NULL::ubigint);
;
SELECT array_reverse(NULL::ubigint);
SELECT array_reverse(NULL::ubigint);
SELECT array_reverse(NULL::float);
SELECT array_reverse(NULL::float);
;
SELECT array_reverse(NULL::float);
SELECT array_reverse(NULL::float);
SELECT array_reverse(NULL::double);
SELECT array_reverse(NULL::double);
;
SELECT array_reverse(NULL::double);
SELECT array_reverse(NULL::double);
SELECT array_reverse(NULL::decimal(4,1));
SELECT array_reverse(NULL::decimal(4,1));
;
SELECT array_reverse(NULL::decimal(4,1));
SELECT array_reverse(NULL::decimal(4,1));
SELECT array_reverse(NULL::decimal(9,4));
SELECT array_reverse(NULL::decimal(9,4));
;
SELECT array_reverse(NULL::decimal(9,4));
SELECT array_reverse(NULL::decimal(9,4));
SELECT array_reverse(NULL::decimal(18,6));
SELECT array_reverse(NULL::decimal(18,6));
;
SELECT array_reverse(NULL::decimal(18,6));
SELECT array_reverse(NULL::decimal(18,6));
SELECT array_reverse(NULL::decimal(38,10));
SELECT array_reverse(NULL::decimal(38,10));
;
SELECT array_reverse(NULL::decimal(38,10));
SELECT array_reverse(NULL::decimal(38,10));
SELECT array_reverse(NULL::date);
SELECT array_reverse(NULL::date);
;
SELECT array_reverse(NULL::date);
SELECT array_reverse(NULL::date);
SELECT array_reverse(NULL::time);
SELECT array_reverse(NULL::time);
;
SELECT array_reverse(NULL::time);
SELECT array_reverse(NULL::time);
SELECT array_reverse(NULL::timestamp);
SELECT array_reverse(NULL::timestamp);
;
SELECT array_reverse(NULL::timestamp);
SELECT array_reverse(NULL::timestamp);
SELECT array_reverse(NULL::timestamp_s);
SELECT array_reverse(NULL::timestamp_s);
;
SELECT array_reverse(NULL::timestamp_s);
SELECT array_reverse(NULL::timestamp_s);
SELECT array_reverse(NULL::timestamp_ms);
SELECT array_reverse(NULL::timestamp_ms);
;
SELECT array_reverse(NULL::timestamp_ms);
SELECT array_reverse(NULL::timestamp_ms);
SELECT array_reverse(NULL::timestamp_ns);
SELECT array_reverse(NULL::timestamp_ns);
;
SELECT array_reverse(NULL::timestamp_ns);
SELECT array_reverse(NULL::timestamp_ns);
SELECT array_reverse(NULL::timetz);
SELECT array_reverse(NULL::timetz);
;
SELECT array_reverse(NULL::timetz);
SELECT array_reverse(NULL::timetz);
SELECT array_reverse(NULL::timestamptz);
SELECT array_reverse(NULL::timestamptz);
;
SELECT array_reverse(NULL::timestamptz);
SELECT array_reverse(NULL::timestamptz);
SELECT array_reverse(NULL::interval);
SELECT array_reverse(NULL::interval);
;
SELECT array_reverse(NULL::interval);
SELECT array_reverse(NULL::interval);
SELECT array_reverse(NULL::blob);
SELECT array_reverse(NULL::blob);
;
SELECT array_reverse(NULL::blob);
SELECT array_reverse(NULL::blob);
SELECT list_reverse([1, 42, 39, 58]);
SELECT list_reverse([1, 42, 39, 58]);
;
SELECT list_reverse([1, 42, 39, 58]);
SELECT list_reverse(main.list_value(1, 42, 39, 58));
;
;
;
;
SELECT list_reverse([1, 42, 39, 58]);
SELECT list_reverse([1, NULL, 42, 39, NULL, 58]);
SELECT list_reverse([1, NULL, 42, 39, NULL, 58]);
;
SELECT list_reverse([1, NULL, 42, 39, NULL, 58]);
SELECT list_reverse(main.list_value(1, NULL, 42, 39, NULL, 58));
;
;
;
;
SELECT list_reverse([1, NULL, 42, 39, NULL, 58]);
SELECT list_reverse([1, 42, -39, 58, -1, 18]);
SELECT list_reverse([1, 42, -39, 58, -1, 18]);
;
SELECT list_reverse([1, 42, -39, 58, -1, 18]);
SELECT list_reverse(main.list_value(1, 42, -39, 58, -1, 18));
;
;
;
;
SELECT list_reverse([1, 42, -39, 58, -1, 18]);
SELECT list_reverse(list_reverse([11, -100, 678]));
SELECT list_reverse(list_reverse([11, -100, 678]));
;
SELECT list_reverse(list_reverse([11, -100, 678]));
SELECT list_reverse(list_reverse(main.list_value(11, -100, 678)));
;
;
;
;
SELECT list_reverse(list_reverse([11, -100, 678]));
SELECT array_reverse([1, 42, 39, 58]);
SELECT array_reverse([1, 42, 39, 58]);
;
SELECT array_reverse([1, 42, 39, 58]);
SELECT array_reverse(main.list_value(1, 42, 39, 58));
;
;
;
;
SELECT array_reverse([1, 42, 39, 58]);
SELECT array_reverse([1, NULL, 42, 39, NULL, 58]);
SELECT array_reverse([1, NULL, 42, 39, NULL, 58]);
;
SELECT array_reverse([1, NULL, 42, 39, NULL, 58]);
SELECT array_reverse(main.list_value(1, NULL, 42, 39, NULL, 58));
;
;
;
;
SELECT array_reverse([1, NULL, 42, 39, NULL, 58]);
SELECT array_reverse([1, 42, -39, 58, -1, 18]);
SELECT array_reverse([1, 42, -39, 58, -1, 18]);
;
SELECT array_reverse([1, 42, -39, 58, -1, 18]);
SELECT array_reverse(main.list_value(1, 42, -39, 58, -1, 18));
;
;
;
;
SELECT array_reverse([1, 42, -39, 58, -1, 18]);
SELECT array_reverse(array_reverse([11, -100, 678]));
SELECT array_reverse(array_reverse([11, -100, 678]));
;
SELECT array_reverse(array_reverse([11, -100, 678]));
SELECT array_reverse(array_reverse(main.list_value(11, -100, 678)));
;
;
;
;
SELECT array_reverse(array_reverse([11, -100, 678]));
CREATE OR REPLACE TABLE integers AS SELECT LIST(i) AS i FROM range(1, 10, 1) t1(i);
INSERT INTO integers VALUES ([NULL]), (NULL), ([]);
SELECT list_reverse(i) FROM integers;
SELECT list_reverse(i) FROM integers;
;
SELECT list_reverse(i) FROM integers;
SELECT list_reverse(i) FROM integers;
;
;
;
;
SELECT list_reverse(i) FROM integers;
SELECT (i).list_reverse() FROM integers;
SELECT (i).list_reverse() FROM integers;
;
SELECT (i).list_reverse() FROM integers;
SELECT list_reverse(i) FROM integers;
;
;
;
;
SELECT (i).list_reverse() FROM integers;
CREATE OR REPLACE TABLE integers AS SELECT LIST(i) AS i FROM range(1, 10, 1) t1(i);
INSERT INTO integers VALUES ([NULL]), (NULL), ([]);
SELECT array_reverse(i) FROM integers;
SELECT array_reverse(i) FROM integers;
;
SELECT array_reverse(i) FROM integers;
SELECT array_reverse(i) FROM integers;
;
;
;
;
SELECT array_reverse(i) FROM integers;
SELECT (i).array_reverse() FROM integers;
SELECT (i).array_reverse() FROM integers;
;
SELECT (i).array_reverse() FROM integers;
SELECT array_reverse(i) FROM integers;
;
;
;
;
SELECT (i).array_reverse() FROM integers;
SELECT list_reverse([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);
SELECT list_reverse([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);
;
SELECT list_reverse([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);
SELECT list_reverse(main.list_value(main.list_value(1), main.list_value(1, 2), NULL, main.list_value(NULL), main.list_value(), main.list_value(1, 2, 3)));
;
;
;
;
SELECT list_reverse([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);
SELECT ([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]).list_reverse();
SELECT ([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]).list_reverse();
;
SELECT ([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]).list_reverse();
SELECT list_reverse(main.list_value(main.list_value(1), main.list_value(1, 2), NULL, main.list_value(NULL), main.list_value(), main.list_value(1, 2, 3)));
;
;
;
;
SELECT ([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]).list_reverse();
CREATE OR REPLACE TABLE lists AS SELECT range % 4 g, list(range) l FROM range(10000) GROUP BY range % 4;;
with cte0 as (
  select g, list_reverse(l) l from lists
), cte1 as (
  select g, unnest(l) i from cte0
), cte2 as (
  select g, i, lead(g, 1) over () lg, lead(i, 1) over () li from cte1
)
select count(*)
from cte2
where g = lg
  and lg not null
  and li > i;
with cte0 as (
  select g, list_reverse(l) l from lists
), cte1 as (
  select g, unnest(l) i from cte0
), cte2 as (
  select g, i, lead(g, 1) over () lg, lead(i, 1) over () li from cte1
)
select count(*)
from cte2
where g = lg
  and lg not null
  and li > i;
;
with cte0 as (
  select g, list_reverse(l) l from lists
), cte1 as (
  select g, unnest(l) i from cte0
), cte2 as (
  select g, i, lead(g, 1) over () lg, lead(i, 1) over () li from cte1
)
select count(*)
from cte2
where g = lg
  and lg not null
  and li > i;
WITH cte0 AS (SELECT g, list_reverse(l) AS l FROM lists), cte1 AS (SELECT g, unnest(l) AS i FROM cte0), cte2 AS (SELECT g, i, lead(g, 1) OVER () AS lg, lead(i, 1) OVER () AS li FROM cte1)SELECT count_star() FROM cte2 WHERE ((g = lg) AND (lg IS NOT NULL) AND (li > i));
;
;
;
;
with cte0 as (
  select g, list_reverse(l) l from lists
), cte1 as (
  select g, unnest(l) i from cte0
), cte2 as (
  select g, i, lead(g, 1) over () lg, lead(i, 1) over () li from cte1
)
select count(*)
from cte2
where g = lg
  and lg not null
  and li > i;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  list_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  list_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  list_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
WITH example AS (((SELECT main.list_value(1, 2, 3) AS arr) UNION ALL (SELECT main.list_value(4, 5) AS arr)) UNION ALL (SELECT main.list_value() AS arr))SELECT list_reverse(arr) AS reverse_arr FROM example ORDER BY length(reverse_arr) DESC;
;
;
;
;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  list_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
SELECT array_reverse([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);
SELECT array_reverse([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);
;
SELECT array_reverse([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);
SELECT array_reverse(main.list_value(main.list_value(1), main.list_value(1, 2), NULL, main.list_value(NULL), main.list_value(), main.list_value(1, 2, 3)));
;
;
;
;
SELECT array_reverse([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]);
SELECT ([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]).array_reverse();
SELECT ([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]).array_reverse();
;
SELECT ([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]).array_reverse();
SELECT array_reverse(main.list_value(main.list_value(1), main.list_value(1, 2), NULL, main.list_value(NULL), main.list_value(), main.list_value(1, 2, 3)));
;
;
;
;
SELECT ([[1], [1, 2], NULL, [NULL], [], [1, 2, 3]]).array_reverse();
CREATE OR REPLACE TABLE lists AS SELECT range % 4 g, list(range) l FROM range(10000) GROUP BY range % 4;;
with cte0 as (
  select g, array_reverse(l) l from lists
), cte1 as (
  select g, unnest(l) i from cte0
), cte2 as (
  select g, i, lead(g, 1) over () lg, lead(i, 1) over () li from cte1
)
select count(*)
from cte2
where g = lg
  and lg not null
  and li > i;
with cte0 as (
  select g, array_reverse(l) l from lists
), cte1 as (
  select g, unnest(l) i from cte0
), cte2 as (
  select g, i, lead(g, 1) over () lg, lead(i, 1) over () li from cte1
)
select count(*)
from cte2
where g = lg
  and lg not null
  and li > i;
;
with cte0 as (
  select g, array_reverse(l) l from lists
), cte1 as (
  select g, unnest(l) i from cte0
), cte2 as (
  select g, i, lead(g, 1) over () lg, lead(i, 1) over () li from cte1
)
select count(*)
from cte2
where g = lg
  and lg not null
  and li > i;
WITH cte0 AS (SELECT g, array_reverse(l) AS l FROM lists), cte1 AS (SELECT g, unnest(l) AS i FROM cte0), cte2 AS (SELECT g, i, lead(g, 1) OVER () AS lg, lead(i, 1) OVER () AS li FROM cte1)SELECT count_star() FROM cte2 WHERE ((g = lg) AND (lg IS NOT NULL) AND (li > i));
;
;
;
;
with cte0 as (
  select g, array_reverse(l) l from lists
), cte1 as (
  select g, unnest(l) i from cte0
), cte2 as (
  select g, i, lead(g, 1) over () lg, lead(i, 1) over () li from cte1
)
select count(*)
from cte2
where g = lg
  and lg not null
  and li > i;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  array_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  array_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  array_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
WITH example AS (((SELECT main.list_value(1, 2, 3) AS arr) UNION ALL (SELECT main.list_value(4, 5) AS arr)) UNION ALL (SELECT main.list_value() AS arr))SELECT array_reverse(arr) AS reverse_arr FROM example ORDER BY length(reverse_arr) DESC;
;
;
;
;
WITH example AS (
  SELECT [1, 2, 3] AS arr UNION ALL
  SELECT [4, 5] AS arr UNION ALL
  SELECT [] AS arr
)
SELECT
  array_reverse(arr) AS reverse_arr
FROM example ORDER BY length(reverse_arr) DESC;;
