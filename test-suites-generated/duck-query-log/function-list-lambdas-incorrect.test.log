PRAGMA enable_verification;;
CREATE TABLE incorrect_test (i INTEGER);;
SELECT list_transform();;
SELECT list_transform();;
;
SELECT list_transform();;
SELECT list_transform();;
SELECT list_transform([]);;
SELECT list_transform([]);;
;
SELECT list_transform([]);;
SELECT list_transform([]);;
SELECT list_transform(1, 2, 3);;
SELECT list_transform(1, 2, 3);;
;
SELECT list_transform(1, 2, 3);;
SELECT list_transform(1, 2, 3);;
SELECT list_transform(NULL, NULL);;
SELECT list_transform(NULL, NULL);;
;
SELECT list_transform(NULL, NULL);;
SELECT list_transform(NULL, NULL);;
SELECT list_transform(NULL, x);;
SELECT list_transform(NULL, x);;
;
SELECT list_transform(NULL, x);;
SELECT list_transform(NULL, x);;
SELECT list_transform([1, 2], (SELECT 1) -> x + 1);;
SELECT list_transform([1, 2], (SELECT 1) -> x + 1);;
;
SELECT list_transform([1, 2], (SELECT 1) -> x + 1);;
SELECT list_transform([1, 2], (SELECT 1) -> x + 1);;
SELECT list_transform(NULL, i) FROM incorrect_test;;
SELECT list_transform(NULL, i) FROM incorrect_test;;
;
SELECT list_transform(NULL, i) FROM incorrect_test;;
SELECT list_transform(NULL, i) FROM incorrect_test;;
SELECT list_transform(NULL, x -> y);;
SELECT list_transform(NULL, x -> y);;
;
SELECT list_transform(NULL, x -> y);;
SELECT list_transform(NULL, x -> y);;
SELECT list_transform([1]);;
SELECT list_transform([1]);;
;
SELECT list_transform([1]);;
SELECT list_transform([1]);;
SELECT list_transform([1], NULL);;
SELECT list_transform([1], NULL);;
;
SELECT list_transform([1], NULL);;
SELECT list_transform([1], NULL);;
SELECT list_transform([[1]], x -> x + 1);;
SELECT list_transform([[1]], x -> x + 1);;
;
SELECT list_transform([[1]], x -> x + 1);;
SELECT list_transform([[1]], x -> x + 1);;
SELECT list_transform(1, 1);;
SELECT list_transform(1, 1);;
;
SELECT list_transform(1, 1);;
SELECT list_transform(1, 1);;
SELECT list_transform([1], x -> x, 3);;
SELECT list_transform([1], x -> x, 3);;
;
SELECT list_transform([1], x -> x, 3);;
SELECT list_transform([1], x -> x, 3);;
SELECT list_transform([True], x -> x, x -> x);;
SELECT list_transform([True], x -> x, x -> x);;
;
SELECT list_transform([True], x -> x, x -> x);;
SELECT list_transform([True], x -> x, x -> x);;
SELECT list_transform(1, x -> x + 1);;
SELECT list_transform(1, x -> x + 1);;
;
SELECT list_transform(1, x -> x + 1);;
SELECT list_transform(1, x -> x + 1);;
SELECT list_filter();;
SELECT list_filter();;
;
SELECT list_filter();;
SELECT list_filter();;
SELECT list_filter([]);;
SELECT list_filter([]);;
;
SELECT list_filter([]);;
SELECT list_filter([]);;
SELECT list_filter(1, 2, 3);;
SELECT list_filter(1, 2, 3);;
;
SELECT list_filter(1, 2, 3);;
SELECT list_filter(1, 2, 3);;
SELECT list_filter(NULL, NULL);;
SELECT list_filter(NULL, NULL);;
;
SELECT list_filter(NULL, NULL);;
SELECT list_filter(NULL, NULL);;
SELECT list_filter(NULL, x);;
SELECT list_filter(NULL, x);;
;
SELECT list_filter(NULL, x);;
SELECT list_filter(NULL, x);;
SELECT list_filter([1, 2], (SELECT 1) -> x + 1);;
SELECT list_filter([1, 2], (SELECT 1) -> x + 1);;
;
SELECT list_filter([1, 2], (SELECT 1) -> x + 1);;
SELECT list_filter([1, 2], (SELECT 1) -> x + 1);;
SELECT list_filter(NULL, i) FROM incorrect_test;;
SELECT list_filter(NULL, i) FROM incorrect_test;;
;
SELECT list_filter(NULL, i) FROM incorrect_test;;
SELECT list_filter(NULL, i) FROM incorrect_test;;
SELECT list_filter(NULL, x -> y);;
SELECT list_filter(NULL, x -> y);;
;
SELECT list_filter(NULL, x -> y);;
SELECT list_filter(NULL, x -> y);;
SELECT list_filter([1]);;
SELECT list_filter([1]);;
;
SELECT list_filter([1]);;
SELECT list_filter([1]);;
SELECT list_filter([1], NULL);;
SELECT list_filter([1], NULL);;
;
SELECT list_filter([1], NULL);;
SELECT list_filter([1], NULL);;
SELECT list_filter([[1]], x -> x + 1);;
SELECT list_filter([[1]], x -> x + 1);;
;
SELECT list_filter([[1]], x -> x + 1);;
SELECT list_filter([[1]], x -> x + 1);;
SELECT list_filter(1, 1);;
SELECT list_filter(1, 1);;
;
SELECT list_filter(1, 1);;
SELECT list_filter(1, 1);;
SELECT list_filter([1], x -> x, 3);;
SELECT list_filter([1], x -> x, 3);;
;
SELECT list_filter([1], x -> x, 3);;
SELECT list_filter([1], x -> x, 3);;
SELECT list_filter([True], x -> x, x -> x);;
SELECT list_filter([True], x -> x, x -> x);;
;
SELECT list_filter([True], x -> x, x -> x);;
SELECT list_filter([True], x -> x, x -> x);;
SELECT list_filter(1, x -> x + 1);;
SELECT list_filter(1, x -> x + 1);;
;
SELECT list_filter(1, x -> x + 1);;
SELECT list_filter(1, x -> x + 1);;
SELECT list_reduce();;
SELECT list_reduce();;
;
SELECT list_reduce();;
SELECT list_reduce();;
SELECT list_reduce([]);;
SELECT list_reduce([]);;
;
SELECT list_reduce([]);;
SELECT list_reduce([]);;
SELECT list_reduce(1, 2, 3);;
SELECT list_reduce(1, 2, 3);;
;
SELECT list_reduce(1, 2, 3);;
SELECT list_reduce(1, 2, 3);;
SELECT list_reduce(NULL, NULL);;
SELECT list_reduce(NULL, NULL);;
;
SELECT list_reduce(NULL, NULL);;
SELECT list_reduce(NULL, NULL);;
SELECT list_reduce(NULL, x);;
SELECT list_reduce(NULL, x);;
;
SELECT list_reduce(NULL, x);;
SELECT list_reduce(NULL, x);;
SELECT list_reduce([1, 2], (SELECT 1) -> x + 1);;
SELECT list_reduce([1, 2], (SELECT 1) -> x + 1);;
;
SELECT list_reduce([1, 2], (SELECT 1) -> x + 1);;
SELECT list_reduce([1, 2], (SELECT 1) -> x + 1);;
SELECT list_reduce(NULL, i) FROM incorrect_test;;
SELECT list_reduce(NULL, i) FROM incorrect_test;;
;
SELECT list_reduce(NULL, i) FROM incorrect_test;;
SELECT list_reduce(NULL, i) FROM incorrect_test;;
SELECT list_reduce(NULL, x -> y);;
SELECT list_reduce(NULL, x -> y);;
;
SELECT list_reduce(NULL, x -> y);;
SELECT list_reduce(NULL, x -> y);;
SELECT list_reduce([1]);;
SELECT list_reduce([1]);;
;
SELECT list_reduce([1]);;
SELECT list_reduce([1]);;
SELECT list_reduce([1], NULL);;
SELECT list_reduce([1], NULL);;
;
SELECT list_reduce([1], NULL);;
SELECT list_reduce([1], NULL);;
SELECT list_reduce([[1]], x -> x + 1);;
SELECT list_reduce([[1]], x -> x + 1);;
;
SELECT list_reduce([[1]], x -> x + 1);;
SELECT list_reduce([[1]], x -> x + 1);;
SELECT list_reduce(1, 1);;
SELECT list_reduce(1, 1);;
;
SELECT list_reduce(1, 1);;
SELECT list_reduce(1, 1);;
SELECT list_reduce([1], x -> x, 3);;
SELECT list_reduce([1], x -> x, 3);;
;
SELECT list_reduce([1], x -> x, 3);;
SELECT list_reduce([1], x -> x, 3);;
SELECT list_reduce([True], x -> x, x -> x);;
SELECT list_reduce([True], x -> x, x -> x);;
;
SELECT list_reduce([True], x -> x, x -> x);;
SELECT list_reduce([True], x -> x, x -> x);;
SELECT list_reduce(1, x -> x + 1);;
SELECT list_reduce(1, x -> x + 1);;
;
SELECT list_reduce(1, x -> x + 1);;
SELECT list_reduce(1, x -> x + 1);;
SELECT [split('01:08:22', ':'), x -> CAST (x AS INTEGER)];;
SELECT [split('01:08:22', ':'), x -> CAST (x AS INTEGER)];;
;
SELECT [split('01:08:22', ':'), x -> CAST (x AS INTEGER)];;
SELECT [split('01:08:22', ':'), x -> CAST (x AS INTEGER)];;
select list_apply(i, x -> x * 3 + 2 / zz) from (values (list_value(1, 2, 3))) tbl(i);;
select list_apply(i, x -> x * 3 + 2 / zz) from (values (list_value(1, 2, 3))) tbl(i);;
;
select list_apply(i, x -> x * 3 + 2 / zz) from (values (list_value(1, 2, 3))) tbl(i);;
select list_apply(i, x -> x * 3 + 2 / zz) from (values (list_value(1, 2, 3))) tbl(i);;
select x -> x + 1 from (values (list_value(1, 2, 3))) tbl(i);;
select x -> x + 1 from (values (list_value(1, 2, 3))) tbl(i);;
;
select x -> x + 1 from (values (list_value(1, 2, 3))) tbl(i);;
select x -> x + 1 from (values (list_value(1, 2, 3))) tbl(i);;
select list_apply(i, y + 1 -> x + 1) from (values (list_value(1, 2, 3))) tbl(i);;
select list_apply(i, y + 1 -> x + 1) from (values (list_value(1, 2, 3))) tbl(i);;
;
select list_apply(i, y + 1 -> x + 1) from (values (list_value(1, 2, 3))) tbl(i);;
select list_apply(i, y + 1 -> x + 1) from (values (list_value(1, 2, 3))) tbl(i);;
SELECT list_apply(i, a.x -> x + 1) FROM (VALUES (list_value(1, 2, 3))) tbl(i);;
SELECT list_apply(i, a.x -> x + 1) FROM (VALUES (list_value(1, 2, 3))) tbl(i);;
;
SELECT list_apply(i, a.x -> x + 1) FROM (VALUES (list_value(1, 2, 3))) tbl(i);;
SELECT list_apply(i, a.x -> x + 1) FROM (VALUES (list_value(1, 2, 3))) tbl(i);;
select list_apply(i, x -> x + 1 AND y + 1) from (values (list_value(1, 2, 3))) tbl(i);;
select list_apply(i, x -> x + 1 AND y + 1) from (values (list_value(1, 2, 3))) tbl(i);;
;
select list_apply(i, x -> x + 1 AND y + 1) from (values (list_value(1, 2, 3))) tbl(i);;
select list_apply(i, x -> x + 1 AND y + 1) from (values (list_value(1, 2, 3))) tbl(i);;
CREATE TABLE l_filter_test (l integer[]);;
SELECT list_transform([1, 2], (x, y, z) -> x + y + z);;
SELECT list_transform([1, 2], (x, y, z) -> x + y + z);;
;
SELECT list_transform([1, 2], (x, y, z) -> x + y + z);;
SELECT list_transform([1, 2], (x, y, z) -> x + y + z);;
SELECT list_filter([1, 2], (x, y, z) -> x >= y AND y >= z);;
SELECT list_filter([1, 2], (x, y, z) -> x >= y AND y >= z);;
;
SELECT list_filter([1, 2], (x, y, z) -> x >= y AND y >= z);;
SELECT list_filter([1, 2], (x, y, z) -> x >= y AND y >= z);;
SELECT cos(x -> x + 1);;
SELECT cos(x -> x + 1);;
;
SELECT cos(x -> x + 1);;
SELECT cos(x -> x + 1);;
SELECT cos([1], x -> x + 1);;
SELECT cos([1], x -> x + 1);;
;
SELECT cos([1], x -> x + 1);;
SELECT cos([1], x -> x + 1);;
create table lambda_check (i BIGINT[],
    CHECK (list_filter(i, x -> x % 2 = 0) == []));;
CREATE TABLE lambda_check (i BIGINT[],
    CHECK (list_transform(i, x -> x % 2) == []));;
CREATE TABLE lambda_check (i BIGINT[],
    CHECK ([x + 1 FOR x IN i IF x > 0] == []));;
create table lambda_check (
	i BIGINT[],
	j BIGINT[],
	CHECK ((list_apply(i, x -> list_count(list_filter(j, y -> y%2=0)) + x)) == []));;
CREATE TABLE unit2(
	price INTEGER[],
	total_price INTEGER GENERATED ALWAYS AS (list_transform(price, x -> x + 1)) VIRTUAL
);;
CREATE TABLE tbl AS SELECT {'a': 10} AS s;;
SELECT list_transform(UNNEST(s), x -> UNNEST(x)) FROM tbl;;
SELECT list_transform(UNNEST(s), x -> UNNEST(x)) FROM tbl;;
;
SELECT list_transform(UNNEST(s), x -> UNNEST(x)) FROM tbl;;
SELECT list_transform(UNNEST(s), x -> UNNEST(x)) FROM tbl;;
