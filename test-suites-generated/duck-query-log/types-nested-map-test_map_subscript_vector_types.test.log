PRAGMA enable_verification;;
SELECT true as equal
FROM test_vector_types(NULL::INT[]) t(c)
WHERE c IS NOT NULL;;
SELECT true as equal
FROM test_vector_types(NULL::INT[]) t(c)
WHERE c IS NOT NULL;;
;
SELECT true as equal
FROM test_vector_types(NULL::INT[]) t(c)
WHERE c IS NOT NULL;;
SELECT CAST('t' AS BOOLEAN) AS equal FROM test_vector_types(CAST(NULL AS INTEGER[])) AS t(c) WHERE (c IS NOT NULL);
;
;
;
;
SELECT true as equal
FROM test_vector_types(NULL::INT[]) t(c)
WHERE c IS NOT NULL;;
SELECT map([c], [c])[c] IS NOT DISTINCT FROM [c] as equal
FROM test_vector_types(NULL::INT[]) t(c)
WHERE c IS NOT NULL;;
SELECT map([c], [c])[c] IS NOT DISTINCT FROM [c] as equal
FROM test_vector_types(NULL::INT[]) t(c)
WHERE c IS NOT NULL;;
;
SELECT map([c], [c])[c] IS NOT DISTINCT FROM [c] as equal
FROM test_vector_types(NULL::INT[]) t(c)
WHERE c IS NOT NULL;;
SELECT (map(main.list_value(c), main.list_value(c))[c] IS NOT DISTINCT FROM main.list_value(c)) AS equal FROM test_vector_types(CAST(NULL AS INTEGER[])) AS t(c) WHERE (c IS NOT NULL);
;
;
;
;
SELECT map([c], [c])[c] IS NOT DISTINCT FROM [c] as equal
FROM test_vector_types(NULL::INT[]) t(c)
WHERE c IS NOT NULL;;
SELECT filtered, last_element, pos, true
from
(
	SELECT
		list_distinct(c) as filtered,
		filtered[-1] as last_element,
		CASE
			WHEN last_element IS NULL
				THEN 0
			ELSE list_position(filtered, last_element)
		END as pos,
		CASE
			WHEN last_element IS NULL
				THEN []
			ELSE [list_position(filtered, last_element)]
		END as expected_result,
	FROM test_vector_types(NULL::INT[]) t(c)
	WHERE c IS NOT NULL
);;
SELECT filtered, last_element, pos, true
from
(
	SELECT
		list_distinct(c) as filtered,
		filtered[-1] as last_element,
		CASE
			WHEN last_element IS NULL
				THEN 0
			ELSE list_position(filtered, last_element)
		END as pos,
		CASE
			WHEN last_element IS NULL
				THEN []
			ELSE [list_position(filtered, last_element)]
		END as expected_result,
	FROM test_vector_types(NULL::INT[]) t(c)
	WHERE c IS NOT NULL
);;
;
SELECT filtered, last_element, pos, true
from
(
	SELECT
		list_distinct(c) as filtered,
		filtered[-1] as last_element,
		CASE
			WHEN last_element IS NULL
				THEN 0
			ELSE list_position(filtered, last_element)
		END as pos,
		CASE
			WHEN last_element IS NULL
				THEN []
			ELSE [list_position(filtered, last_element)]
		END as expected_result,
	FROM test_vector_types(NULL::INT[]) t(c)
	WHERE c IS NOT NULL
);;
SELECT filtered, last_element, pos, CAST('t' AS BOOLEAN) FROM (SELECT list_distinct(c) AS filtered, filtered[-1] AS last_element, CASE  WHEN ((last_element IS NULL)) THEN (0) ELSE list_position(filtered, last_element) END AS pos, CASE  WHEN ((last_element IS NULL)) THEN (main.list_value()) ELSE main.list_value(list_position(filtered, last_element)) END AS expected_result FROM test_vector_types(CAST(NULL AS INTEGER[])) AS t(c) WHERE (c IS NOT NULL));
;
;
;
;
SELECT filtered, last_element, pos, true
from
(
	SELECT
		list_distinct(c) as filtered,
		filtered[-1] as last_element,
		CASE
			WHEN last_element IS NULL
				THEN 0
			ELSE list_position(filtered, last_element)
		END as pos,
		CASE
			WHEN last_element IS NULL
				THEN []
			ELSE [list_position(filtered, last_element)]
		END as expected_result,
	FROM test_vector_types(NULL::INT[]) t(c)
	WHERE c IS NOT NULL
);;
SELECT
	filtered,
	last_element,
	pos,
	expected_result = result OR (result = [] AND expected_result = [NULL]) as equal
from
(
	SELECT
		list_distinct(c) as filtered,
		map(filtered, range(1, len(filtered)+1)) as mymap,
		filtered[-1] as last_element,
		CASE
			WHEN last_element IS NULL
				THEN 0
			ELSE list_position(filtered, last_element)
		END as pos,
		CASE
			WHEN last_element IS NULL
				THEN []
			ELSE [list_position(filtered, last_element)]
		END as expected_result,
		mymap[last_element] as result,
	FROM test_vector_types(NULL::INT[]) t(c)
	WHERE c IS NOT NULL
);;
SELECT
	filtered,
	last_element,
	pos,
	expected_result = result OR (result = [] AND expected_result = [NULL]) as equal
from
(
	SELECT
		list_distinct(c) as filtered,
		map(filtered, range(1, len(filtered)+1)) as mymap,
		filtered[-1] as last_element,
		CASE
			WHEN last_element IS NULL
				THEN 0
			ELSE list_position(filtered, last_element)
		END as pos,
		CASE
			WHEN last_element IS NULL
				THEN []
			ELSE [list_position(filtered, last_element)]
		END as expected_result,
		mymap[last_element] as result,
	FROM test_vector_types(NULL::INT[]) t(c)
	WHERE c IS NOT NULL
);;
;
SELECT
	filtered,
	last_element,
	pos,
	expected_result = result OR (result = [] AND expected_result = [NULL]) as equal
from
(
	SELECT
		list_distinct(c) as filtered,
		map(filtered, range(1, len(filtered)+1)) as mymap,
		filtered[-1] as last_element,
		CASE
			WHEN last_element IS NULL
				THEN 0
			ELSE list_position(filtered, last_element)
		END as pos,
		CASE
			WHEN last_element IS NULL
				THEN []
			ELSE [list_position(filtered, last_element)]
		END as expected_result,
		mymap[last_element] as result,
	FROM test_vector_types(NULL::INT[]) t(c)
	WHERE c IS NOT NULL
);;
SELECT filtered, last_element, pos, ((expected_result = result) OR ((result = main.list_value()) AND (expected_result = main.list_value(NULL)))) AS equal FROM (SELECT list_distinct(c) AS filtered, map(filtered, range(1, (len(filtered) + 1))) AS mymap, filtered[-1] AS last_element, CASE  WHEN ((last_element IS NULL)) THEN (0) ELSE list_position(filtered, last_element) END AS pos, CASE  WHEN ((last_element IS NULL)) THEN (main.list_value()) ELSE main.list_value(list_position(filtered, last_element)) END AS expected_result, mymap[last_element] AS result FROM test_vector_types(CAST(NULL AS INTEGER[])) AS t(c) WHERE (c IS NOT NULL));
;
;
;
;
SELECT
	filtered,
	last_element,
	pos,
	expected_result = result OR (result = [] AND expected_result = [NULL]) as equal
from
(
	SELECT
		list_distinct(c) as filtered,
		map(filtered, range(1, len(filtered)+1)) as mymap,
		filtered[-1] as last_element,
		CASE
			WHEN last_element IS NULL
				THEN 0
			ELSE list_position(filtered, last_element)
		END as pos,
		CASE
			WHEN last_element IS NULL
				THEN []
			ELSE [list_position(filtered, last_element)]
		END as expected_result,
		mymap[last_element] as result,
	FROM test_vector_types(NULL::INT[]) t(c)
	WHERE c IS NOT NULL
);;
