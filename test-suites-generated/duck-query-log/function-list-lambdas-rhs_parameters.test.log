PRAGMA enable_verification;
SELECT list_apply([1,2], x -> list_apply([3,4], y -> {'x': x, 'y': y})) AS bug;;
SELECT list_apply([1,2], x -> list_apply([3,4], y -> {'x': x, 'y': y})) AS bug;;
;
SELECT list_apply([1,2], x -> list_apply([3,4], y -> {'x': x, 'y': y})) AS bug;;
SELECT list_apply(main.list_value(1, 2), (x -> list_apply(main.list_value(3, 4), (y -> main.struct_pack(x := x, y := y))))) AS bug;
;
;
;
;
SELECT list_apply([1,2], x -> list_apply([3,4], y -> {'x': x, 'y': y})) AS bug;;
select list_transform([1,2], x -> list_transform([3,4], y -> x + y));;
select list_transform([1,2], x -> list_transform([3,4], y -> x + y));;
;
select list_transform([1,2], x -> list_transform([3,4], y -> x + y));;
SELECT list_transform(main.list_value(1, 2), (x -> list_transform(main.list_value(3, 4), (y -> (x + y)))));
;
;
;
;
select list_transform([1,2], x -> list_transform([3,4], y -> x + y));;
select list_transform([1,2], x -> list_transform([3,4], y -> list_transform([5,6], z -> z + y + x)));;
select list_transform([1,2], x -> list_transform([3,4], y -> list_transform([5,6], z -> z + y + x)));;
;
select list_transform([1,2], x -> list_transform([3,4], y -> list_transform([5,6], z -> z + y + x)));;
SELECT list_transform(main.list_value(1, 2), (x -> list_transform(main.list_value(3, 4), (y -> list_transform(main.list_value(5, 6), (z -> ((z + y) + x)))))));
;
;
;
;
select list_transform([1,2], x -> list_transform([3,4], y -> list_transform([5,6], z -> z + y + x)));;
select list_transform([1,2,3,4], x -> list_filter([4,5,1,2,3,3,3,5,1,4], y -> y != x));
select list_transform([1,2,3,4], x -> list_filter([4,5,1,2,3,3,3,5,1,4], y -> y != x));
;
select list_transform([1,2,3,4], x -> list_filter([4,5,1,2,3,3,3,5,1,4], y -> y != x));
SELECT list_transform(main.list_value(1, 2, 3, 4), (x -> list_filter(main.list_value(4, 5, 1, 2, 3, 3, 3, 5, 1, 4), (y -> (y != x)))));
;
;
;
;
select list_transform([1,2,3,4], x -> list_filter([4,5,1,2,3,3,3,5,1,4], y -> y != x));
select list_transform([[2, 4, 6]], x -> list_transform(x, y -> list_sum([y] || x)));
select list_transform([[2, 4, 6]], x -> list_transform(x, y -> list_sum([y] || x)));
;
select list_transform([[2, 4, 6]], x -> list_transform(x, y -> list_sum([y] || x)));
SELECT list_transform(main.list_value(main.list_value(2, 4, 6)), (x -> list_transform(x, (y -> list_sum((main.list_value(y) || x))))));
;
;
;
;
select list_transform([[2, 4, 6]], x -> list_transform(x, y -> list_sum([y] || x)));
SELECT list_apply(range(5), x -> {x:x, w:list_filter(range(5), y -> abs(y-x) < 2)});;
SELECT list_apply(range(5), x -> {x:x, w:list_filter(range(5), y -> abs(y-x) < 2)});;
;
SELECT list_apply(range(5), x -> {x:x, w:list_filter(range(5), y -> abs(y-x) < 2)});;
SELECT list_apply(range(5), (x -> main.struct_pack(x := x, w := list_filter(range(5), (y -> (abs((y - x)) < 2))))));
;
;
;
;
SELECT list_apply(range(5), x -> {x:x, w:list_filter(range(5), y -> abs(y-x) < 2)});;
SELECT list_apply(range(8), x -> list_aggr(list_apply(range(8),
y -> list_element('▁▂▃▄▅▆▇█', 1+abs(y-x))), 'string_agg', ''));;
SELECT list_apply(range(8), x -> list_aggr(list_apply(range(8),
y -> list_element('▁▂▃▄▅▆▇█', 1+abs(y-x))), 'string_agg', ''));;
;
SELECT list_apply(range(8), x -> list_aggr(list_apply(range(8),
y -> list_element('▁▂▃▄▅▆▇█', 1+abs(y-x))), 'string_agg', ''));;
SELECT list_apply(range(8), (x -> list_aggr(list_apply(range(8), (y -> list_element('▁▂▃▄▅▆▇█', (1 + abs((y - x)))))), 'string_agg', '')));
;
;
;
;
SELECT list_apply(range(8), x -> list_aggr(list_apply(range(8),
y -> list_element('▁▂▃▄▅▆▇█', 1+abs(y-x))), 'string_agg', ''));;
CREATE TABLE lists (i integer, v varchar[]);
INSERT INTO lists VALUES (1, ['a', 'b', 'c']), (8, NULL), (3, ['duck', 'db', 'tests']), (NULL, NULL), (NULL, ['lambdas!']);
SELECT list_transform(v, x -> list_transform(v, y -> x || y)) FROM lists;
SELECT list_transform(v, x -> list_transform(v, y -> x || y)) FROM lists;
;
SELECT list_transform(v, x -> list_transform(v, y -> x || y)) FROM lists;
SELECT list_transform(v, (x -> list_transform(v, (y -> (x || y))))) FROM lists;
;
;
;
;
SELECT list_transform(v, x -> list_transform(v, y -> x || y)) FROM lists;
SELECT list_transform(v, x -> list_transform(v, y -> list_transform(v, z -> x || y || z))) FROM lists;
SELECT list_transform(v, x -> list_transform(v, y -> list_transform(v, z -> x || y || z))) FROM lists;
;
SELECT list_transform(v, x -> list_transform(v, y -> list_transform(v, z -> x || y || z))) FROM lists;
SELECT list_transform(v, (x -> list_transform(v, (y -> list_transform(v, (z -> ((x || y) || z))))))) FROM lists;
;
;
;
;
SELECT list_transform(v, x -> list_transform(v, y -> list_transform(v, z -> x || y || z))) FROM lists;
SELECT list_transform(v, x -> [list_transform([':-)'], y -> x || y || '-#lambdaLove')]
|| list_filter(list_transform(['B-)'], k -> [k] || [x]), j -> list_contains(j, 'a') or list_contains(j, 'duck')))
FROM lists;
SELECT list_transform(v, x -> [list_transform([':-)'], y -> x || y || '-#lambdaLove')]
|| list_filter(list_transform(['B-)'], k -> [k] || [x]), j -> list_contains(j, 'a') or list_contains(j, 'duck')))
FROM lists;
;
SELECT list_transform(v, x -> [list_transform([':-)'], y -> x || y || '-#lambdaLove')]
|| list_filter(list_transform(['B-)'], k -> [k] || [x]), j -> list_contains(j, 'a') or list_contains(j, 'duck')))
FROM lists;
SELECT list_transform(v, (x -> (main.list_value(list_transform(main.list_value(':-)'), (y -> ((x || y) || '-#lambdaLove')))) || list_filter(list_transform(main.list_value('B-)'), (k -> (main.list_value(k) || main.list_value(x)))), (j -> (list_contains(j, 'a') OR list_contains(j, 'duck'))))))) FROM lists;
;
;
;
;
SELECT list_transform(v, x -> [list_transform([':-)'], y -> x || y || '-#lambdaLove')]
|| list_filter(list_transform(['B-)'], k -> [k] || [x]), j -> list_contains(j, 'a') or list_contains(j, 'duck')))
FROM lists;
create table no_overwrite as select [range, range + 1] l from range(3);;
select l, [[{'x+y': x + y, 'x': x, 'y': y, 'l': l} for y in [42, 43]] for x in l] from no_overwrite;;
select l, [[{'x+y': x + y, 'x': x, 'y': y, 'l': l} for y in [42, 43]] for x in l] from no_overwrite;;
;
select l, [[{'x+y': x + y, 'x': x, 'y': y, 'l': l} for y in [42, 43]] for x in l] from no_overwrite;;
SELECT l, main.list_apply(l, (x -> main.list_apply(main.list_value(42, 43), (y -> main.struct_pack("x+y" := (x + y), x := x, y := y, l := l))))) FROM no_overwrite;
;
;
;
;
select l, [[{'x+y': x + y, 'x': x, 'y': y, 'l': l} for y in [42, 43]] for x in l] from no_overwrite;;
